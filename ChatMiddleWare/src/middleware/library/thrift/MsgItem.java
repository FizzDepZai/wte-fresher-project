/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package middleware.library.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Message Item
 */
public class MsgItem implements org.apache.thrift.TBase<MsgItem, MsgItem._Fields>, java.io.Serializable, Cloneable, Comparable<MsgItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MsgItem");

  private static final org.apache.thrift.protocol.TField MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("msgId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SENDING_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sendingUserId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RECEIVE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("receiveUserId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new MsgItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new MsgItemTupleSchemeFactory());
  }

  public long msgId; // required
  public String sendingUserId; // required
  public String receiveUserId; // required
  public String content; // required
  public String time; // required
  public String type; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MSG_ID((short)1, "msgId"),
    SENDING_USER_ID((short)2, "sendingUserId"),
    RECEIVE_USER_ID((short)3, "receiveUserId"),
    CONTENT((short)4, "content"),
    TIME((short)5, "time"),
    TYPE((short)6, "type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MSG_ID
          return MSG_ID;
        case 2: // SENDING_USER_ID
          return SENDING_USER_ID;
        case 3: // RECEIVE_USER_ID
          return RECEIVE_USER_ID;
        case 4: // CONTENT
          return CONTENT;
        case 5: // TIME
          return TIME;
        case 6: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MSGID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("msgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SENDING_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("sendingUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RECEIVE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("receiveUserId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MsgItem.class, metaDataMap);
  }

  public MsgItem() {
  }

  public MsgItem(
    long msgId,
    String sendingUserId,
    String receiveUserId,
    String content,
    String time,
    String type)
  {
    this();
    this.msgId = msgId;
    setMsgIdIsSet(true);
    this.sendingUserId = sendingUserId;
    this.receiveUserId = receiveUserId;
    this.content = content;
    this.time = time;
    this.type = type;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MsgItem(MsgItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.msgId = other.msgId;
    if (other.isSetSendingUserId()) {
      this.sendingUserId = other.sendingUserId;
    }
    if (other.isSetReceiveUserId()) {
      this.receiveUserId = other.receiveUserId;
    }
    if (other.isSetContent()) {
      this.content = other.content;
    }
    if (other.isSetTime()) {
      this.time = other.time;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
  }

  public MsgItem deepCopy() {
    return new MsgItem(this);
  }

  @Override
  public void clear() {
    setMsgIdIsSet(false);
    this.msgId = 0;
    this.sendingUserId = null;
    this.receiveUserId = null;
    this.content = null;
    this.time = null;
    this.type = null;
  }

  public long getMsgId() {
    return this.msgId;
  }

  public MsgItem setMsgId(long msgId) {
    this.msgId = msgId;
    setMsgIdIsSet(true);
    return this;
  }

  public void unsetMsgId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  /** Returns true if field msgId is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgId() {
    return EncodingUtils.testBit(__isset_bitfield, __MSGID_ISSET_ID);
  }

  public void setMsgIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGID_ISSET_ID, value);
  }

  public String getSendingUserId() {
    return this.sendingUserId;
  }

  public MsgItem setSendingUserId(String sendingUserId) {
    this.sendingUserId = sendingUserId;
    return this;
  }

  public void unsetSendingUserId() {
    this.sendingUserId = null;
  }

  /** Returns true if field sendingUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetSendingUserId() {
    return this.sendingUserId != null;
  }

  public void setSendingUserIdIsSet(boolean value) {
    if (!value) {
      this.sendingUserId = null;
    }
  }

  public String getReceiveUserId() {
    return this.receiveUserId;
  }

  public MsgItem setReceiveUserId(String receiveUserId) {
    this.receiveUserId = receiveUserId;
    return this;
  }

  public void unsetReceiveUserId() {
    this.receiveUserId = null;
  }

  /** Returns true if field receiveUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiveUserId() {
    return this.receiveUserId != null;
  }

  public void setReceiveUserIdIsSet(boolean value) {
    if (!value) {
      this.receiveUserId = null;
    }
  }

  public String getContent() {
    return this.content;
  }

  public MsgItem setContent(String content) {
    this.content = content;
    return this;
  }

  public void unsetContent() {
    this.content = null;
  }

  /** Returns true if field content is set (has been assigned a value) and false otherwise */
  public boolean isSetContent() {
    return this.content != null;
  }

  public void setContentIsSet(boolean value) {
    if (!value) {
      this.content = null;
    }
  }

  public String getTime() {
    return this.time;
  }

  public MsgItem setTime(String time) {
    this.time = time;
    return this;
  }

  public void unsetTime() {
    this.time = null;
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return this.time != null;
  }

  public void setTimeIsSet(boolean value) {
    if (!value) {
      this.time = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public MsgItem setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MSG_ID:
      if (value == null) {
        unsetMsgId();
      } else {
        setMsgId((Long)value);
      }
      break;

    case SENDING_USER_ID:
      if (value == null) {
        unsetSendingUserId();
      } else {
        setSendingUserId((String)value);
      }
      break;

    case RECEIVE_USER_ID:
      if (value == null) {
        unsetReceiveUserId();
      } else {
        setReceiveUserId((String)value);
      }
      break;

    case CONTENT:
      if (value == null) {
        unsetContent();
      } else {
        setContent((String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MSG_ID:
      return Long.valueOf(getMsgId());

    case SENDING_USER_ID:
      return getSendingUserId();

    case RECEIVE_USER_ID:
      return getReceiveUserId();

    case CONTENT:
      return getContent();

    case TIME:
      return getTime();

    case TYPE:
      return getType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MSG_ID:
      return isSetMsgId();
    case SENDING_USER_ID:
      return isSetSendingUserId();
    case RECEIVE_USER_ID:
      return isSetReceiveUserId();
    case CONTENT:
      return isSetContent();
    case TIME:
      return isSetTime();
    case TYPE:
      return isSetType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MsgItem)
      return this.equals((MsgItem)that);
    return false;
  }

  public boolean equals(MsgItem that) {
    if (that == null)
      return false;

    boolean this_present_msgId = true;
    boolean that_present_msgId = true;
    if (this_present_msgId || that_present_msgId) {
      if (!(this_present_msgId && that_present_msgId))
        return false;
      if (this.msgId != that.msgId)
        return false;
    }

    boolean this_present_sendingUserId = true && this.isSetSendingUserId();
    boolean that_present_sendingUserId = true && that.isSetSendingUserId();
    if (this_present_sendingUserId || that_present_sendingUserId) {
      if (!(this_present_sendingUserId && that_present_sendingUserId))
        return false;
      if (!this.sendingUserId.equals(that.sendingUserId))
        return false;
    }

    boolean this_present_receiveUserId = true && this.isSetReceiveUserId();
    boolean that_present_receiveUserId = true && that.isSetReceiveUserId();
    if (this_present_receiveUserId || that_present_receiveUserId) {
      if (!(this_present_receiveUserId && that_present_receiveUserId))
        return false;
      if (!this.receiveUserId.equals(that.receiveUserId))
        return false;
    }

    boolean this_present_content = true && this.isSetContent();
    boolean that_present_content = true && that.isSetContent();
    if (this_present_content || that_present_content) {
      if (!(this_present_content && that_present_content))
        return false;
      if (!this.content.equals(that.content))
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (!this.time.equals(that.time))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(MsgItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMsgId()).compareTo(other.isSetMsgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgId, other.msgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSendingUserId()).compareTo(other.isSetSendingUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSendingUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sendingUserId, other.sendingUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiveUserId()).compareTo(other.isSetReceiveUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiveUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiveUserId, other.receiveUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MsgItem(");
    boolean first = true;

    sb.append("msgId:");
    sb.append(this.msgId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sendingUserId:");
    if (this.sendingUserId == null) {
      sb.append("null");
    } else {
      sb.append(this.sendingUserId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("receiveUserId:");
    if (this.receiveUserId == null) {
      sb.append("null");
    } else {
      sb.append(this.receiveUserId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("content:");
    if (this.content == null) {
      sb.append("null");
    } else {
      sb.append(this.content);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    if (this.time == null) {
      sb.append("null");
    } else {
      sb.append(this.time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class MsgItemStandardSchemeFactory implements SchemeFactory {
    public MsgItemStandardScheme getScheme() {
      return new MsgItemStandardScheme();
    }
  }

  private static class MsgItemStandardScheme extends StandardScheme<MsgItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, MsgItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.msgId = iprot.readI64();
              struct.setMsgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SENDING_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sendingUserId = iprot.readString();
              struct.setSendingUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RECEIVE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.receiveUserId = iprot.readString();
              struct.setReceiveUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.content = iprot.readString();
              struct.setContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time = iprot.readString();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, MsgItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MSG_ID_FIELD_DESC);
      oprot.writeI64(struct.msgId);
      oprot.writeFieldEnd();
      if (struct.sendingUserId != null) {
        oprot.writeFieldBegin(SENDING_USER_ID_FIELD_DESC);
        oprot.writeString(struct.sendingUserId);
        oprot.writeFieldEnd();
      }
      if (struct.receiveUserId != null) {
        oprot.writeFieldBegin(RECEIVE_USER_ID_FIELD_DESC);
        oprot.writeString(struct.receiveUserId);
        oprot.writeFieldEnd();
      }
      if (struct.content != null) {
        oprot.writeFieldBegin(CONTENT_FIELD_DESC);
        oprot.writeString(struct.content);
        oprot.writeFieldEnd();
      }
      if (struct.time != null) {
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeString(struct.time);
        oprot.writeFieldEnd();
      }
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeString(struct.type);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class MsgItemTupleSchemeFactory implements SchemeFactory {
    public MsgItemTupleScheme getScheme() {
      return new MsgItemTupleScheme();
    }
  }

  private static class MsgItemTupleScheme extends TupleScheme<MsgItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, MsgItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMsgId()) {
        optionals.set(0);
      }
      if (struct.isSetSendingUserId()) {
        optionals.set(1);
      }
      if (struct.isSetReceiveUserId()) {
        optionals.set(2);
      }
      if (struct.isSetContent()) {
        optionals.set(3);
      }
      if (struct.isSetTime()) {
        optionals.set(4);
      }
      if (struct.isSetType()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetMsgId()) {
        oprot.writeI64(struct.msgId);
      }
      if (struct.isSetSendingUserId()) {
        oprot.writeString(struct.sendingUserId);
      }
      if (struct.isSetReceiveUserId()) {
        oprot.writeString(struct.receiveUserId);
      }
      if (struct.isSetContent()) {
        oprot.writeString(struct.content);
      }
      if (struct.isSetTime()) {
        oprot.writeString(struct.time);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, MsgItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.msgId = iprot.readI64();
        struct.setMsgIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.sendingUserId = iprot.readString();
        struct.setSendingUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.receiveUserId = iprot.readString();
        struct.setReceiveUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.content = iprot.readString();
        struct.setContentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.time = iprot.readString();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
    }
  }

}

