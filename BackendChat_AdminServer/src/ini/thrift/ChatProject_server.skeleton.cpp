// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "ChatProject.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::ChatProject;

class ChatProjectHandler : virtual public ChatProjectIf {
 public:
  ChatProjectHandler() {
    // Your initialization goes here
  }

  void getAllChatRoom(std::vector<RoomItem> & _return) {
    // Your implementation goes here
    printf("getAllChatRoom\n");
  }

  void getListUserInRoom(std::vector<UserItem> & _return, const std::string& roomId) {
    // Your implementation goes here
    printf("getListUserInRoom\n");
  }

  void getAllEmotionGroup(std::vector<GroupEmotion> & _return) {
    // Your implementation goes here
    printf("getAllEmotionGroup\n");
  }

  void getEmotionGroup(GroupEmotion& _return, const std::string& emotionGroupId) {
    // Your implementation goes here
    printf("getEmotionGroup\n");
  }

  void addRoom(const RoomItem& newRoom) {
    // Your implementation goes here
    printf("addRoom\n");
  }

  void editRoom(const RoomItem& room) {
    // Your implementation goes here
    printf("editRoom\n");
  }

  void deleteRoom(const std::string& roomId) {
    // Your implementation goes here
    printf("deleteRoom\n");
  }

  void addEmotion(const std::string& emotionItem) {
    // Your implementation goes here
    printf("addEmotion\n");
  }

  void editEmotion(const int64_t emotionId, const EmotionItem& emotionItem) {
    // Your implementation goes here
    printf("editEmotion\n");
  }

  void deleteEmotion(const int64_t emotionId) {
    // Your implementation goes here
    printf("deleteEmotion\n");
  }

  void kickUser(const std::string& userId) {
    // Your implementation goes here
    printf("kickUser\n");
  }

  void getRoomStatisticByDate(RoomStatistic& _return, const int32_t date) {
    // Your implementation goes here
    printf("getRoomStatisticByDate\n");
  }

  void getEmotionStatisticByDate(EmotionStatistic& _return, const int32_t date) {
    // Your implementation goes here
    printf("getEmotionStatisticByDate\n");
  }

  bool deleteAllEmotionInGroup(const std::string& groupEmotionId) {
    // Your implementation goes here
    printf("deleteAllEmotionInGroup\n");
  }

  bool deleteGroupEmotion(const std::string& groupEmotionId) {
    // Your implementation goes here
    printf("deleteGroupEmotion\n");
  }

  void addGroupEmotion(std::string& _return, const std::string& groupEmotionName) {
    // Your implementation goes here
    printf("addGroupEmotion\n");
  }

  void gelAllGroupEmotion(std::string& _return) {
    // Your implementation goes here
    printf("gelAllGroupEmotion\n");
  }

  void loadAllEmotion(std::string& _return) {
    // Your implementation goes here
    printf("loadAllEmotion\n");
  }

  void getEmotionWithGroup(std::string& _return, const std::string& groupId) {
    // Your implementation goes here
    printf("getEmotionWithGroup\n");
  }

  bool checkImageEmotionExist(const std::string& imageStyle, const std::string& groupEmotionId) {
    // Your implementation goes here
    printf("checkImageEmotionExist\n");
  }

  bool sendMessageInternal(const MsgItem& msgItem, const bool messageOnline) {
    // Your implementation goes here
    printf("sendMessageInternal\n");
  }

  void saveListMsgId(const std::vector<int64_t> & listMsgId) {
    // Your implementation goes here
    printf("saveListMsgId\n");
  }

  void saveOfflineMsgNotify(const std::string& userId) {
    // Your implementation goes here
    printf("saveOfflineMsgNotify\n");
  }

  void getMessageList(std::vector<MsgItem> & _return, const std::string& userId1, const std::string& userId2, const int32_t totalMsg) {
    // Your implementation goes here
    printf("getMessageList\n");
  }

  void getMessageIdList(std::vector<int64_t> & _return, const std::string& userId1, const std::string& userId2, const int32_t totalMsg) {
    // Your implementation goes here
    printf("getMessageIdList\n");
  }

  void getMessageItem(MsgItem& _return, const int64_t MsgId) {
    // Your implementation goes here
    printf("getMessageItem\n");
  }

  void saveRoomMsg(const MsgItem& msg, const std::string& roomId) {
    // Your implementation goes here
    printf("saveRoomMsg\n");
  }

  void getRoomMsg(std::vector<MsgItem> & _return, const std::string& roomId) {
    // Your implementation goes here
    printf("getRoomMsg\n");
  }

  void getUserInRoom(std::vector<UserItem> & _return, const std::string& roomId) {
    // Your implementation goes here
    printf("getUserInRoom\n");
  }

  void getUserProfile(UserItem& _return, const std::string& userId) {
    // Your implementation goes here
    printf("getUserProfile\n");
  }

  void getFriendList(std::vector<UserItem> & _return, const std::string& userId) {
    // Your implementation goes here
    printf("getFriendList\n");
  }

  int64_t getNewMsgId() {
    // Your implementation goes here
    printf("getNewMsgId\n");
  }

  void notifyUserOnline(const std::string& userId) {
    // Your implementation goes here
    printf("notifyUserOnline\n");
  }

  void notifyListUserOffline(const std::vector<std::string> & listUserIdOffline) {
    // Your implementation goes here
    printf("notifyListUserOffline\n");
  }

  void checkFriendOnline(std::vector<bool> & _return, const std::vector<std::string> & listFriendId) {
    // Your implementation goes here
    printf("checkFriendOnline\n");
  }

  void getFriendListZalo(std::string& _return, const std::string& userId, const std::string& oAuthCode) {
    // Your implementation goes here
    printf("getFriendListZalo\n");
  }

  void getProfileZalo(std::string& _return, const std::string& userId, const std::string& oAuthCode) {
    // Your implementation goes here
    printf("getProfileZalo\n");
  }

  void setLogin(const std::string& sessionId) {
    // Your implementation goes here
    printf("setLogin\n");
  }

  bool isLogin(const std::string& sessionId) {
    // Your implementation goes here
    printf("isLogin\n");
  }

  void setLogout(const std::string& sessionId) {
    // Your implementation goes here
    printf("setLogout\n");
  }

  int64_t getImageId() {
    // Your implementation goes here
    printf("getImageId\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ChatProjectHandler> handler(new ChatProjectHandler());
  shared_ptr<TProcessor> processor(new ChatProjectProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

