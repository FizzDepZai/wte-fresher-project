/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef chatProject_TYPES_H
#define chatProject_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>
#include "../../MySerializer.hpp"
#include <thrift/cxxfunctional.h>


namespace ChatProject {

    struct Error {

        enum type {
            SAVE_SUCCESS = 1,
            SAVE_FAIL = 2,
            READ_DISK_TO_MEM_SUCCESS = 3,
            READ_DISK_TO_MEM_FAIL = 4,
            WRITE_TO_CACHE_SUCCESS = 5,
            WRITE_TO_CACHE_FAIL = 6,
            READ_CACHE_FAIL = 7,
            WRITE_HASH_FAIL = 8,
            WRITE_HASH_SUCCESS = 9
        };
    };

    extern const std::map<int, const char*> _Error_VALUES_TO_NAMES;

    struct RoomStatus {

        enum type {
            OPEN = 1,
            CLOSED = 2,
            FULL = 3
        };
    };

    extern const std::map<int, const char*> _RoomStatus_VALUES_TO_NAMES;

    typedef struct _RoomItem__isset {

        _RoomItem__isset() : roomId(false), roomName(false), roomStatusId(false), UserOnlineNumber(false) {
        }
        bool roomId;
        bool roomName;
        bool roomStatusId;
        bool UserOnlineNumber;
    } _RoomItem__isset;

    class RoomItem {
    public:

        static const char* ascii_fingerprint; // = "6D1E1C5BB0FAD3801490643606BE38C8";
        static const uint8_t binary_fingerprint[16]; // = {0x6D,0x1E,0x1C,0x5B,0xB0,0xFA,0xD3,0x80,0x14,0x90,0x64,0x36,0x06,0xBE,0x38,0xC8};

        RoomItem() : roomId(), roomName(), roomStatusId((RoomStatus::type)0), UserOnlineNumber(0) {
        }

        virtual ~RoomItem() throw () {
        }

        std::string roomId;
        std::string roomName;
        RoomStatus::type roomStatusId;
        int32_t UserOnlineNumber;

        _RoomItem__isset __isset;

        void __set_roomId(const std::string& val) {
            roomId = val;
        }

        void __set_roomName(const std::string& val) {
            roomName = val;
        }

        void __set_roomStatusId(const RoomStatus::type val) {
            roomStatusId = val;
        }

        void __set_UserOnlineNumber(const int32_t val) {
            UserOnlineNumber = val;
        }

        bool operator ==(const RoomItem & rhs) const {
            if (!(roomId == rhs.roomId))
                return false;
            if (!(roomName == rhs.roomName))
                return false;
            if (!(roomStatusId == rhs.roomStatusId))
                return false;
            if (!(UserOnlineNumber == rhs.UserOnlineNumber))
                return false;
            return true;
        }

        bool operator !=(const RoomItem &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const RoomItem &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

    };

    void swap(RoomItem &a, RoomItem &b);

    typedef struct _UserItem__isset {

        _UserItem__isset() : userId(false), userName(false), avatarPath(false) {
        }
        bool userId;
        bool userName;
        bool avatarPath;
    } _UserItem__isset;

    class UserItem {
    public:

        static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
        static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

        UserItem() : userId(), userName(), avatarPath() {
        }

        virtual ~UserItem() throw () {
        }

        std::string userId;
        std::string userName;
        std::string avatarPath;

        _UserItem__isset __isset;

        void __set_userId(const std::string& val) {
            userId = val;
        }

        void __set_userName(const std::string& val) {
            userName = val;
        }

        void __set_avatarPath(const std::string& val) {
            avatarPath = val;
        }

        bool operator ==(const UserItem & rhs) const {
            if (!(userId == rhs.userId))
                return false;
            if (!(userName == rhs.userName))
                return false;
            if (!(avatarPath == rhs.avatarPath))
                return false;
            return true;
        }

        bool operator !=(const UserItem &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const UserItem &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        uint32_t readSerialize(const std::string & inStr) {
            TSerializer<UserItem> serializer(inStr.data(), inStr.size());
            int32_t returnVal = serializer.deserialize(*this);
            return returnVal;
        }

        uint32_t writeSerialize(std::string & outStr) const {
            TSerializer<UserItem> serializer;
            int32_t returnVal = serializer.serialize(*this);
            outStr = serializer.getBufferAsString();
            return returnVal;
        }
    };

    void swap(UserItem &a, UserItem &b);

    typedef struct _EmotionItem__isset {

        _EmotionItem__isset() : emotionId(false), keyInput(false), style(false), src(false), title(false), groupId(false) {
        }
        bool emotionId;
        bool keyInput;
        bool style;
        bool src;
        bool title;
        bool groupId;
    } _EmotionItem__isset;

    class EmotionItem {
    public:

        static const char* ascii_fingerprint; // = "1F10F993631B3ABD721D79EE58C2056E";
        static const uint8_t binary_fingerprint[16]; // = {0x1F,0x10,0xF9,0x93,0x63,0x1B,0x3A,0xBD,0x72,0x1D,0x79,0xEE,0x58,0xC2,0x05,0x6E};

        EmotionItem() : emotionId(0), keyInput(), style(), src(), title(), groupId() {
        }

        virtual ~EmotionItem() throw () {
        }

        int64_t emotionId;
        std::string keyInput;
        std::string style;
        std::string src;
        std::string title;
        std::string groupId;

        _EmotionItem__isset __isset;

        void __set_emotionId(const int64_t val) {
            emotionId = val;
        }

        void __set_keyInput(const std::string& val) {
            keyInput = val;
        }

        void __set_style(const std::string& val) {
            style = val;
        }

        void __set_src(const std::string& val) {
            src = val;
        }

        void __set_title(const std::string& val) {
            title = val;
        }

        void __set_groupId(const std::string& val) {
            groupId = val;
        }

        bool operator ==(const EmotionItem & rhs) const {
            if (!(emotionId == rhs.emotionId))
                return false;
            if (!(keyInput == rhs.keyInput))
                return false;
            if (!(style == rhs.style))
                return false;
            if (!(src == rhs.src))
                return false;
            if (!(title == rhs.title))
                return false;
            if (!(groupId == rhs.groupId))
                return false;
            return true;
        }

        bool operator !=(const EmotionItem &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const EmotionItem &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        uint32_t readSerialize(const std::string & inStr) {
            TSerializer<EmotionItem> serializer(inStr.data(), inStr.size());
            int32_t returnVal = serializer.deserialize(*this);
            return returnVal;
        }

        uint32_t writeSerialize(std::string & outStr) const {
            TSerializer<EmotionItem> serializer;
            int32_t returnVal = serializer.serialize(*this);
            outStr = serializer.getBufferAsString();
            return returnVal;
        }
    };

    void swap(EmotionItem &a, EmotionItem &b);

    typedef struct _GroupEmotion__isset {

        _GroupEmotion__isset() : groupId(false), groupName(false), emotionList(false) {
        }
        bool groupId;
        bool groupName;
        bool emotionList;
    } _GroupEmotion__isset;

    class GroupEmotion {
    public:

        static const char* ascii_fingerprint; // = "6F4C9A3920D50E26C78816CC39D0B1BE";
        static const uint8_t binary_fingerprint[16]; // = {0x6F,0x4C,0x9A,0x39,0x20,0xD5,0x0E,0x26,0xC7,0x88,0x16,0xCC,0x39,0xD0,0xB1,0xBE};

        GroupEmotion() : groupId(), groupName() {
        }

        virtual ~GroupEmotion() throw () {
        }

        std::string groupId;
        std::string groupName;
        std::vector<EmotionItem> emotionList;

        _GroupEmotion__isset __isset;

        void __set_groupId(const std::string& val) {
            groupId = val;
        }

        void __set_groupName(const std::string& val) {
            groupName = val;
        }

        void __set_emotionList(const std::vector<EmotionItem> & val) {
            emotionList = val;
        }

        bool operator ==(const GroupEmotion & rhs) const {
            if (!(groupId == rhs.groupId))
                return false;
            if (!(groupName == rhs.groupName))
                return false;
            if (!(emotionList == rhs.emotionList))
                return false;
            return true;
        }

        bool operator !=(const GroupEmotion &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const GroupEmotion &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        uint32_t readSerialize(const std::string & inStr) {
            TSerializer<GroupEmotion> serializer(inStr.data(), inStr.size());
            int32_t returnVal = serializer.deserialize(*this);
            return returnVal;
        }

        uint32_t writeSerialize(std::string & outStr) const {
            TSerializer<GroupEmotion> serializer;
            int32_t returnVal = serializer.serialize(*this);
            outStr = serializer.getBufferAsString();
            return returnVal;
        }
    };

    void swap(GroupEmotion &a, GroupEmotion &b);

    typedef struct _EmotionStatistic__isset {

        _EmotionStatistic__isset() : emotionId(false), date(false), usedCount(false) {
        }
        bool emotionId;
        bool date;
        bool usedCount;
    } _EmotionStatistic__isset;

    class EmotionStatistic {
    public:

        static const char* ascii_fingerprint; // = "28C2ECC89260BADB9C70330FBF47BFA8";
        static const uint8_t binary_fingerprint[16]; // = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};

        EmotionStatistic() : emotionId(), date(0), usedCount(0) {
        }

        virtual ~EmotionStatistic() throw () {
        }

        std::string emotionId;
        int32_t date;
        int32_t usedCount;

        _EmotionStatistic__isset __isset;

        void __set_emotionId(const std::string& val) {
            emotionId = val;
        }

        void __set_date(const int32_t val) {
            date = val;
        }

        void __set_usedCount(const int32_t val) {
            usedCount = val;
        }

        bool operator ==(const EmotionStatistic & rhs) const {
            if (!(emotionId == rhs.emotionId))
                return false;
            if (!(date == rhs.date))
                return false;
            if (!(usedCount == rhs.usedCount))
                return false;
            return true;
        }

        bool operator !=(const EmotionStatistic &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const EmotionStatistic &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        uint32_t readSerialize(const std::string & inStr) {
            TSerializer<EmotionStatistic> serializer(inStr.data(), inStr.size());
            int32_t returnVal = serializer.deserialize(*this);
            return returnVal;
        }

        uint32_t writeSerialize(std::string & outStr) const {
            TSerializer<EmotionStatistic> serializer;
            int32_t returnVal = serializer.serialize(*this);
            outStr = serializer.getBufferAsString();
            return returnVal;
        }
    };

    void swap(EmotionStatistic &a, EmotionStatistic &b);

    typedef struct _RoomStatistic__isset {

        _RoomStatistic__isset() : roomId(false), date(false), ViewCount(false) {
        }
        bool roomId;
        bool date;
        bool ViewCount;
    } _RoomStatistic__isset;

    class RoomStatistic {
    public:

        static const char* ascii_fingerprint; // = "28C2ECC89260BADB9C70330FBF47BFA8";
        static const uint8_t binary_fingerprint[16]; // = {0x28,0xC2,0xEC,0xC8,0x92,0x60,0xBA,0xDB,0x9C,0x70,0x33,0x0F,0xBF,0x47,0xBF,0xA8};

        RoomStatistic() : roomId(), date(0), ViewCount(0) {
        }

        virtual ~RoomStatistic() throw () {
        }

        std::string roomId;
        int32_t date;
        int32_t ViewCount;

        _RoomStatistic__isset __isset;

        void __set_roomId(const std::string& val) {
            roomId = val;
        }

        void __set_date(const int32_t val) {
            date = val;
        }

        void __set_ViewCount(const int32_t val) {
            ViewCount = val;
        }

        bool operator ==(const RoomStatistic & rhs) const {
            if (!(roomId == rhs.roomId))
                return false;
            if (!(date == rhs.date))
                return false;
            if (!(ViewCount == rhs.ViewCount))
                return false;
            return true;
        }

        bool operator !=(const RoomStatistic &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const RoomStatistic &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        uint32_t readSerialize(const std::string & inStr) {
            TSerializer<RoomStatistic> serializer(inStr.data(), inStr.size());
            int32_t returnVal = serializer.deserialize(*this);
            return returnVal;
        }

        uint32_t writeSerialize(std::string & outStr) const {
            TSerializer<RoomStatistic> serializer;
            int32_t returnVal = serializer.serialize(*this);
            outStr = serializer.getBufferAsString();
            return returnVal;
        }
    };

    void swap(RoomStatistic &a, RoomStatistic &b);

    typedef struct _MsgItem__isset {

        _MsgItem__isset() : msgId(false), sendingUserId(false), receiveUserId(false), content(false), time(false) {
        }
        bool msgId;
        bool sendingUserId;
        bool receiveUserId;
        bool content;
        bool time;
    } _MsgItem__isset;

    class MsgItem {
    public:

        static const char* ascii_fingerprint; // = "3CC2C885F5B9D03E96907F8376BF80E9";
        static const uint8_t binary_fingerprint[16]; // = {0x3C,0xC2,0xC8,0x85,0xF5,0xB9,0xD0,0x3E,0x96,0x90,0x7F,0x83,0x76,0xBF,0x80,0xE9};

        MsgItem() : msgId(0), sendingUserId(), receiveUserId(), content(), time() {
        }

        virtual ~MsgItem() throw () {
        }

        int64_t msgId;
        std::string sendingUserId;
        std::string receiveUserId;
        std::string content;
        std::string time;

        _MsgItem__isset __isset;

        void __set_msgId(const int64_t val) {
            msgId = val;
        }

        void __set_sendingUserId(const std::string& val) {
            sendingUserId = val;
        }

        void __set_receiveUserId(const std::string& val) {
            receiveUserId = val;
        }

        void __set_content(const std::string& val) {
            content = val;
        }

        void __set_time(const std::string& val) {
            time = val;
        }

        bool operator ==(const MsgItem & rhs) const {
            if (!(msgId == rhs.msgId))
                return false;
            if (!(sendingUserId == rhs.sendingUserId))
                return false;
            if (!(receiveUserId == rhs.receiveUserId))
                return false;
            if (!(content == rhs.content))
                return false;
            if (!(time == rhs.time))
                return false;
            return true;
        }

        bool operator !=(const MsgItem &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const MsgItem &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        uint32_t readSerialize(const std::string & inStr) {
            TSerializer<MsgItem> serializer(inStr.data(), inStr.size());
            int32_t returnVal = serializer.deserialize(*this);
            return returnVal;
        }

        uint32_t writeSerialize(std::string & outStr) const {
            TSerializer<MsgItem> serializer;
            int32_t returnVal = serializer.serialize(*this);
            outStr = serializer.getBufferAsString();
            return returnVal;
        }
    };

    void swap(MsgItem &a, MsgItem &b);

    typedef struct _MsgId__isset {

        _MsgId__isset() : msgId(false) {
        }
        bool msgId;
    } _MsgId__isset;

    class MsgId {
    public:

        static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
        static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

        MsgId() : msgId() {
        }

        virtual ~MsgId() throw () {
        }

        std::string msgId;

        _MsgId__isset __isset;

        void __set_msgId(const std::string& val) {
            msgId = val;
        }

        bool operator ==(const MsgId & rhs) const {
            if (!(msgId == rhs.msgId))
                return false;
            return true;
        }

        bool operator !=(const MsgId &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const MsgId &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        uint32_t readSerialize(const std::string & inStr) {
            TSerializer<MsgId> serializer(inStr.data(), inStr.size());
            int32_t returnVal = serializer.deserialize(*this);
            return returnVal;
        }

        uint32_t writeSerialize(std::string & outStr) const {
            TSerializer<MsgId> serializer;
            int32_t returnVal = serializer.serialize(*this);
            outStr = serializer.getBufferAsString();
            return returnVal;
        }
    };

    void swap(MsgId &a, MsgId &b);

    typedef struct _MsgIdList__isset {

        _MsgIdList__isset() : msgIdList(false) {
        }
        bool msgIdList;
    } _MsgIdList__isset;

    class MsgIdList {
    public:

        static const char* ascii_fingerprint; // = "E49D7D1A9013CC81CD0F69D631EF82E4";
        static const uint8_t binary_fingerprint[16]; // = {0xE4,0x9D,0x7D,0x1A,0x90,0x13,0xCC,0x81,0xCD,0x0F,0x69,0xD6,0x31,0xEF,0x82,0xE4};

        MsgIdList() {
        }

        virtual ~MsgIdList() throw () {
        }

        std::vector<int64_t> msgIdList;

        _MsgIdList__isset __isset;

        void __set_msgIdList(const std::vector<int64_t> & val) {
            msgIdList = val;
        }

        bool operator ==(const MsgIdList & rhs) const {
            if (!(msgIdList == rhs.msgIdList))
                return false;
            return true;
        }

        bool operator !=(const MsgIdList &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const MsgIdList &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        uint32_t readSerialize(const std::string & inStr) {
            TSerializer<MsgIdList> serializer(inStr.data(), inStr.size());
            int32_t returnVal = serializer.deserialize(*this);
            return returnVal;
        }

        uint32_t writeSerialize(std::string & outStr) const {
            TSerializer<MsgIdList> serializer;
            int32_t returnVal = serializer.serialize(*this);
            outStr = serializer.getBufferAsString();
            return returnVal;
        }
    };

    void swap(MsgIdList &a, MsgIdList &b);

    typedef struct _MsgIdItem__isset {

        _MsgIdItem__isset() : msgIdItem(false) {
        }
        bool msgIdItem;
    } _MsgIdItem__isset;

    class MsgIdItem {
    public:

        static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
        static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

        MsgIdItem() : msgIdItem(0) {
        }

        virtual ~MsgIdItem() throw () {
        }

        int64_t msgIdItem;

        _MsgIdItem__isset __isset;

        void __set_msgIdItem(const int64_t val) {
            msgIdItem = val;
        }

        bool operator ==(const MsgIdItem & rhs) const {
            if (!(msgIdItem == rhs.msgIdItem))
                return false;
            return true;
        }

        bool operator !=(const MsgIdItem &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const MsgIdItem &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        uint32_t readSerialize(const std::string & inStr) {
            TSerializer<MsgIdItem> serializer(inStr.data(), inStr.size());
            int32_t returnVal = serializer.deserialize(*this);
            return returnVal;
        }

        uint32_t writeSerialize(std::string & outStr) const {
            TSerializer<MsgIdItem> serializer;
            int32_t returnVal = serializer.serialize(*this);
            outStr = serializer.getBufferAsString();
            return returnVal;
        }
    };

    void swap(MsgIdItem &a, MsgIdItem &b);

    typedef struct _MsgtItemList__isset {

        _MsgtItemList__isset() : msgItemList(false) {
        }
        bool msgItemList;
    } _MsgtItemList__isset;

    class MsgtItemList {
    public:

        static const char* ascii_fingerprint; // = "5586A64844E63CDFA1A1427A01DFBD49";
        static const uint8_t binary_fingerprint[16]; // = {0x55,0x86,0xA6,0x48,0x44,0xE6,0x3C,0xDF,0xA1,0xA1,0x42,0x7A,0x01,0xDF,0xBD,0x49};

        MsgtItemList() {
        }

        virtual ~MsgtItemList() throw () {
        }

        std::vector<MsgItem> msgItemList;

        _MsgtItemList__isset __isset;

        void __set_msgItemList(const std::vector<MsgItem> & val) {
            msgItemList = val;
        }

        bool operator ==(const MsgtItemList & rhs) const {
            if (!(msgItemList == rhs.msgItemList))
                return false;
            return true;
        }

        bool operator !=(const MsgtItemList &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const MsgtItemList &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        uint32_t readSerialize(const std::string & inStr) {
            TSerializer<MsgtItemList> serializer(inStr.data(), inStr.size());
            int32_t returnVal = serializer.deserialize(*this);
            return returnVal;
        }

        uint32_t writeSerialize(std::string & outStr) const {
            TSerializer<MsgtItemList> serializer;
            int32_t returnVal = serializer.serialize(*this);
            outStr = serializer.getBufferAsString();
            return returnVal;
        }
    };

    void swap(MsgtItemList &a, MsgtItemList &b);

    typedef struct _GroupId__isset {

        _GroupId__isset() : groupId(false) {
        }
        bool groupId;
    } _GroupId__isset;

    class GroupId {
    public:

        static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
        static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

        GroupId() : groupId() {
        }

        virtual ~GroupId() throw () {
        }

        std::string groupId;

        _GroupId__isset __isset;

        void __set_groupId(const std::string& val) {
            groupId = val;
        }

        bool operator ==(const GroupId & rhs) const {
            if (!(groupId == rhs.groupId))
                return false;
            return true;
        }

        bool operator !=(const GroupId &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const GroupId &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        uint32_t readSerialize(const std::string & inStr) {
            TSerializer<GroupId> serializer(inStr.data(), inStr.size());
            int32_t returnVal = serializer.deserialize(*this);
            return returnVal;
        }

        uint32_t writeSerialize(std::string & outStr) const {
            TSerializer<GroupId> serializer;
            int32_t returnVal = serializer.serialize(*this);
            outStr = serializer.getBufferAsString();
            return returnVal;
        }
    };

    void swap(GroupId &a, GroupId &b);

    typedef struct _EmotionId__isset {

        _EmotionId__isset() : emotionId(false) {
        }
        bool emotionId;
    } _EmotionId__isset;

    class EmotionId {
    public:

        static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
        static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

        EmotionId() : emotionId(0) {
        }

        virtual ~EmotionId() throw () {
        }

        int64_t emotionId;

        _EmotionId__isset __isset;

        void __set_emotionId(const int64_t val) {
            emotionId = val;
        }

        bool operator ==(const EmotionId & rhs) const {
            if (!(emotionId == rhs.emotionId))
                return false;
            return true;
        }

        bool operator !=(const EmotionId &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const EmotionId &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        uint32_t readSerialize(const std::string & inStr) {
            TSerializer<EmotionId> serializer(inStr.data(), inStr.size());
            int32_t returnVal = serializer.deserialize(*this);
            return returnVal;
        }

        uint32_t writeSerialize(std::string & outStr) const {
            TSerializer<EmotionId> serializer;
            int32_t returnVal = serializer.serialize(*this);
            outStr = serializer.getBufferAsString();
            return returnVal;
        }
    };

    void swap(EmotionId &a, EmotionId &b);

    typedef struct _RoomIdDate__isset {

        _RoomIdDate__isset() : roomIdDate(false) {
        }
        bool roomIdDate;
    } _RoomIdDate__isset;

    class RoomIdDate {
    public:

        static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
        static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

        RoomIdDate() : roomIdDate() {
        }

        virtual ~RoomIdDate() throw () {
        }

        std::string roomIdDate;

        _RoomIdDate__isset __isset;

        void __set_roomIdDate(const std::string& val) {
            roomIdDate = val;
        }

        bool operator ==(const RoomIdDate & rhs) const {
            if (!(roomIdDate == rhs.roomIdDate))
                return false;
            return true;
        }

        bool operator !=(const RoomIdDate &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const RoomIdDate &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        uint32_t readSerialize(const std::string & inStr) {
            TSerializer<RoomIdDate> serializer(inStr.data(), inStr.size());
            int32_t returnVal = serializer.deserialize(*this);
            return returnVal;
        }

        uint32_t writeSerialize(std::string & outStr) const {
            TSerializer<RoomIdDate> serializer;
            int32_t returnVal = serializer.serialize(*this);
            outStr = serializer.getBufferAsString();
            return returnVal;
        }
    };

    void swap(RoomIdDate &a, RoomIdDate &b);

    typedef struct _EmotionIdDate__isset {

        _EmotionIdDate__isset() : emotionIdDate(false) {
        }
        bool emotionIdDate;
    } _EmotionIdDate__isset;

    class EmotionIdDate {
    public:

        static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
        static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

        EmotionIdDate() : emotionIdDate() {
        }

        virtual ~EmotionIdDate() throw () {
        }

        std::string emotionIdDate;

        _EmotionIdDate__isset __isset;

        void __set_emotionIdDate(const std::string& val) {
            emotionIdDate = val;
        }

        bool operator ==(const EmotionIdDate & rhs) const {
            if (!(emotionIdDate == rhs.emotionIdDate))
                return false;
            return true;
        }

        bool operator !=(const EmotionIdDate &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const EmotionIdDate &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        uint32_t readSerialize(const std::string & inStr) {
            TSerializer<EmotionIdDate> serializer(inStr.data(), inStr.size());
            int32_t returnVal = serializer.deserialize(*this);
            return returnVal;
        }

        uint32_t writeSerialize(std::string & outStr) const {
            TSerializer<EmotionIdDate> serializer;
            int32_t returnVal = serializer.serialize(*this);
            outStr = serializer.getBufferAsString();
            return returnVal;
        }
    };

    void swap(EmotionIdDate &a, EmotionIdDate &b);

    typedef struct _RoomId__isset {

        _RoomId__isset() : roomId(false) {
        }
        bool roomId;
    } _RoomId__isset;

    class RoomId {
    public:

        static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
        static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

        RoomId() : roomId() {
        }

        virtual ~RoomId() throw () {
        }

        std::string roomId;

        _RoomId__isset __isset;

        void __set_roomId(const std::string& val) {
            roomId = val;
        }

        bool operator ==(const RoomId & rhs) const {
            if (!(roomId == rhs.roomId))
                return false;
            return true;
        }

        bool operator !=(const RoomId &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const RoomId &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        uint32_t readSerialize(const std::string & inStr) {
            TSerializer<RoomId> serializer(inStr.data(), inStr.size());
            int32_t returnVal = serializer.deserialize(*this);
            return returnVal;
        }

        uint32_t writeSerialize(std::string & outStr) const {
            TSerializer<RoomId> serializer;
            int32_t returnVal = serializer.serialize(*this);
            outStr = serializer.getBufferAsString();
            return returnVal;
        }

    };

    void swap(RoomId &a, RoomId &b);

    typedef struct _ListEmotionId__isset {

        _ListEmotionId__isset() : listEmotionId(false) {
        }
        bool listEmotionId;
    } _ListEmotionId__isset;

    class ListEmotionId {
    public:

        static const char* ascii_fingerprint; // = "E49D7D1A9013CC81CD0F69D631EF82E4";
        static const uint8_t binary_fingerprint[16]; // = {0xE4,0x9D,0x7D,0x1A,0x90,0x13,0xCC,0x81,0xCD,0x0F,0x69,0xD6,0x31,0xEF,0x82,0xE4};

        ListEmotionId() {
        }

        virtual ~ListEmotionId() throw () {
        }

        std::vector<int64_t> listEmotionId;

        _ListEmotionId__isset __isset;

        void __set_listEmotionId(const std::vector<int64_t> & val) {
            listEmotionId = val;
        }

        bool operator ==(const ListEmotionId & rhs) const {
            if (!(listEmotionId == rhs.listEmotionId))
                return false;
            return true;
        }

        bool operator !=(const ListEmotionId &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const ListEmotionId &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        uint32_t readSerialize(const std::string & inStr) {
            TSerializer<ListEmotionId> serializer(inStr.data(), inStr.size());
            int32_t returnVal = serializer.deserialize(*this);
            return returnVal;
        }

        uint32_t writeSerialize(std::string & outStr) const {
            TSerializer<ListEmotionId> serializer;
            int32_t returnVal = serializer.serialize(*this);
            outStr = serializer.getBufferAsString();
            return returnVal;
        }

    };

    void swap(ListEmotionId &a, ListEmotionId &b);

    typedef struct _ListFriendOfflineMsg__isset {

        _ListFriendOfflineMsg__isset() : userId(false), listFriendOfflineMsg(false) {
        }
        bool userId;
        bool listFriendOfflineMsg;
    } _ListFriendOfflineMsg__isset;

    class ListFriendOfflineMsg {
    public:

        static const char* ascii_fingerprint; // = "25702B8D5E28AA39160F267DABBC8446";
        static const uint8_t binary_fingerprint[16]; // = {0x25,0x70,0x2B,0x8D,0x5E,0x28,0xAA,0x39,0x16,0x0F,0x26,0x7D,0xAB,0xBC,0x84,0x46};

        ListFriendOfflineMsg() : userId() {
        }

        virtual ~ListFriendOfflineMsg() throw () {
        }

        std::string userId;
        std::vector<std::string> listFriendOfflineMsg;

        _ListFriendOfflineMsg__isset __isset;

        void __set_userId(const std::string& val) {
            userId = val;
        }

        void __set_listFriendOfflineMsg(const std::vector<std::string> & val) {
            listFriendOfflineMsg = val;
        }

        bool operator ==(const ListFriendOfflineMsg & rhs) const {
            if (!(userId == rhs.userId))
                return false;
            if (!(listFriendOfflineMsg == rhs.listFriendOfflineMsg))
                return false;
            return true;
        }

        bool operator !=(const ListFriendOfflineMsg &rhs) const {
            return !(*this == rhs);
        }

        bool operator<(const ListFriendOfflineMsg &) const;

        uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
        uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

        uint32_t readSerialize(const std::string & inStr) {
            TSerializer<ListFriendOfflineMsg> serializer(inStr.data(), inStr.size());
            int32_t returnVal = serializer.deserialize(*this);
            return returnVal;
        }

        uint32_t writeSerialize(std::string & outStr) const {
            TSerializer<ListFriendOfflineMsg> serializer;
            int32_t returnVal = serializer.serialize(*this);
            outStr = serializer.getBufferAsString();
            return returnVal;
        }
    };

    void swap(ListFriendOfflineMsg &a, ListFriendOfflineMsg &b);
} // namespace

#endif
