/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "chatProject_types.h"

#include <algorithm>

namespace ChatProject {

    int _kErrorValues[] = {
        Error::SAVE_SUCCESS,
        Error::SAVE_FAIL,
        Error::READ_DISK_TO_MEM_SUCCESS,
        Error::READ_DISK_TO_MEM_FAIL,
        Error::WRITE_TO_CACHE_SUCCESS,
        Error::WRITE_TO_CACHE_FAIL,
        Error::READ_CACHE_FAIL,
        Error::WRITE_HASH_FAIL,
        Error::WRITE_HASH_SUCCESS
    };
    const char* _kErrorNames[] = {
        "SAVE_SUCCESS",
        "SAVE_FAIL",
        "READ_DISK_TO_MEM_SUCCESS",
        "READ_DISK_TO_MEM_FAIL",
        "WRITE_TO_CACHE_SUCCESS",
        "WRITE_TO_CACHE_FAIL",
        "READ_CACHE_FAIL",
        "WRITE_HASH_FAIL",
        "WRITE_HASH_SUCCESS"
    };
    const std::map<int, const char*> _Error_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kErrorValues, _kErrorNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

    int _kRoomStatusValues[] = {
        RoomStatus::OPEN,
        RoomStatus::CLOSED,
        RoomStatus::FULL
    };
    const char* _kRoomStatusNames[] = {
        "OPEN",
        "CLOSED",
        "FULL"
    };
    const std::map<int, const char*> _RoomStatus_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kRoomStatusValues, _kRoomStatusNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

    int _kMessageTypeValues[] = {
        MessageType::TEXT,
        MessageType::IMAGE,
        MessageType::FILE
    };
    const char* _kMessageTypeNames[] = {
        "TEXT",
        "IMAGE",
        "FILE"
    };
    const std::map<int, const char*> _MessageType_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(3, _kMessageTypeValues, _kMessageTypeNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

    const char* RoomItem::ascii_fingerprint = "6D1E1C5BB0FAD3801490643606BE38C8";
    const uint8_t RoomItem::binary_fingerprint[16] = {0x6D, 0x1E, 0x1C, 0x5B, 0xB0, 0xFA, 0xD3, 0x80, 0x14, 0x90, 0x64, 0x36, 0x06, 0xBE, 0x38, 0xC8};

    uint32_t RoomItem::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->roomId);
                        this->__isset.roomId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 2:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->roomName);
                        this->__isset.roomName = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 3:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        int32_t ecast0;
                        xfer += iprot->readI32(ecast0);
                        this->roomStatusId = (RoomStatus::type)ecast0;
                        this->__isset.roomStatusId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 4:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->UserOnlineNumber);
                        this->__isset.UserOnlineNumber = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t RoomItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("RoomItem");

        xfer += oprot->writeFieldBegin("roomId", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->roomId);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("roomName", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->roomName);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("roomStatusId", ::apache::thrift::protocol::T_I32, 3);
        xfer += oprot->writeI32((int32_t)this->roomStatusId);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("UserOnlineNumber", ::apache::thrift::protocol::T_I32, 4);
        xfer += oprot->writeI32(this->UserOnlineNumber);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(RoomItem &a, RoomItem &b) {
        using ::std::swap;
        swap(a.roomId, b.roomId);
        swap(a.roomName, b.roomName);
        swap(a.roomStatusId, b.roomStatusId);
        swap(a.UserOnlineNumber, b.UserOnlineNumber);
        swap(a.__isset, b.__isset);
    }

    const char* UserItem::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
    const uint8_t UserItem::binary_fingerprint[16] = {0xAB, 0x87, 0x99, 0x40, 0xBD, 0x15, 0xB6, 0xB2, 0x56, 0x91, 0x26, 0x5F, 0x73, 0x84, 0xB2, 0x71};

    uint32_t UserItem::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->userId);
                        this->__isset.userId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 2:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->userName);
                        this->__isset.userName = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 3:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->avatarPath);
                        this->__isset.avatarPath = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t UserItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("UserItem");

        xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->userId);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->userName);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("avatarPath", ::apache::thrift::protocol::T_STRING, 3);
        xfer += oprot->writeString(this->avatarPath);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(UserItem &a, UserItem &b) {
        using ::std::swap;
        swap(a.userId, b.userId);
        swap(a.userName, b.userName);
        swap(a.avatarPath, b.avatarPath);
        swap(a.__isset, b.__isset);
    }

    const char* EmotionItem::ascii_fingerprint = "1F10F993631B3ABD721D79EE58C2056E";
    const uint8_t EmotionItem::binary_fingerprint[16] = {0x1F, 0x10, 0xF9, 0x93, 0x63, 0x1B, 0x3A, 0xBD, 0x72, 0x1D, 0x79, 0xEE, 0x58, 0xC2, 0x05, 0x6E};

    uint32_t EmotionItem::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_I64) {
                        xfer += iprot->readI64(this->emotionId);
                        this->__isset.emotionId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 2:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->keyInput);
                        this->__isset.keyInput = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 3:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->style);
                        this->__isset.style = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 4:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->src);
                        this->__isset.src = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 5:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->title);
                        this->__isset.title = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 6:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->groupId);
                        this->__isset.groupId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t EmotionItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("EmotionItem");

        xfer += oprot->writeFieldBegin("emotionId", ::apache::thrift::protocol::T_I64, 1);
        xfer += oprot->writeI64(this->emotionId);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("keyInput", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->keyInput);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("style", ::apache::thrift::protocol::T_STRING, 3);
        xfer += oprot->writeString(this->style);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("src", ::apache::thrift::protocol::T_STRING, 4);
        xfer += oprot->writeString(this->src);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("title", ::apache::thrift::protocol::T_STRING, 5);
        xfer += oprot->writeString(this->title);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("groupId", ::apache::thrift::protocol::T_STRING, 6);
        xfer += oprot->writeString(this->groupId);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(EmotionItem &a, EmotionItem &b) {
        using ::std::swap;
        swap(a.emotionId, b.emotionId);
        swap(a.keyInput, b.keyInput);
        swap(a.style, b.style);
        swap(a.src, b.src);
        swap(a.title, b.title);
        swap(a.groupId, b.groupId);
        swap(a.__isset, b.__isset);
    }

    const char* GroupEmotion::ascii_fingerprint = "24A17C47E464DD752EEC5DB3270E8086";
    const uint8_t GroupEmotion::binary_fingerprint[16] = {0x24, 0xA1, 0x7C, 0x47, 0xE4, 0x64, 0xDD, 0x75, 0x2E, 0xEC, 0x5D, 0xB3, 0x27, 0x0E, 0x80, 0x86};

    uint32_t GroupEmotion::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->groupId);
                        this->__isset.groupId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 2:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->groupName);
                        this->__isset.groupName = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 3:
                    if (ftype == ::apache::thrift::protocol::T_LIST) {
                        {
                            this->emotionList.clear();
                            uint32_t _size1;
                            ::apache::thrift::protocol::TType _etype4;
                            xfer += iprot->readListBegin(_etype4, _size1);
                            this->emotionList.resize(_size1);
                            uint32_t _i5;
                            for (_i5 = 0; _i5 < _size1; ++_i5) {
                                xfer += this->emotionList[_i5].read(iprot);
                            }
                            xfer += iprot->readListEnd();
                        }
                        this->__isset.emotionList = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t GroupEmotion::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("GroupEmotion");

        xfer += oprot->writeFieldBegin("groupId", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->groupId);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("groupName", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->groupName);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("emotionList", ::apache::thrift::protocol::T_LIST, 3);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t> (this->emotionList.size()));
            std::vector<EmotionItem> ::const_iterator _iter6;
            for (_iter6 = this->emotionList.begin(); _iter6 != this->emotionList.end(); ++_iter6) {
                xfer += (*_iter6).write(oprot);
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(GroupEmotion &a, GroupEmotion &b) {
        using ::std::swap;
        swap(a.groupId, b.groupId);
        swap(a.groupName, b.groupName);
        swap(a.emotionList, b.emotionList);
        swap(a.__isset, b.__isset);
    }

    const char* EmotionStatistic::ascii_fingerprint = "28C2ECC89260BADB9C70330FBF47BFA8";
    const uint8_t EmotionStatistic::binary_fingerprint[16] = {0x28, 0xC2, 0xEC, 0xC8, 0x92, 0x60, 0xBA, 0xDB, 0x9C, 0x70, 0x33, 0x0F, 0xBF, 0x47, 0xBF, 0xA8};

    uint32_t EmotionStatistic::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->emotionId);
                        this->__isset.emotionId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 2:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->date);
                        this->__isset.date = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 3:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->usedCount);
                        this->__isset.usedCount = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t EmotionStatistic::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("EmotionStatistic");

        xfer += oprot->writeFieldBegin("emotionId", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->emotionId);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("date", ::apache::thrift::protocol::T_I32, 2);
        xfer += oprot->writeI32(this->date);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("usedCount", ::apache::thrift::protocol::T_I32, 3);
        xfer += oprot->writeI32(this->usedCount);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(EmotionStatistic &a, EmotionStatistic &b) {
        using ::std::swap;
        swap(a.emotionId, b.emotionId);
        swap(a.date, b.date);
        swap(a.usedCount, b.usedCount);
        swap(a.__isset, b.__isset);
    }

    const char* RoomStatistic::ascii_fingerprint = "28C2ECC89260BADB9C70330FBF47BFA8";
    const uint8_t RoomStatistic::binary_fingerprint[16] = {0x28, 0xC2, 0xEC, 0xC8, 0x92, 0x60, 0xBA, 0xDB, 0x9C, 0x70, 0x33, 0x0F, 0xBF, 0x47, 0xBF, 0xA8};

    uint32_t RoomStatistic::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->roomId);
                        this->__isset.roomId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 2:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->date);
                        this->__isset.date = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 3:
                    if (ftype == ::apache::thrift::protocol::T_I32) {
                        xfer += iprot->readI32(this->ViewCount);
                        this->__isset.ViewCount = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t RoomStatistic::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("RoomStatistic");

        xfer += oprot->writeFieldBegin("roomId", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->roomId);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("date", ::apache::thrift::protocol::T_I32, 2);
        xfer += oprot->writeI32(this->date);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("ViewCount", ::apache::thrift::protocol::T_I32, 3);
        xfer += oprot->writeI32(this->ViewCount);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(RoomStatistic &a, RoomStatistic &b) {
        using ::std::swap;
        swap(a.roomId, b.roomId);
        swap(a.date, b.date);
        swap(a.ViewCount, b.ViewCount);
        swap(a.__isset, b.__isset);
    }

    const char* MsgItem::ascii_fingerprint = "1F10F993631B3ABD721D79EE58C2056E";
    const uint8_t MsgItem::binary_fingerprint[16] = {0x1F, 0x10, 0xF9, 0x93, 0x63, 0x1B, 0x3A, 0xBD, 0x72, 0x1D, 0x79, 0xEE, 0x58, 0xC2, 0x05, 0x6E};

    uint32_t MsgItem::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_I64) {
                        xfer += iprot->readI64(this->msgId);
                        this->__isset.msgId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 2:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->sendingUserId);
                        this->__isset.sendingUserId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 3:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->receiveUserId);
                        this->__isset.receiveUserId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 4:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->content);
                        this->__isset.content = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 5:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->time);
                        this->__isset.time = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                case 6:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->msgType);
                        this->__isset.msgType = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t MsgItem::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("MsgItem");

        xfer += oprot->writeFieldBegin("msgId", ::apache::thrift::protocol::T_I64, 1);
        xfer += oprot->writeI64(this->msgId);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("sendingUserId", ::apache::thrift::protocol::T_STRING, 2);
        xfer += oprot->writeString(this->sendingUserId);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("receiveUserId", ::apache::thrift::protocol::T_STRING, 3);
        xfer += oprot->writeString(this->receiveUserId);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("content", ::apache::thrift::protocol::T_STRING, 4);
        xfer += oprot->writeString(this->content);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("time", ::apache::thrift::protocol::T_STRING, 5);
        xfer += oprot->writeString(this->time);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldBegin("msgType", ::apache::thrift::protocol::T_STRING, 6);
        xfer += oprot->writeString(this->msgType);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(MsgItem &a, MsgItem &b) {
        using ::std::swap;
        swap(a.msgId, b.msgId);
        swap(a.sendingUserId, b.sendingUserId);
        swap(a.receiveUserId, b.receiveUserId);
        swap(a.content, b.content);
        swap(a.time, b.time);
        swap(a.msgType, b.msgType);
        swap(a.__isset, b.__isset);
    }

    const char* MsgId::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
    const uint8_t MsgId::binary_fingerprint[16] = {0xEF, 0xB9, 0x29, 0x59, 0x5D, 0x31, 0x2A, 0xC8, 0xF3, 0x05, 0xD5, 0xA7, 0x94, 0xCF, 0xED, 0xA1};

    uint32_t MsgId::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->msgId);
                        this->__isset.msgId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t MsgId::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("MsgId");

        xfer += oprot->writeFieldBegin("msgId", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->msgId);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(MsgId &a, MsgId &b) {
        using ::std::swap;
        swap(a.msgId, b.msgId);
        swap(a.__isset, b.__isset);
    }

    const char* MsgIdList::ascii_fingerprint = "E49D7D1A9013CC81CD0F69D631EF82E4";
    const uint8_t MsgIdList::binary_fingerprint[16] = {0xE4, 0x9D, 0x7D, 0x1A, 0x90, 0x13, 0xCC, 0x81, 0xCD, 0x0F, 0x69, 0xD6, 0x31, 0xEF, 0x82, 0xE4};

    uint32_t MsgIdList::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_LIST) {
                        {
                            this->msgIdList.clear();
                            uint32_t _size7;
                            ::apache::thrift::protocol::TType _etype10;
                            xfer += iprot->readListBegin(_etype10, _size7);
                            this->msgIdList.resize(_size7);
                            uint32_t _i11;
                            for (_i11 = 0; _i11 < _size7; ++_i11) {
                                xfer += iprot->readI64(this->msgIdList[_i11]);
                            }
                            xfer += iprot->readListEnd();
                        }
                        this->__isset.msgIdList = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t MsgIdList::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("MsgIdList");

        xfer += oprot->writeFieldBegin("msgIdList", ::apache::thrift::protocol::T_LIST, 1);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t> (this->msgIdList.size()));
            std::vector<int64_t> ::const_iterator _iter12;
            for (_iter12 = this->msgIdList.begin(); _iter12 != this->msgIdList.end(); ++_iter12) {
                xfer += oprot->writeI64((*_iter12));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(MsgIdList &a, MsgIdList &b) {
        using ::std::swap;
        swap(a.msgIdList, b.msgIdList);
        swap(a.__isset, b.__isset);
    }

    const char* MsgItemId::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
    const uint8_t MsgItemId::binary_fingerprint[16] = {0x56, 0xA5, 0x9C, 0xE7, 0xFF, 0xAF, 0x82, 0xBC, 0xA8, 0xA1, 0x9F, 0xAA, 0xCD, 0xE4, 0xFB, 0x75};

    uint32_t MsgItemId::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_I64) {
                        xfer += iprot->readI64(this->msgItemId);
                        this->__isset.msgItemId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t MsgItemId::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("MsgItemId");

        xfer += oprot->writeFieldBegin("msgItemId", ::apache::thrift::protocol::T_I64, 1);
        xfer += oprot->writeI64(this->msgItemId);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(MsgItemId &a, MsgItemId &b) {
        using ::std::swap;
        swap(a.msgItemId, b.msgItemId);
        swap(a.__isset, b.__isset);
    }

    const char* GroupId::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
    const uint8_t GroupId::binary_fingerprint[16] = {0xEF, 0xB9, 0x29, 0x59, 0x5D, 0x31, 0x2A, 0xC8, 0xF3, 0x05, 0xD5, 0xA7, 0x94, 0xCF, 0xED, 0xA1};

    uint32_t GroupId::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->groupId);
                        this->__isset.groupId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t GroupId::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("GroupId");

        xfer += oprot->writeFieldBegin("groupId", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->groupId);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(GroupId &a, GroupId &b) {
        using ::std::swap;
        swap(a.groupId, b.groupId);
        swap(a.__isset, b.__isset);
    }

    const char* EmotionId::ascii_fingerprint = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
    const uint8_t EmotionId::binary_fingerprint[16] = {0x56, 0xA5, 0x9C, 0xE7, 0xFF, 0xAF, 0x82, 0xBC, 0xA8, 0xA1, 0x9F, 0xAA, 0xCD, 0xE4, 0xFB, 0x75};

    uint32_t EmotionId::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_I64) {
                        xfer += iprot->readI64(this->emotionId);
                        this->__isset.emotionId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t EmotionId::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("EmotionId");

        xfer += oprot->writeFieldBegin("emotionId", ::apache::thrift::protocol::T_I64, 1);
        xfer += oprot->writeI64(this->emotionId);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(EmotionId &a, EmotionId &b) {
        using ::std::swap;
        swap(a.emotionId, b.emotionId);
        swap(a.__isset, b.__isset);
    }

    const char* RoomIdDate::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
    const uint8_t RoomIdDate::binary_fingerprint[16] = {0xEF, 0xB9, 0x29, 0x59, 0x5D, 0x31, 0x2A, 0xC8, 0xF3, 0x05, 0xD5, 0xA7, 0x94, 0xCF, 0xED, 0xA1};

    uint32_t RoomIdDate::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->roomIdDate);
                        this->__isset.roomIdDate = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t RoomIdDate::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("RoomIdDate");

        xfer += oprot->writeFieldBegin("roomIdDate", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->roomIdDate);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(RoomIdDate &a, RoomIdDate &b) {
        using ::std::swap;
        swap(a.roomIdDate, b.roomIdDate);
        swap(a.__isset, b.__isset);
    }

    const char* EmotionIdDate::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
    const uint8_t EmotionIdDate::binary_fingerprint[16] = {0xEF, 0xB9, 0x29, 0x59, 0x5D, 0x31, 0x2A, 0xC8, 0xF3, 0x05, 0xD5, 0xA7, 0x94, 0xCF, 0xED, 0xA1};

    uint32_t EmotionIdDate::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->emotionIdDate);
                        this->__isset.emotionIdDate = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t EmotionIdDate::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("EmotionIdDate");

        xfer += oprot->writeFieldBegin("emotionIdDate", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->emotionIdDate);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(EmotionIdDate &a, EmotionIdDate &b) {
        using ::std::swap;
        swap(a.emotionIdDate, b.emotionIdDate);
        swap(a.__isset, b.__isset);
    }

    const char* RoomId::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
    const uint8_t RoomId::binary_fingerprint[16] = {0xEF, 0xB9, 0x29, 0x59, 0x5D, 0x31, 0x2A, 0xC8, 0xF3, 0x05, 0xD5, 0xA7, 0x94, 0xCF, 0xED, 0xA1};

    uint32_t RoomId::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->roomId);
                        this->__isset.roomId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t RoomId::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("RoomId");

        xfer += oprot->writeFieldBegin("roomId", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->roomId);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(RoomId &a, RoomId &b) {
        using ::std::swap;
        swap(a.roomId, b.roomId);
        swap(a.__isset, b.__isset);
    }

    const char* ListEmotionId::ascii_fingerprint = "E49D7D1A9013CC81CD0F69D631EF82E4";
    const uint8_t ListEmotionId::binary_fingerprint[16] = {0xE4, 0x9D, 0x7D, 0x1A, 0x90, 0x13, 0xCC, 0x81, 0xCD, 0x0F, 0x69, 0xD6, 0x31, 0xEF, 0x82, 0xE4};

    uint32_t ListEmotionId::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_LIST) {
                        {
                            this->listEmotionId.clear();
                            uint32_t _size13;
                            ::apache::thrift::protocol::TType _etype16;
                            xfer += iprot->readListBegin(_etype16, _size13);
                            this->listEmotionId.resize(_size13);
                            uint32_t _i17;
                            for (_i17 = 0; _i17 < _size13; ++_i17) {
                                xfer += iprot->readI64(this->listEmotionId[_i17]);
                            }
                            xfer += iprot->readListEnd();
                        }
                        this->__isset.listEmotionId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t ListEmotionId::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("ListEmotionId");

        xfer += oprot->writeFieldBegin("listEmotionId", ::apache::thrift::protocol::T_LIST, 1);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_I64, static_cast<uint32_t> (this->listEmotionId.size()));
            std::vector<int64_t> ::const_iterator _iter18;
            for (_iter18 = this->listEmotionId.begin(); _iter18 != this->listEmotionId.end(); ++_iter18) {
                xfer += oprot->writeI64((*_iter18));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(ListEmotionId &a, ListEmotionId &b) {
        using ::std::swap;
        swap(a.listEmotionId, b.listEmotionId);
        swap(a.__isset, b.__isset);
    }

    const char* UserId::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
    const uint8_t UserId::binary_fingerprint[16] = {0xEF, 0xB9, 0x29, 0x59, 0x5D, 0x31, 0x2A, 0xC8, 0xF3, 0x05, 0xD5, 0xA7, 0x94, 0xCF, 0xED, 0xA1};

    uint32_t UserId::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->userId);
                        this->__isset.userId = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t UserId::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("UserId");

        xfer += oprot->writeFieldBegin("userId", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->userId);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(UserId &a, UserId &b) {
        using ::std::swap;
        swap(a.userId, b.userId);
        swap(a.__isset, b.__isset);
    }

    const char* ListOfflineMsg::ascii_fingerprint = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
    const uint8_t ListOfflineMsg::binary_fingerprint[16] = {0xAC, 0xE4, 0xF6, 0x44, 0xF0, 0xFD, 0xD2, 0x89, 0xDD, 0xC4, 0xEE, 0x5B, 0x83, 0xBC, 0x13, 0xC0};

    uint32_t ListOfflineMsg::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_LIST) {
                        {
                            this->listOfflineMsg.clear();
                            uint32_t _size19;
                            ::apache::thrift::protocol::TType _etype22;
                            xfer += iprot->readListBegin(_etype22, _size19);
                            this->listOfflineMsg.resize(_size19);
                            uint32_t _i23;
                            for (_i23 = 0; _i23 < _size19; ++_i23) {
                                xfer += iprot->readString(this->listOfflineMsg[_i23]);
                            }
                            xfer += iprot->readListEnd();
                        }
                        this->__isset.listOfflineMsg = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t ListOfflineMsg::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("ListOfflineMsg");

        xfer += oprot->writeFieldBegin("listOfflineMsg", ::apache::thrift::protocol::T_LIST, 1);
        {
            xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t> (this->listOfflineMsg.size()));
            std::vector<std::string> ::const_iterator _iter24;
            for (_iter24 = this->listOfflineMsg.begin(); _iter24 != this->listOfflineMsg.end(); ++_iter24) {
                xfer += oprot->writeString((*_iter24));
            }
            xfer += oprot->writeListEnd();
        }
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(ListOfflineMsg &a, ListOfflineMsg &b) {
        using ::std::swap;
        swap(a.listOfflineMsg, b.listOfflineMsg);
        swap(a.__isset, b.__isset);
    }
    const char* UserName::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
    const uint8_t UserName::binary_fingerprint[16] = {0xEF, 0xB9, 0x29, 0x59, 0x5D, 0x31, 0x2A, 0xC8, 0xF3, 0x05, 0xD5, 0xA7, 0x94, 0xCF, 0xED, 0xA1};

    uint32_t UserName::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->userName);
                        this->__isset.userName = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t UserName::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("UserName");

        xfer += oprot->writeFieldBegin("userName", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->userName);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(UserName &a, UserName &b) {
        using ::std::swap;
        swap(a.userName, b.userName);
        swap(a.__isset, b.__isset);
    }

    const char* Password::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
    const uint8_t Password::binary_fingerprint[16] = {0xEF, 0xB9, 0x29, 0x59, 0x5D, 0x31, 0x2A, 0xC8, 0xF3, 0x05, 0xD5, 0xA7, 0x94, 0xCF, 0xED, 0xA1};

    uint32_t Password::read(::apache::thrift::protocol::TProtocol* iprot) {

        uint32_t xfer = 0;
        std::string fname;
        ::apache::thrift::protocol::TType ftype;
        int16_t fid;

        xfer += iprot->readStructBegin(fname);

        using ::apache::thrift::protocol::TProtocolException;


        while (true) {
            xfer += iprot->readFieldBegin(fname, ftype, fid);
            if (ftype == ::apache::thrift::protocol::T_STOP) {
                break;
            }
            switch (fid) {
                case 1:
                    if (ftype == ::apache::thrift::protocol::T_STRING) {
                        xfer += iprot->readString(this->passWord);
                        this->__isset.passWord = true;
                    } else {
                        xfer += iprot->skip(ftype);
                    }
                    break;
                default:
                    xfer += iprot->skip(ftype);
                    break;
            }
            xfer += iprot->readFieldEnd();
        }

        xfer += iprot->readStructEnd();

        return xfer;
    }

    uint32_t Password::write(::apache::thrift::protocol::TProtocol* oprot) const {
        uint32_t xfer = 0;
        xfer += oprot->writeStructBegin("Password");

        xfer += oprot->writeFieldBegin("passWord", ::apache::thrift::protocol::T_STRING, 1);
        xfer += oprot->writeString(this->passWord);
        xfer += oprot->writeFieldEnd();

        xfer += oprot->writeFieldStop();
        xfer += oprot->writeStructEnd();
        return xfer;
    }

    void swap(Password &a, Password &b) {
        using ::std::swap;
        swap(a.passWord, b.passWord);
        swap(a.__isset, b.__isset);
    }
} // namespace
