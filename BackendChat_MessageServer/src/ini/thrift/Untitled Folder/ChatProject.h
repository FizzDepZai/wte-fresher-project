/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ChatProject_H
#define ChatProject_H

#include <thrift/TDispatchProcessor.h>
#include "chatProject_types.h"

namespace ChatProject {

class ChatProjectIf {
 public:
  virtual ~ChatProjectIf() {}
  virtual void getAllChatRoom(std::vector<RoomItem> & _return) = 0;
  virtual void getListUserInRoom(std::vector<UserItem> & _return, const std::string& roomId) = 0;
  virtual void getAllEmotionGroup(std::vector<GroupEmotion> & _return) = 0;
  virtual void getEmotionGroup(GroupEmotion& _return, const std::string& emotionGroupId) = 0;
  virtual void addRoom(const RoomItem& newRoom) = 0;
  virtual void editRoom(const RoomItem& room) = 0;
  virtual void deleteRoom(const std::string& roomId) = 0;
  virtual void addEmotion(const std::string& emotionItem) = 0;
  virtual void editEmotion(const int64_t emotionId, const EmotionItem& emotionItem) = 0;
  virtual void deleteEmotion(const int64_t emotionId) = 0;
  virtual void kickUser(const std::string& userId) = 0;
  virtual void getRoomStatisticByDate(RoomStatistic& _return, const int32_t date) = 0;
  virtual void getEmotionStatisticByDate(EmotionStatistic& _return, const int32_t date) = 0;
  virtual bool sendMessageInternal(const MsgItem& msgItem, const bool messageOnline) = 0;
  virtual void saveListMsgId(const std::vector<int64_t> & listMsgId) = 0;
  virtual void saveOfflineMsgNotify(const std::string& userId) = 0;
  virtual void getMessageList(std::vector<MsgItem> & _return, const std::string& userId1, const std::string& userId2, const int32_t totalMsg) = 0;
  virtual void getMessageIdList(std::vector<int64_t> & _return, const std::string& userId1, const std::string& userId2, const int32_t totalMsg) = 0;
  virtual void getMessageItem(MsgItem& _return, const int64_t MsgId) = 0;
  virtual void saveRoomMsg(const MsgItem& msg, const std::string& roomId) = 0;
  virtual void getRoomMsg(std::vector<MsgItem> & _return, const std::string& roomId) = 0;
  virtual void getUserInRoom(std::vector<UserItem> & _return, const std::string& roomId) = 0;
  virtual void getUserProfile(UserItem& _return, const std::string& userId) = 0;
  virtual void getFriendList(std::vector<UserItem> & _return, const std::string& userId) = 0;
  virtual int64_t getNewMsgId() = 0;
  virtual void notifyUserOnline(const std::string& userId) = 0;
  virtual void notifyListUserOffline(const std::vector<std::string> & listUserIdOffline) = 0;
  virtual void checkFriendOnline(std::vector<bool> & _return, const std::vector<std::string> & listFriendId) = 0;
  virtual void getFriendListZalo(std::string& _return, const std::string& userId, const std::string& oAuthCode) = 0;
  virtual void getProfileZalo(std::string& _return, const std::string& userId, const std::string& oAuthCode) = 0;
  virtual void loadAllEmotion(std::string& _return) = 0;
  virtual void checkOfflineMessage(std::vector<std::string> & _return, const std::string& userId) = 0;
};

class ChatProjectIfFactory {
 public:
  typedef ChatProjectIf Handler;

  virtual ~ChatProjectIfFactory() {}

  virtual ChatProjectIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ChatProjectIf* /* handler */) = 0;
};

class ChatProjectIfSingletonFactory : virtual public ChatProjectIfFactory {
 public:
  ChatProjectIfSingletonFactory(const boost::shared_ptr<ChatProjectIf>& iface) : iface_(iface) {}
  virtual ~ChatProjectIfSingletonFactory() {}

  virtual ChatProjectIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ChatProjectIf* /* handler */) {}

 protected:
  boost::shared_ptr<ChatProjectIf> iface_;
};

class ChatProjectNull : virtual public ChatProjectIf {
 public:
  virtual ~ChatProjectNull() {}
  void getAllChatRoom(std::vector<RoomItem> & /* _return */) {
    return;
  }
  void getListUserInRoom(std::vector<UserItem> & /* _return */, const std::string& /* roomId */) {
    return;
  }
  void getAllEmotionGroup(std::vector<GroupEmotion> & /* _return */) {
    return;
  }
  void getEmotionGroup(GroupEmotion& /* _return */, const std::string& /* emotionGroupId */) {
    return;
  }
  void addRoom(const RoomItem& /* newRoom */) {
    return;
  }
  void editRoom(const RoomItem& /* room */) {
    return;
  }
  void deleteRoom(const std::string& /* roomId */) {
    return;
  }
  void addEmotion(const std::string& /* emotionItem */) {
    return;
  }
  void editEmotion(const int64_t /* emotionId */, const EmotionItem& /* emotionItem */) {
    return;
  }
  void deleteEmotion(const int64_t /* emotionId */) {
    return;
  }
  void kickUser(const std::string& /* userId */) {
    return;
  }
  void getRoomStatisticByDate(RoomStatistic& /* _return */, const int32_t /* date */) {
    return;
  }
  void getEmotionStatisticByDate(EmotionStatistic& /* _return */, const int32_t /* date */) {
    return;
  }
  bool sendMessageInternal(const MsgItem& /* msgItem */, const bool /* messageOnline */) {
    bool _return = false;
    return _return;
  }
  void saveListMsgId(const std::vector<int64_t> & /* listMsgId */) {
    return;
  }
  void saveOfflineMsgNotify(const std::string& /* userId */) {
    return;
  }
  void getMessageList(std::vector<MsgItem> & /* _return */, const std::string& /* userId1 */, const std::string& /* userId2 */, const int32_t /* totalMsg */) {
    return;
  }
  void getMessageIdList(std::vector<int64_t> & /* _return */, const std::string& /* userId1 */, const std::string& /* userId2 */, const int32_t /* totalMsg */) {
    return;
  }
  void getMessageItem(MsgItem& /* _return */, const int64_t /* MsgId */) {
    return;
  }
  void saveRoomMsg(const MsgItem& /* msg */, const std::string& /* roomId */) {
    return;
  }
  void getRoomMsg(std::vector<MsgItem> & /* _return */, const std::string& /* roomId */) {
    return;
  }
  void getUserInRoom(std::vector<UserItem> & /* _return */, const std::string& /* roomId */) {
    return;
  }
  void getUserProfile(UserItem& /* _return */, const std::string& /* userId */) {
    return;
  }
  void getFriendList(std::vector<UserItem> & /* _return */, const std::string& /* userId */) {
    return;
  }
  int64_t getNewMsgId() {
    int64_t _return = 0;
    return _return;
  }
  void notifyUserOnline(const std::string& /* userId */) {
    return;
  }
  void notifyListUserOffline(const std::vector<std::string> & /* listUserIdOffline */) {
    return;
  }
  void checkFriendOnline(std::vector<bool> & /* _return */, const std::vector<std::string> & /* listFriendId */) {
    return;
  }
  void getFriendListZalo(std::string& /* _return */, const std::string& /* userId */, const std::string& /* oAuthCode */) {
    return;
  }
  void getProfileZalo(std::string& /* _return */, const std::string& /* userId */, const std::string& /* oAuthCode */) {
    return;
  }
  void loadAllEmotion(std::string& /* _return */) {
    return;
  }
  void checkOfflineMessage(std::vector<std::string> & /* _return */, const std::string& /* userId */) {
    return;
  }
};


class ChatProject_getAllChatRoom_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ChatProject_getAllChatRoom_args() {
  }

  virtual ~ChatProject_getAllChatRoom_args() throw() {}


  bool operator == (const ChatProject_getAllChatRoom_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChatProject_getAllChatRoom_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getAllChatRoom_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_getAllChatRoom_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ChatProject_getAllChatRoom_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getAllChatRoom_result__isset {
  _ChatProject_getAllChatRoom_result__isset() : success(false) {}
  bool success;
} _ChatProject_getAllChatRoom_result__isset;

class ChatProject_getAllChatRoom_result {
 public:

  static const char* ascii_fingerprint; // = "E5891B3D8E9BC5BAD30ABFAA783DB9A8";
  static const uint8_t binary_fingerprint[16]; // = {0xE5,0x89,0x1B,0x3D,0x8E,0x9B,0xC5,0xBA,0xD3,0x0A,0xBF,0xAA,0x78,0x3D,0xB9,0xA8};

  ChatProject_getAllChatRoom_result() {
  }

  virtual ~ChatProject_getAllChatRoom_result() throw() {}

  std::vector<RoomItem>  success;

  _ChatProject_getAllChatRoom_result__isset __isset;

  void __set_success(const std::vector<RoomItem> & val) {
    success = val;
  }

  bool operator == (const ChatProject_getAllChatRoom_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getAllChatRoom_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getAllChatRoom_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getAllChatRoom_presult__isset {
  _ChatProject_getAllChatRoom_presult__isset() : success(false) {}
  bool success;
} _ChatProject_getAllChatRoom_presult__isset;

class ChatProject_getAllChatRoom_presult {
 public:

  static const char* ascii_fingerprint; // = "E5891B3D8E9BC5BAD30ABFAA783DB9A8";
  static const uint8_t binary_fingerprint[16]; // = {0xE5,0x89,0x1B,0x3D,0x8E,0x9B,0xC5,0xBA,0xD3,0x0A,0xBF,0xAA,0x78,0x3D,0xB9,0xA8};


  virtual ~ChatProject_getAllChatRoom_presult() throw() {}

  std::vector<RoomItem> * success;

  _ChatProject_getAllChatRoom_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_getListUserInRoom_args__isset {
  _ChatProject_getListUserInRoom_args__isset() : roomId(false) {}
  bool roomId;
} _ChatProject_getListUserInRoom_args__isset;

class ChatProject_getListUserInRoom_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ChatProject_getListUserInRoom_args() : roomId() {
  }

  virtual ~ChatProject_getListUserInRoom_args() throw() {}

  std::string roomId;

  _ChatProject_getListUserInRoom_args__isset __isset;

  void __set_roomId(const std::string& val) {
    roomId = val;
  }

  bool operator == (const ChatProject_getListUserInRoom_args & rhs) const
  {
    if (!(roomId == rhs.roomId))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getListUserInRoom_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getListUserInRoom_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_getListUserInRoom_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ChatProject_getListUserInRoom_pargs() throw() {}

  const std::string* roomId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getListUserInRoom_result__isset {
  _ChatProject_getListUserInRoom_result__isset() : success(false) {}
  bool success;
} _ChatProject_getListUserInRoom_result__isset;

class ChatProject_getListUserInRoom_result {
 public:

  static const char* ascii_fingerprint; // = "34FA387B625892E375D06B5E8AC97179";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0xFA,0x38,0x7B,0x62,0x58,0x92,0xE3,0x75,0xD0,0x6B,0x5E,0x8A,0xC9,0x71,0x79};

  ChatProject_getListUserInRoom_result() {
  }

  virtual ~ChatProject_getListUserInRoom_result() throw() {}

  std::vector<UserItem>  success;

  _ChatProject_getListUserInRoom_result__isset __isset;

  void __set_success(const std::vector<UserItem> & val) {
    success = val;
  }

  bool operator == (const ChatProject_getListUserInRoom_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getListUserInRoom_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getListUserInRoom_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getListUserInRoom_presult__isset {
  _ChatProject_getListUserInRoom_presult__isset() : success(false) {}
  bool success;
} _ChatProject_getListUserInRoom_presult__isset;

class ChatProject_getListUserInRoom_presult {
 public:

  static const char* ascii_fingerprint; // = "34FA387B625892E375D06B5E8AC97179";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0xFA,0x38,0x7B,0x62,0x58,0x92,0xE3,0x75,0xD0,0x6B,0x5E,0x8A,0xC9,0x71,0x79};


  virtual ~ChatProject_getListUserInRoom_presult() throw() {}

  std::vector<UserItem> * success;

  _ChatProject_getListUserInRoom_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChatProject_getAllEmotionGroup_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ChatProject_getAllEmotionGroup_args() {
  }

  virtual ~ChatProject_getAllEmotionGroup_args() throw() {}


  bool operator == (const ChatProject_getAllEmotionGroup_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChatProject_getAllEmotionGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getAllEmotionGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_getAllEmotionGroup_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ChatProject_getAllEmotionGroup_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getAllEmotionGroup_result__isset {
  _ChatProject_getAllEmotionGroup_result__isset() : success(false) {}
  bool success;
} _ChatProject_getAllEmotionGroup_result__isset;

class ChatProject_getAllEmotionGroup_result {
 public:

  static const char* ascii_fingerprint; // = "CF13616D5BA34E9A1993DD57927CF96C";
  static const uint8_t binary_fingerprint[16]; // = {0xCF,0x13,0x61,0x6D,0x5B,0xA3,0x4E,0x9A,0x19,0x93,0xDD,0x57,0x92,0x7C,0xF9,0x6C};

  ChatProject_getAllEmotionGroup_result() {
  }

  virtual ~ChatProject_getAllEmotionGroup_result() throw() {}

  std::vector<GroupEmotion>  success;

  _ChatProject_getAllEmotionGroup_result__isset __isset;

  void __set_success(const std::vector<GroupEmotion> & val) {
    success = val;
  }

  bool operator == (const ChatProject_getAllEmotionGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getAllEmotionGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getAllEmotionGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getAllEmotionGroup_presult__isset {
  _ChatProject_getAllEmotionGroup_presult__isset() : success(false) {}
  bool success;
} _ChatProject_getAllEmotionGroup_presult__isset;

class ChatProject_getAllEmotionGroup_presult {
 public:

  static const char* ascii_fingerprint; // = "CF13616D5BA34E9A1993DD57927CF96C";
  static const uint8_t binary_fingerprint[16]; // = {0xCF,0x13,0x61,0x6D,0x5B,0xA3,0x4E,0x9A,0x19,0x93,0xDD,0x57,0x92,0x7C,0xF9,0x6C};


  virtual ~ChatProject_getAllEmotionGroup_presult() throw() {}

  std::vector<GroupEmotion> * success;

  _ChatProject_getAllEmotionGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_getEmotionGroup_args__isset {
  _ChatProject_getEmotionGroup_args__isset() : emotionGroupId(false) {}
  bool emotionGroupId;
} _ChatProject_getEmotionGroup_args__isset;

class ChatProject_getEmotionGroup_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ChatProject_getEmotionGroup_args() : emotionGroupId() {
  }

  virtual ~ChatProject_getEmotionGroup_args() throw() {}

  std::string emotionGroupId;

  _ChatProject_getEmotionGroup_args__isset __isset;

  void __set_emotionGroupId(const std::string& val) {
    emotionGroupId = val;
  }

  bool operator == (const ChatProject_getEmotionGroup_args & rhs) const
  {
    if (!(emotionGroupId == rhs.emotionGroupId))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getEmotionGroup_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getEmotionGroup_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_getEmotionGroup_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ChatProject_getEmotionGroup_pargs() throw() {}

  const std::string* emotionGroupId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getEmotionGroup_result__isset {
  _ChatProject_getEmotionGroup_result__isset() : success(false) {}
  bool success;
} _ChatProject_getEmotionGroup_result__isset;

class ChatProject_getEmotionGroup_result {
 public:

  static const char* ascii_fingerprint; // = "1092C4B18F7DBE4FEB91F2BBB1540C15";
  static const uint8_t binary_fingerprint[16]; // = {0x10,0x92,0xC4,0xB1,0x8F,0x7D,0xBE,0x4F,0xEB,0x91,0xF2,0xBB,0xB1,0x54,0x0C,0x15};

  ChatProject_getEmotionGroup_result() {
  }

  virtual ~ChatProject_getEmotionGroup_result() throw() {}

  GroupEmotion success;

  _ChatProject_getEmotionGroup_result__isset __isset;

  void __set_success(const GroupEmotion& val) {
    success = val;
  }

  bool operator == (const ChatProject_getEmotionGroup_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getEmotionGroup_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getEmotionGroup_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getEmotionGroup_presult__isset {
  _ChatProject_getEmotionGroup_presult__isset() : success(false) {}
  bool success;
} _ChatProject_getEmotionGroup_presult__isset;

class ChatProject_getEmotionGroup_presult {
 public:

  static const char* ascii_fingerprint; // = "1092C4B18F7DBE4FEB91F2BBB1540C15";
  static const uint8_t binary_fingerprint[16]; // = {0x10,0x92,0xC4,0xB1,0x8F,0x7D,0xBE,0x4F,0xEB,0x91,0xF2,0xBB,0xB1,0x54,0x0C,0x15};


  virtual ~ChatProject_getEmotionGroup_presult() throw() {}

  GroupEmotion* success;

  _ChatProject_getEmotionGroup_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_addRoom_args__isset {
  _ChatProject_addRoom_args__isset() : newRoom(false) {}
  bool newRoom;
} _ChatProject_addRoom_args__isset;

class ChatProject_addRoom_args {
 public:

  static const char* ascii_fingerprint; // = "DAE19EB956C3E31795F660D40CAFD28E";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0xE1,0x9E,0xB9,0x56,0xC3,0xE3,0x17,0x95,0xF6,0x60,0xD4,0x0C,0xAF,0xD2,0x8E};

  ChatProject_addRoom_args() {
  }

  virtual ~ChatProject_addRoom_args() throw() {}

  RoomItem newRoom;

  _ChatProject_addRoom_args__isset __isset;

  void __set_newRoom(const RoomItem& val) {
    newRoom = val;
  }

  bool operator == (const ChatProject_addRoom_args & rhs) const
  {
    if (!(newRoom == rhs.newRoom))
      return false;
    return true;
  }
  bool operator != (const ChatProject_addRoom_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_addRoom_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_addRoom_pargs {
 public:

  static const char* ascii_fingerprint; // = "DAE19EB956C3E31795F660D40CAFD28E";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0xE1,0x9E,0xB9,0x56,0xC3,0xE3,0x17,0x95,0xF6,0x60,0xD4,0x0C,0xAF,0xD2,0x8E};


  virtual ~ChatProject_addRoom_pargs() throw() {}

  const RoomItem* newRoom;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_addRoom_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ChatProject_addRoom_result() {
  }

  virtual ~ChatProject_addRoom_result() throw() {}


  bool operator == (const ChatProject_addRoom_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChatProject_addRoom_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_addRoom_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_addRoom_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ChatProject_addRoom_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_editRoom_args__isset {
  _ChatProject_editRoom_args__isset() : room(false) {}
  bool room;
} _ChatProject_editRoom_args__isset;

class ChatProject_editRoom_args {
 public:

  static const char* ascii_fingerprint; // = "DAE19EB956C3E31795F660D40CAFD28E";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0xE1,0x9E,0xB9,0x56,0xC3,0xE3,0x17,0x95,0xF6,0x60,0xD4,0x0C,0xAF,0xD2,0x8E};

  ChatProject_editRoom_args() {
  }

  virtual ~ChatProject_editRoom_args() throw() {}

  RoomItem room;

  _ChatProject_editRoom_args__isset __isset;

  void __set_room(const RoomItem& val) {
    room = val;
  }

  bool operator == (const ChatProject_editRoom_args & rhs) const
  {
    if (!(room == rhs.room))
      return false;
    return true;
  }
  bool operator != (const ChatProject_editRoom_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_editRoom_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_editRoom_pargs {
 public:

  static const char* ascii_fingerprint; // = "DAE19EB956C3E31795F660D40CAFD28E";
  static const uint8_t binary_fingerprint[16]; // = {0xDA,0xE1,0x9E,0xB9,0x56,0xC3,0xE3,0x17,0x95,0xF6,0x60,0xD4,0x0C,0xAF,0xD2,0x8E};


  virtual ~ChatProject_editRoom_pargs() throw() {}

  const RoomItem* room;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_editRoom_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ChatProject_editRoom_result() {
  }

  virtual ~ChatProject_editRoom_result() throw() {}


  bool operator == (const ChatProject_editRoom_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChatProject_editRoom_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_editRoom_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_editRoom_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ChatProject_editRoom_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_deleteRoom_args__isset {
  _ChatProject_deleteRoom_args__isset() : roomId(false) {}
  bool roomId;
} _ChatProject_deleteRoom_args__isset;

class ChatProject_deleteRoom_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ChatProject_deleteRoom_args() : roomId() {
  }

  virtual ~ChatProject_deleteRoom_args() throw() {}

  std::string roomId;

  _ChatProject_deleteRoom_args__isset __isset;

  void __set_roomId(const std::string& val) {
    roomId = val;
  }

  bool operator == (const ChatProject_deleteRoom_args & rhs) const
  {
    if (!(roomId == rhs.roomId))
      return false;
    return true;
  }
  bool operator != (const ChatProject_deleteRoom_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_deleteRoom_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_deleteRoom_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ChatProject_deleteRoom_pargs() throw() {}

  const std::string* roomId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_deleteRoom_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ChatProject_deleteRoom_result() {
  }

  virtual ~ChatProject_deleteRoom_result() throw() {}


  bool operator == (const ChatProject_deleteRoom_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChatProject_deleteRoom_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_deleteRoom_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_deleteRoom_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ChatProject_deleteRoom_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_addEmotion_args__isset {
  _ChatProject_addEmotion_args__isset() : emotionItem(false) {}
  bool emotionItem;
} _ChatProject_addEmotion_args__isset;

class ChatProject_addEmotion_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ChatProject_addEmotion_args() : emotionItem() {
  }

  virtual ~ChatProject_addEmotion_args() throw() {}

  std::string emotionItem;

  _ChatProject_addEmotion_args__isset __isset;

  void __set_emotionItem(const std::string& val) {
    emotionItem = val;
  }

  bool operator == (const ChatProject_addEmotion_args & rhs) const
  {
    if (!(emotionItem == rhs.emotionItem))
      return false;
    return true;
  }
  bool operator != (const ChatProject_addEmotion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_addEmotion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_addEmotion_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ChatProject_addEmotion_pargs() throw() {}

  const std::string* emotionItem;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_addEmotion_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ChatProject_addEmotion_result() {
  }

  virtual ~ChatProject_addEmotion_result() throw() {}


  bool operator == (const ChatProject_addEmotion_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChatProject_addEmotion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_addEmotion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_addEmotion_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ChatProject_addEmotion_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_editEmotion_args__isset {
  _ChatProject_editEmotion_args__isset() : emotionId(false), emotionItem(false) {}
  bool emotionId;
  bool emotionItem;
} _ChatProject_editEmotion_args__isset;

class ChatProject_editEmotion_args {
 public:

  static const char* ascii_fingerprint; // = "34ED8FC19D82A46D9D988666F08B6008";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0xED,0x8F,0xC1,0x9D,0x82,0xA4,0x6D,0x9D,0x98,0x86,0x66,0xF0,0x8B,0x60,0x08};

  ChatProject_editEmotion_args() : emotionId(0) {
  }

  virtual ~ChatProject_editEmotion_args() throw() {}

  int64_t emotionId;
  EmotionItem emotionItem;

  _ChatProject_editEmotion_args__isset __isset;

  void __set_emotionId(const int64_t val) {
    emotionId = val;
  }

  void __set_emotionItem(const EmotionItem& val) {
    emotionItem = val;
  }

  bool operator == (const ChatProject_editEmotion_args & rhs) const
  {
    if (!(emotionId == rhs.emotionId))
      return false;
    if (!(emotionItem == rhs.emotionItem))
      return false;
    return true;
  }
  bool operator != (const ChatProject_editEmotion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_editEmotion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_editEmotion_pargs {
 public:

  static const char* ascii_fingerprint; // = "34ED8FC19D82A46D9D988666F08B6008";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0xED,0x8F,0xC1,0x9D,0x82,0xA4,0x6D,0x9D,0x98,0x86,0x66,0xF0,0x8B,0x60,0x08};


  virtual ~ChatProject_editEmotion_pargs() throw() {}

  const int64_t* emotionId;
  const EmotionItem* emotionItem;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_editEmotion_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ChatProject_editEmotion_result() {
  }

  virtual ~ChatProject_editEmotion_result() throw() {}


  bool operator == (const ChatProject_editEmotion_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChatProject_editEmotion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_editEmotion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_editEmotion_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ChatProject_editEmotion_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_deleteEmotion_args__isset {
  _ChatProject_deleteEmotion_args__isset() : emotionId(false) {}
  bool emotionId;
} _ChatProject_deleteEmotion_args__isset;

class ChatProject_deleteEmotion_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  ChatProject_deleteEmotion_args() : emotionId(0) {
  }

  virtual ~ChatProject_deleteEmotion_args() throw() {}

  int64_t emotionId;

  _ChatProject_deleteEmotion_args__isset __isset;

  void __set_emotionId(const int64_t val) {
    emotionId = val;
  }

  bool operator == (const ChatProject_deleteEmotion_args & rhs) const
  {
    if (!(emotionId == rhs.emotionId))
      return false;
    return true;
  }
  bool operator != (const ChatProject_deleteEmotion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_deleteEmotion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_deleteEmotion_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~ChatProject_deleteEmotion_pargs() throw() {}

  const int64_t* emotionId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_deleteEmotion_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ChatProject_deleteEmotion_result() {
  }

  virtual ~ChatProject_deleteEmotion_result() throw() {}


  bool operator == (const ChatProject_deleteEmotion_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChatProject_deleteEmotion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_deleteEmotion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_deleteEmotion_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ChatProject_deleteEmotion_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_kickUser_args__isset {
  _ChatProject_kickUser_args__isset() : userId(false) {}
  bool userId;
} _ChatProject_kickUser_args__isset;

class ChatProject_kickUser_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ChatProject_kickUser_args() : userId() {
  }

  virtual ~ChatProject_kickUser_args() throw() {}

  std::string userId;

  _ChatProject_kickUser_args__isset __isset;

  void __set_userId(const std::string& val) {
    userId = val;
  }

  bool operator == (const ChatProject_kickUser_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const ChatProject_kickUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_kickUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_kickUser_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ChatProject_kickUser_pargs() throw() {}

  const std::string* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_kickUser_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ChatProject_kickUser_result() {
  }

  virtual ~ChatProject_kickUser_result() throw() {}


  bool operator == (const ChatProject_kickUser_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChatProject_kickUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_kickUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_kickUser_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ChatProject_kickUser_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_getRoomStatisticByDate_args__isset {
  _ChatProject_getRoomStatisticByDate_args__isset() : date(false) {}
  bool date;
} _ChatProject_getRoomStatisticByDate_args__isset;

class ChatProject_getRoomStatisticByDate_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  ChatProject_getRoomStatisticByDate_args() : date(0) {
  }

  virtual ~ChatProject_getRoomStatisticByDate_args() throw() {}

  int32_t date;

  _ChatProject_getRoomStatisticByDate_args__isset __isset;

  void __set_date(const int32_t val) {
    date = val;
  }

  bool operator == (const ChatProject_getRoomStatisticByDate_args & rhs) const
  {
    if (!(date == rhs.date))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getRoomStatisticByDate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getRoomStatisticByDate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_getRoomStatisticByDate_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~ChatProject_getRoomStatisticByDate_pargs() throw() {}

  const int32_t* date;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getRoomStatisticByDate_result__isset {
  _ChatProject_getRoomStatisticByDate_result__isset() : success(false) {}
  bool success;
} _ChatProject_getRoomStatisticByDate_result__isset;

class ChatProject_getRoomStatisticByDate_result {
 public:

  static const char* ascii_fingerprint; // = "6E50D756A375C5A6E0FDE108705C1FB8";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x50,0xD7,0x56,0xA3,0x75,0xC5,0xA6,0xE0,0xFD,0xE1,0x08,0x70,0x5C,0x1F,0xB8};

  ChatProject_getRoomStatisticByDate_result() {
  }

  virtual ~ChatProject_getRoomStatisticByDate_result() throw() {}

  RoomStatistic success;

  _ChatProject_getRoomStatisticByDate_result__isset __isset;

  void __set_success(const RoomStatistic& val) {
    success = val;
  }

  bool operator == (const ChatProject_getRoomStatisticByDate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getRoomStatisticByDate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getRoomStatisticByDate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getRoomStatisticByDate_presult__isset {
  _ChatProject_getRoomStatisticByDate_presult__isset() : success(false) {}
  bool success;
} _ChatProject_getRoomStatisticByDate_presult__isset;

class ChatProject_getRoomStatisticByDate_presult {
 public:

  static const char* ascii_fingerprint; // = "6E50D756A375C5A6E0FDE108705C1FB8";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x50,0xD7,0x56,0xA3,0x75,0xC5,0xA6,0xE0,0xFD,0xE1,0x08,0x70,0x5C,0x1F,0xB8};


  virtual ~ChatProject_getRoomStatisticByDate_presult() throw() {}

  RoomStatistic* success;

  _ChatProject_getRoomStatisticByDate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_getEmotionStatisticByDate_args__isset {
  _ChatProject_getEmotionStatisticByDate_args__isset() : date(false) {}
  bool date;
} _ChatProject_getEmotionStatisticByDate_args__isset;

class ChatProject_getEmotionStatisticByDate_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  ChatProject_getEmotionStatisticByDate_args() : date(0) {
  }

  virtual ~ChatProject_getEmotionStatisticByDate_args() throw() {}

  int32_t date;

  _ChatProject_getEmotionStatisticByDate_args__isset __isset;

  void __set_date(const int32_t val) {
    date = val;
  }

  bool operator == (const ChatProject_getEmotionStatisticByDate_args & rhs) const
  {
    if (!(date == rhs.date))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getEmotionStatisticByDate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getEmotionStatisticByDate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_getEmotionStatisticByDate_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~ChatProject_getEmotionStatisticByDate_pargs() throw() {}

  const int32_t* date;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getEmotionStatisticByDate_result__isset {
  _ChatProject_getEmotionStatisticByDate_result__isset() : success(false) {}
  bool success;
} _ChatProject_getEmotionStatisticByDate_result__isset;

class ChatProject_getEmotionStatisticByDate_result {
 public:

  static const char* ascii_fingerprint; // = "6E50D756A375C5A6E0FDE108705C1FB8";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x50,0xD7,0x56,0xA3,0x75,0xC5,0xA6,0xE0,0xFD,0xE1,0x08,0x70,0x5C,0x1F,0xB8};

  ChatProject_getEmotionStatisticByDate_result() {
  }

  virtual ~ChatProject_getEmotionStatisticByDate_result() throw() {}

  EmotionStatistic success;

  _ChatProject_getEmotionStatisticByDate_result__isset __isset;

  void __set_success(const EmotionStatistic& val) {
    success = val;
  }

  bool operator == (const ChatProject_getEmotionStatisticByDate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getEmotionStatisticByDate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getEmotionStatisticByDate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getEmotionStatisticByDate_presult__isset {
  _ChatProject_getEmotionStatisticByDate_presult__isset() : success(false) {}
  bool success;
} _ChatProject_getEmotionStatisticByDate_presult__isset;

class ChatProject_getEmotionStatisticByDate_presult {
 public:

  static const char* ascii_fingerprint; // = "6E50D756A375C5A6E0FDE108705C1FB8";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x50,0xD7,0x56,0xA3,0x75,0xC5,0xA6,0xE0,0xFD,0xE1,0x08,0x70,0x5C,0x1F,0xB8};


  virtual ~ChatProject_getEmotionStatisticByDate_presult() throw() {}

  EmotionStatistic* success;

  _ChatProject_getEmotionStatisticByDate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_sendMessageInternal_args__isset {
  _ChatProject_sendMessageInternal_args__isset() : msgItem(false), messageOnline(false) {}
  bool msgItem;
  bool messageOnline;
} _ChatProject_sendMessageInternal_args__isset;

class ChatProject_sendMessageInternal_args {
 public:

  static const char* ascii_fingerprint; // = "2005BF4E86E2E8820E2763599E6F73F9";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0x05,0xBF,0x4E,0x86,0xE2,0xE8,0x82,0x0E,0x27,0x63,0x59,0x9E,0x6F,0x73,0xF9};

  ChatProject_sendMessageInternal_args() : messageOnline(0) {
  }

  virtual ~ChatProject_sendMessageInternal_args() throw() {}

  MsgItem msgItem;
  bool messageOnline;

  _ChatProject_sendMessageInternal_args__isset __isset;

  void __set_msgItem(const MsgItem& val) {
    msgItem = val;
  }

  void __set_messageOnline(const bool val) {
    messageOnline = val;
  }

  bool operator == (const ChatProject_sendMessageInternal_args & rhs) const
  {
    if (!(msgItem == rhs.msgItem))
      return false;
    if (!(messageOnline == rhs.messageOnline))
      return false;
    return true;
  }
  bool operator != (const ChatProject_sendMessageInternal_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_sendMessageInternal_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_sendMessageInternal_pargs {
 public:

  static const char* ascii_fingerprint; // = "2005BF4E86E2E8820E2763599E6F73F9";
  static const uint8_t binary_fingerprint[16]; // = {0x20,0x05,0xBF,0x4E,0x86,0xE2,0xE8,0x82,0x0E,0x27,0x63,0x59,0x9E,0x6F,0x73,0xF9};


  virtual ~ChatProject_sendMessageInternal_pargs() throw() {}

  const MsgItem* msgItem;
  const bool* messageOnline;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_sendMessageInternal_result__isset {
  _ChatProject_sendMessageInternal_result__isset() : success(false) {}
  bool success;
} _ChatProject_sendMessageInternal_result__isset;

class ChatProject_sendMessageInternal_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  ChatProject_sendMessageInternal_result() : success(0) {
  }

  virtual ~ChatProject_sendMessageInternal_result() throw() {}

  bool success;

  _ChatProject_sendMessageInternal_result__isset __isset;

  void __set_success(const bool val) {
    success = val;
  }

  bool operator == (const ChatProject_sendMessageInternal_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_sendMessageInternal_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_sendMessageInternal_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_sendMessageInternal_presult__isset {
  _ChatProject_sendMessageInternal_presult__isset() : success(false) {}
  bool success;
} _ChatProject_sendMessageInternal_presult__isset;

class ChatProject_sendMessageInternal_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~ChatProject_sendMessageInternal_presult() throw() {}

  bool* success;

  _ChatProject_sendMessageInternal_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_saveListMsgId_args__isset {
  _ChatProject_saveListMsgId_args__isset() : listMsgId(false) {}
  bool listMsgId;
} _ChatProject_saveListMsgId_args__isset;

class ChatProject_saveListMsgId_args {
 public:

  static const char* ascii_fingerprint; // = "E49D7D1A9013CC81CD0F69D631EF82E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE4,0x9D,0x7D,0x1A,0x90,0x13,0xCC,0x81,0xCD,0x0F,0x69,0xD6,0x31,0xEF,0x82,0xE4};

  ChatProject_saveListMsgId_args() {
  }

  virtual ~ChatProject_saveListMsgId_args() throw() {}

  std::vector<int64_t>  listMsgId;

  _ChatProject_saveListMsgId_args__isset __isset;

  void __set_listMsgId(const std::vector<int64_t> & val) {
    listMsgId = val;
  }

  bool operator == (const ChatProject_saveListMsgId_args & rhs) const
  {
    if (!(listMsgId == rhs.listMsgId))
      return false;
    return true;
  }
  bool operator != (const ChatProject_saveListMsgId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_saveListMsgId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_saveListMsgId_pargs {
 public:

  static const char* ascii_fingerprint; // = "E49D7D1A9013CC81CD0F69D631EF82E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE4,0x9D,0x7D,0x1A,0x90,0x13,0xCC,0x81,0xCD,0x0F,0x69,0xD6,0x31,0xEF,0x82,0xE4};


  virtual ~ChatProject_saveListMsgId_pargs() throw() {}

  const std::vector<int64_t> * listMsgId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_saveListMsgId_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ChatProject_saveListMsgId_result() {
  }

  virtual ~ChatProject_saveListMsgId_result() throw() {}


  bool operator == (const ChatProject_saveListMsgId_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChatProject_saveListMsgId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_saveListMsgId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_saveListMsgId_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ChatProject_saveListMsgId_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_saveOfflineMsgNotify_args__isset {
  _ChatProject_saveOfflineMsgNotify_args__isset() : userId(false) {}
  bool userId;
} _ChatProject_saveOfflineMsgNotify_args__isset;

class ChatProject_saveOfflineMsgNotify_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ChatProject_saveOfflineMsgNotify_args() : userId() {
  }

  virtual ~ChatProject_saveOfflineMsgNotify_args() throw() {}

  std::string userId;

  _ChatProject_saveOfflineMsgNotify_args__isset __isset;

  void __set_userId(const std::string& val) {
    userId = val;
  }

  bool operator == (const ChatProject_saveOfflineMsgNotify_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const ChatProject_saveOfflineMsgNotify_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_saveOfflineMsgNotify_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_saveOfflineMsgNotify_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ChatProject_saveOfflineMsgNotify_pargs() throw() {}

  const std::string* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_saveOfflineMsgNotify_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ChatProject_saveOfflineMsgNotify_result() {
  }

  virtual ~ChatProject_saveOfflineMsgNotify_result() throw() {}


  bool operator == (const ChatProject_saveOfflineMsgNotify_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChatProject_saveOfflineMsgNotify_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_saveOfflineMsgNotify_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_saveOfflineMsgNotify_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ChatProject_saveOfflineMsgNotify_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_getMessageList_args__isset {
  _ChatProject_getMessageList_args__isset() : userId1(false), userId2(false), totalMsg(false) {}
  bool userId1;
  bool userId2;
  bool totalMsg;
} _ChatProject_getMessageList_args__isset;

class ChatProject_getMessageList_args {
 public:

  static const char* ascii_fingerprint; // = "343DA57F446177400B333DC49B037B0C";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x3D,0xA5,0x7F,0x44,0x61,0x77,0x40,0x0B,0x33,0x3D,0xC4,0x9B,0x03,0x7B,0x0C};

  ChatProject_getMessageList_args() : userId1(), userId2(), totalMsg(0) {
  }

  virtual ~ChatProject_getMessageList_args() throw() {}

  std::string userId1;
  std::string userId2;
  int32_t totalMsg;

  _ChatProject_getMessageList_args__isset __isset;

  void __set_userId1(const std::string& val) {
    userId1 = val;
  }

  void __set_userId2(const std::string& val) {
    userId2 = val;
  }

  void __set_totalMsg(const int32_t val) {
    totalMsg = val;
  }

  bool operator == (const ChatProject_getMessageList_args & rhs) const
  {
    if (!(userId1 == rhs.userId1))
      return false;
    if (!(userId2 == rhs.userId2))
      return false;
    if (!(totalMsg == rhs.totalMsg))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getMessageList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getMessageList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_getMessageList_pargs {
 public:

  static const char* ascii_fingerprint; // = "343DA57F446177400B333DC49B037B0C";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x3D,0xA5,0x7F,0x44,0x61,0x77,0x40,0x0B,0x33,0x3D,0xC4,0x9B,0x03,0x7B,0x0C};


  virtual ~ChatProject_getMessageList_pargs() throw() {}

  const std::string* userId1;
  const std::string* userId2;
  const int32_t* totalMsg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getMessageList_result__isset {
  _ChatProject_getMessageList_result__isset() : success(false) {}
  bool success;
} _ChatProject_getMessageList_result__isset;

class ChatProject_getMessageList_result {
 public:

  static const char* ascii_fingerprint; // = "9BE6BF9A807D9934CC646FE69461A91D";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xE6,0xBF,0x9A,0x80,0x7D,0x99,0x34,0xCC,0x64,0x6F,0xE6,0x94,0x61,0xA9,0x1D};

  ChatProject_getMessageList_result() {
  }

  virtual ~ChatProject_getMessageList_result() throw() {}

  std::vector<MsgItem>  success;

  _ChatProject_getMessageList_result__isset __isset;

  void __set_success(const std::vector<MsgItem> & val) {
    success = val;
  }

  bool operator == (const ChatProject_getMessageList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getMessageList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getMessageList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getMessageList_presult__isset {
  _ChatProject_getMessageList_presult__isset() : success(false) {}
  bool success;
} _ChatProject_getMessageList_presult__isset;

class ChatProject_getMessageList_presult {
 public:

  static const char* ascii_fingerprint; // = "9BE6BF9A807D9934CC646FE69461A91D";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xE6,0xBF,0x9A,0x80,0x7D,0x99,0x34,0xCC,0x64,0x6F,0xE6,0x94,0x61,0xA9,0x1D};


  virtual ~ChatProject_getMessageList_presult() throw() {}

  std::vector<MsgItem> * success;

  _ChatProject_getMessageList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_getMessageIdList_args__isset {
  _ChatProject_getMessageIdList_args__isset() : userId1(false), userId2(false), totalMsg(false) {}
  bool userId1;
  bool userId2;
  bool totalMsg;
} _ChatProject_getMessageIdList_args__isset;

class ChatProject_getMessageIdList_args {
 public:

  static const char* ascii_fingerprint; // = "343DA57F446177400B333DC49B037B0C";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x3D,0xA5,0x7F,0x44,0x61,0x77,0x40,0x0B,0x33,0x3D,0xC4,0x9B,0x03,0x7B,0x0C};

  ChatProject_getMessageIdList_args() : userId1(), userId2(), totalMsg(0) {
  }

  virtual ~ChatProject_getMessageIdList_args() throw() {}

  std::string userId1;
  std::string userId2;
  int32_t totalMsg;

  _ChatProject_getMessageIdList_args__isset __isset;

  void __set_userId1(const std::string& val) {
    userId1 = val;
  }

  void __set_userId2(const std::string& val) {
    userId2 = val;
  }

  void __set_totalMsg(const int32_t val) {
    totalMsg = val;
  }

  bool operator == (const ChatProject_getMessageIdList_args & rhs) const
  {
    if (!(userId1 == rhs.userId1))
      return false;
    if (!(userId2 == rhs.userId2))
      return false;
    if (!(totalMsg == rhs.totalMsg))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getMessageIdList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getMessageIdList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_getMessageIdList_pargs {
 public:

  static const char* ascii_fingerprint; // = "343DA57F446177400B333DC49B037B0C";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0x3D,0xA5,0x7F,0x44,0x61,0x77,0x40,0x0B,0x33,0x3D,0xC4,0x9B,0x03,0x7B,0x0C};


  virtual ~ChatProject_getMessageIdList_pargs() throw() {}

  const std::string* userId1;
  const std::string* userId2;
  const int32_t* totalMsg;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getMessageIdList_result__isset {
  _ChatProject_getMessageIdList_result__isset() : success(false) {}
  bool success;
} _ChatProject_getMessageIdList_result__isset;

class ChatProject_getMessageIdList_result {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};

  ChatProject_getMessageIdList_result() {
  }

  virtual ~ChatProject_getMessageIdList_result() throw() {}

  std::vector<int64_t>  success;

  _ChatProject_getMessageIdList_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val) {
    success = val;
  }

  bool operator == (const ChatProject_getMessageIdList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getMessageIdList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getMessageIdList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getMessageIdList_presult__isset {
  _ChatProject_getMessageIdList_presult__isset() : success(false) {}
  bool success;
} _ChatProject_getMessageIdList_presult__isset;

class ChatProject_getMessageIdList_presult {
 public:

  static const char* ascii_fingerprint; // = "EA9202126E2AA9C4AC36CC8333D8BE7B";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x92,0x02,0x12,0x6E,0x2A,0xA9,0xC4,0xAC,0x36,0xCC,0x83,0x33,0xD8,0xBE,0x7B};


  virtual ~ChatProject_getMessageIdList_presult() throw() {}

  std::vector<int64_t> * success;

  _ChatProject_getMessageIdList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_getMessageItem_args__isset {
  _ChatProject_getMessageItem_args__isset() : MsgId(false) {}
  bool MsgId;
} _ChatProject_getMessageItem_args__isset;

class ChatProject_getMessageItem_args {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};

  ChatProject_getMessageItem_args() : MsgId(0) {
  }

  virtual ~ChatProject_getMessageItem_args() throw() {}

  int64_t MsgId;

  _ChatProject_getMessageItem_args__isset __isset;

  void __set_MsgId(const int64_t val) {
    MsgId = val;
  }

  bool operator == (const ChatProject_getMessageItem_args & rhs) const
  {
    if (!(MsgId == rhs.MsgId))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getMessageItem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getMessageItem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_getMessageItem_pargs {
 public:

  static const char* ascii_fingerprint; // = "56A59CE7FFAF82BCA8A19FAACDE4FB75";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0xA5,0x9C,0xE7,0xFF,0xAF,0x82,0xBC,0xA8,0xA1,0x9F,0xAA,0xCD,0xE4,0xFB,0x75};


  virtual ~ChatProject_getMessageItem_pargs() throw() {}

  const int64_t* MsgId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getMessageItem_result__isset {
  _ChatProject_getMessageItem_result__isset() : success(false) {}
  bool success;
} _ChatProject_getMessageItem_result__isset;

class ChatProject_getMessageItem_result {
 public:

  static const char* ascii_fingerprint; // = "B2BB911586B2A964BC0F55C34ABCCAC9";
  static const uint8_t binary_fingerprint[16]; // = {0xB2,0xBB,0x91,0x15,0x86,0xB2,0xA9,0x64,0xBC,0x0F,0x55,0xC3,0x4A,0xBC,0xCA,0xC9};

  ChatProject_getMessageItem_result() {
  }

  virtual ~ChatProject_getMessageItem_result() throw() {}

  MsgItem success;

  _ChatProject_getMessageItem_result__isset __isset;

  void __set_success(const MsgItem& val) {
    success = val;
  }

  bool operator == (const ChatProject_getMessageItem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getMessageItem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getMessageItem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getMessageItem_presult__isset {
  _ChatProject_getMessageItem_presult__isset() : success(false) {}
  bool success;
} _ChatProject_getMessageItem_presult__isset;

class ChatProject_getMessageItem_presult {
 public:

  static const char* ascii_fingerprint; // = "B2BB911586B2A964BC0F55C34ABCCAC9";
  static const uint8_t binary_fingerprint[16]; // = {0xB2,0xBB,0x91,0x15,0x86,0xB2,0xA9,0x64,0xBC,0x0F,0x55,0xC3,0x4A,0xBC,0xCA,0xC9};


  virtual ~ChatProject_getMessageItem_presult() throw() {}

  MsgItem* success;

  _ChatProject_getMessageItem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_saveRoomMsg_args__isset {
  _ChatProject_saveRoomMsg_args__isset() : msg(false), roomId(false) {}
  bool msg;
  bool roomId;
} _ChatProject_saveRoomMsg_args__isset;

class ChatProject_saveRoomMsg_args {
 public:

  static const char* ascii_fingerprint; // = "6CA919E410DDB60DED9F76EE14EBBA8C";
  static const uint8_t binary_fingerprint[16]; // = {0x6C,0xA9,0x19,0xE4,0x10,0xDD,0xB6,0x0D,0xED,0x9F,0x76,0xEE,0x14,0xEB,0xBA,0x8C};

  ChatProject_saveRoomMsg_args() : roomId() {
  }

  virtual ~ChatProject_saveRoomMsg_args() throw() {}

  MsgItem msg;
  std::string roomId;

  _ChatProject_saveRoomMsg_args__isset __isset;

  void __set_msg(const MsgItem& val) {
    msg = val;
  }

  void __set_roomId(const std::string& val) {
    roomId = val;
  }

  bool operator == (const ChatProject_saveRoomMsg_args & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    if (!(roomId == rhs.roomId))
      return false;
    return true;
  }
  bool operator != (const ChatProject_saveRoomMsg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_saveRoomMsg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_saveRoomMsg_pargs {
 public:

  static const char* ascii_fingerprint; // = "6CA919E410DDB60DED9F76EE14EBBA8C";
  static const uint8_t binary_fingerprint[16]; // = {0x6C,0xA9,0x19,0xE4,0x10,0xDD,0xB6,0x0D,0xED,0x9F,0x76,0xEE,0x14,0xEB,0xBA,0x8C};


  virtual ~ChatProject_saveRoomMsg_pargs() throw() {}

  const MsgItem* msg;
  const std::string* roomId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_saveRoomMsg_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ChatProject_saveRoomMsg_result() {
  }

  virtual ~ChatProject_saveRoomMsg_result() throw() {}


  bool operator == (const ChatProject_saveRoomMsg_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChatProject_saveRoomMsg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_saveRoomMsg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_saveRoomMsg_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ChatProject_saveRoomMsg_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_getRoomMsg_args__isset {
  _ChatProject_getRoomMsg_args__isset() : roomId(false) {}
  bool roomId;
} _ChatProject_getRoomMsg_args__isset;

class ChatProject_getRoomMsg_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ChatProject_getRoomMsg_args() : roomId() {
  }

  virtual ~ChatProject_getRoomMsg_args() throw() {}

  std::string roomId;

  _ChatProject_getRoomMsg_args__isset __isset;

  void __set_roomId(const std::string& val) {
    roomId = val;
  }

  bool operator == (const ChatProject_getRoomMsg_args & rhs) const
  {
    if (!(roomId == rhs.roomId))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getRoomMsg_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getRoomMsg_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_getRoomMsg_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ChatProject_getRoomMsg_pargs() throw() {}

  const std::string* roomId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getRoomMsg_result__isset {
  _ChatProject_getRoomMsg_result__isset() : success(false) {}
  bool success;
} _ChatProject_getRoomMsg_result__isset;

class ChatProject_getRoomMsg_result {
 public:

  static const char* ascii_fingerprint; // = "9BE6BF9A807D9934CC646FE69461A91D";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xE6,0xBF,0x9A,0x80,0x7D,0x99,0x34,0xCC,0x64,0x6F,0xE6,0x94,0x61,0xA9,0x1D};

  ChatProject_getRoomMsg_result() {
  }

  virtual ~ChatProject_getRoomMsg_result() throw() {}

  std::vector<MsgItem>  success;

  _ChatProject_getRoomMsg_result__isset __isset;

  void __set_success(const std::vector<MsgItem> & val) {
    success = val;
  }

  bool operator == (const ChatProject_getRoomMsg_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getRoomMsg_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getRoomMsg_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getRoomMsg_presult__isset {
  _ChatProject_getRoomMsg_presult__isset() : success(false) {}
  bool success;
} _ChatProject_getRoomMsg_presult__isset;

class ChatProject_getRoomMsg_presult {
 public:

  static const char* ascii_fingerprint; // = "9BE6BF9A807D9934CC646FE69461A91D";
  static const uint8_t binary_fingerprint[16]; // = {0x9B,0xE6,0xBF,0x9A,0x80,0x7D,0x99,0x34,0xCC,0x64,0x6F,0xE6,0x94,0x61,0xA9,0x1D};


  virtual ~ChatProject_getRoomMsg_presult() throw() {}

  std::vector<MsgItem> * success;

  _ChatProject_getRoomMsg_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_getUserInRoom_args__isset {
  _ChatProject_getUserInRoom_args__isset() : roomId(false) {}
  bool roomId;
} _ChatProject_getUserInRoom_args__isset;

class ChatProject_getUserInRoom_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ChatProject_getUserInRoom_args() : roomId() {
  }

  virtual ~ChatProject_getUserInRoom_args() throw() {}

  std::string roomId;

  _ChatProject_getUserInRoom_args__isset __isset;

  void __set_roomId(const std::string& val) {
    roomId = val;
  }

  bool operator == (const ChatProject_getUserInRoom_args & rhs) const
  {
    if (!(roomId == rhs.roomId))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getUserInRoom_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getUserInRoom_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_getUserInRoom_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ChatProject_getUserInRoom_pargs() throw() {}

  const std::string* roomId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getUserInRoom_result__isset {
  _ChatProject_getUserInRoom_result__isset() : success(false) {}
  bool success;
} _ChatProject_getUserInRoom_result__isset;

class ChatProject_getUserInRoom_result {
 public:

  static const char* ascii_fingerprint; // = "34FA387B625892E375D06B5E8AC97179";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0xFA,0x38,0x7B,0x62,0x58,0x92,0xE3,0x75,0xD0,0x6B,0x5E,0x8A,0xC9,0x71,0x79};

  ChatProject_getUserInRoom_result() {
  }

  virtual ~ChatProject_getUserInRoom_result() throw() {}

  std::vector<UserItem>  success;

  _ChatProject_getUserInRoom_result__isset __isset;

  void __set_success(const std::vector<UserItem> & val) {
    success = val;
  }

  bool operator == (const ChatProject_getUserInRoom_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getUserInRoom_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getUserInRoom_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getUserInRoom_presult__isset {
  _ChatProject_getUserInRoom_presult__isset() : success(false) {}
  bool success;
} _ChatProject_getUserInRoom_presult__isset;

class ChatProject_getUserInRoom_presult {
 public:

  static const char* ascii_fingerprint; // = "34FA387B625892E375D06B5E8AC97179";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0xFA,0x38,0x7B,0x62,0x58,0x92,0xE3,0x75,0xD0,0x6B,0x5E,0x8A,0xC9,0x71,0x79};


  virtual ~ChatProject_getUserInRoom_presult() throw() {}

  std::vector<UserItem> * success;

  _ChatProject_getUserInRoom_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_getUserProfile_args__isset {
  _ChatProject_getUserProfile_args__isset() : userId(false) {}
  bool userId;
} _ChatProject_getUserProfile_args__isset;

class ChatProject_getUserProfile_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ChatProject_getUserProfile_args() : userId() {
  }

  virtual ~ChatProject_getUserProfile_args() throw() {}

  std::string userId;

  _ChatProject_getUserProfile_args__isset __isset;

  void __set_userId(const std::string& val) {
    userId = val;
  }

  bool operator == (const ChatProject_getUserProfile_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getUserProfile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getUserProfile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_getUserProfile_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ChatProject_getUserProfile_pargs() throw() {}

  const std::string* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getUserProfile_result__isset {
  _ChatProject_getUserProfile_result__isset() : success(false) {}
  bool success;
} _ChatProject_getUserProfile_result__isset;

class ChatProject_getUserProfile_result {
 public:

  static const char* ascii_fingerprint; // = "A71E7FF97EC799A15E9FAA4841AFE42D";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x1E,0x7F,0xF9,0x7E,0xC7,0x99,0xA1,0x5E,0x9F,0xAA,0x48,0x41,0xAF,0xE4,0x2D};

  ChatProject_getUserProfile_result() {
  }

  virtual ~ChatProject_getUserProfile_result() throw() {}

  UserItem success;

  _ChatProject_getUserProfile_result__isset __isset;

  void __set_success(const UserItem& val) {
    success = val;
  }

  bool operator == (const ChatProject_getUserProfile_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getUserProfile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getUserProfile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getUserProfile_presult__isset {
  _ChatProject_getUserProfile_presult__isset() : success(false) {}
  bool success;
} _ChatProject_getUserProfile_presult__isset;

class ChatProject_getUserProfile_presult {
 public:

  static const char* ascii_fingerprint; // = "A71E7FF97EC799A15E9FAA4841AFE42D";
  static const uint8_t binary_fingerprint[16]; // = {0xA7,0x1E,0x7F,0xF9,0x7E,0xC7,0x99,0xA1,0x5E,0x9F,0xAA,0x48,0x41,0xAF,0xE4,0x2D};


  virtual ~ChatProject_getUserProfile_presult() throw() {}

  UserItem* success;

  _ChatProject_getUserProfile_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_getFriendList_args__isset {
  _ChatProject_getFriendList_args__isset() : userId(false) {}
  bool userId;
} _ChatProject_getFriendList_args__isset;

class ChatProject_getFriendList_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ChatProject_getFriendList_args() : userId() {
  }

  virtual ~ChatProject_getFriendList_args() throw() {}

  std::string userId;

  _ChatProject_getFriendList_args__isset __isset;

  void __set_userId(const std::string& val) {
    userId = val;
  }

  bool operator == (const ChatProject_getFriendList_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getFriendList_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getFriendList_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_getFriendList_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ChatProject_getFriendList_pargs() throw() {}

  const std::string* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getFriendList_result__isset {
  _ChatProject_getFriendList_result__isset() : success(false) {}
  bool success;
} _ChatProject_getFriendList_result__isset;

class ChatProject_getFriendList_result {
 public:

  static const char* ascii_fingerprint; // = "34FA387B625892E375D06B5E8AC97179";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0xFA,0x38,0x7B,0x62,0x58,0x92,0xE3,0x75,0xD0,0x6B,0x5E,0x8A,0xC9,0x71,0x79};

  ChatProject_getFriendList_result() {
  }

  virtual ~ChatProject_getFriendList_result() throw() {}

  std::vector<UserItem>  success;

  _ChatProject_getFriendList_result__isset __isset;

  void __set_success(const std::vector<UserItem> & val) {
    success = val;
  }

  bool operator == (const ChatProject_getFriendList_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getFriendList_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getFriendList_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getFriendList_presult__isset {
  _ChatProject_getFriendList_presult__isset() : success(false) {}
  bool success;
} _ChatProject_getFriendList_presult__isset;

class ChatProject_getFriendList_presult {
 public:

  static const char* ascii_fingerprint; // = "34FA387B625892E375D06B5E8AC97179";
  static const uint8_t binary_fingerprint[16]; // = {0x34,0xFA,0x38,0x7B,0x62,0x58,0x92,0xE3,0x75,0xD0,0x6B,0x5E,0x8A,0xC9,0x71,0x79};


  virtual ~ChatProject_getFriendList_presult() throw() {}

  std::vector<UserItem> * success;

  _ChatProject_getFriendList_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChatProject_getNewMsgId_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ChatProject_getNewMsgId_args() {
  }

  virtual ~ChatProject_getNewMsgId_args() throw() {}


  bool operator == (const ChatProject_getNewMsgId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChatProject_getNewMsgId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getNewMsgId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_getNewMsgId_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ChatProject_getNewMsgId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getNewMsgId_result__isset {
  _ChatProject_getNewMsgId_result__isset() : success(false) {}
  bool success;
} _ChatProject_getNewMsgId_result__isset;

class ChatProject_getNewMsgId_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  ChatProject_getNewMsgId_result() : success(0) {
  }

  virtual ~ChatProject_getNewMsgId_result() throw() {}

  int64_t success;

  _ChatProject_getNewMsgId_result__isset __isset;

  void __set_success(const int64_t val) {
    success = val;
  }

  bool operator == (const ChatProject_getNewMsgId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getNewMsgId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getNewMsgId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getNewMsgId_presult__isset {
  _ChatProject_getNewMsgId_presult__isset() : success(false) {}
  bool success;
} _ChatProject_getNewMsgId_presult__isset;

class ChatProject_getNewMsgId_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~ChatProject_getNewMsgId_presult() throw() {}

  int64_t* success;

  _ChatProject_getNewMsgId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_notifyUserOnline_args__isset {
  _ChatProject_notifyUserOnline_args__isset() : userId(false) {}
  bool userId;
} _ChatProject_notifyUserOnline_args__isset;

class ChatProject_notifyUserOnline_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ChatProject_notifyUserOnline_args() : userId() {
  }

  virtual ~ChatProject_notifyUserOnline_args() throw() {}

  std::string userId;

  _ChatProject_notifyUserOnline_args__isset __isset;

  void __set_userId(const std::string& val) {
    userId = val;
  }

  bool operator == (const ChatProject_notifyUserOnline_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const ChatProject_notifyUserOnline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_notifyUserOnline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_notifyUserOnline_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ChatProject_notifyUserOnline_pargs() throw() {}

  const std::string* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_notifyUserOnline_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ChatProject_notifyUserOnline_result() {
  }

  virtual ~ChatProject_notifyUserOnline_result() throw() {}


  bool operator == (const ChatProject_notifyUserOnline_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChatProject_notifyUserOnline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_notifyUserOnline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_notifyUserOnline_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ChatProject_notifyUserOnline_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_notifyListUserOffline_args__isset {
  _ChatProject_notifyListUserOffline_args__isset() : listUserIdOffline(false) {}
  bool listUserIdOffline;
} _ChatProject_notifyListUserOffline_args__isset;

class ChatProject_notifyListUserOffline_args {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  ChatProject_notifyListUserOffline_args() {
  }

  virtual ~ChatProject_notifyListUserOffline_args() throw() {}

  std::vector<std::string>  listUserIdOffline;

  _ChatProject_notifyListUserOffline_args__isset __isset;

  void __set_listUserIdOffline(const std::vector<std::string> & val) {
    listUserIdOffline = val;
  }

  bool operator == (const ChatProject_notifyListUserOffline_args & rhs) const
  {
    if (!(listUserIdOffline == rhs.listUserIdOffline))
      return false;
    return true;
  }
  bool operator != (const ChatProject_notifyListUserOffline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_notifyListUserOffline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_notifyListUserOffline_pargs {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};


  virtual ~ChatProject_notifyListUserOffline_pargs() throw() {}

  const std::vector<std::string> * listUserIdOffline;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_notifyListUserOffline_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ChatProject_notifyListUserOffline_result() {
  }

  virtual ~ChatProject_notifyListUserOffline_result() throw() {}


  bool operator == (const ChatProject_notifyListUserOffline_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChatProject_notifyListUserOffline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_notifyListUserOffline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_notifyListUserOffline_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ChatProject_notifyListUserOffline_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_checkFriendOnline_args__isset {
  _ChatProject_checkFriendOnline_args__isset() : listFriendId(false) {}
  bool listFriendId;
} _ChatProject_checkFriendOnline_args__isset;

class ChatProject_checkFriendOnline_args {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};

  ChatProject_checkFriendOnline_args() {
  }

  virtual ~ChatProject_checkFriendOnline_args() throw() {}

  std::vector<std::string>  listFriendId;

  _ChatProject_checkFriendOnline_args__isset __isset;

  void __set_listFriendId(const std::vector<std::string> & val) {
    listFriendId = val;
  }

  bool operator == (const ChatProject_checkFriendOnline_args & rhs) const
  {
    if (!(listFriendId == rhs.listFriendId))
      return false;
    return true;
  }
  bool operator != (const ChatProject_checkFriendOnline_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_checkFriendOnline_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_checkFriendOnline_pargs {
 public:

  static const char* ascii_fingerprint; // = "ACE4F644F0FDD289DDC4EE5B83BC13C0";
  static const uint8_t binary_fingerprint[16]; // = {0xAC,0xE4,0xF6,0x44,0xF0,0xFD,0xD2,0x89,0xDD,0xC4,0xEE,0x5B,0x83,0xBC,0x13,0xC0};


  virtual ~ChatProject_checkFriendOnline_pargs() throw() {}

  const std::vector<std::string> * listFriendId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_checkFriendOnline_result__isset {
  _ChatProject_checkFriendOnline_result__isset() : success(false) {}
  bool success;
} _ChatProject_checkFriendOnline_result__isset;

class ChatProject_checkFriendOnline_result {
 public:

  static const char* ascii_fingerprint; // = "8924404973FDD6349682E21617A4F426";
  static const uint8_t binary_fingerprint[16]; // = {0x89,0x24,0x40,0x49,0x73,0xFD,0xD6,0x34,0x96,0x82,0xE2,0x16,0x17,0xA4,0xF4,0x26};

  ChatProject_checkFriendOnline_result() {
  }

  virtual ~ChatProject_checkFriendOnline_result() throw() {}

  std::vector<bool>  success;

  _ChatProject_checkFriendOnline_result__isset __isset;

  void __set_success(const std::vector<bool> & val) {
    success = val;
  }

  bool operator == (const ChatProject_checkFriendOnline_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_checkFriendOnline_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_checkFriendOnline_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_checkFriendOnline_presult__isset {
  _ChatProject_checkFriendOnline_presult__isset() : success(false) {}
  bool success;
} _ChatProject_checkFriendOnline_presult__isset;

class ChatProject_checkFriendOnline_presult {
 public:

  static const char* ascii_fingerprint; // = "8924404973FDD6349682E21617A4F426";
  static const uint8_t binary_fingerprint[16]; // = {0x89,0x24,0x40,0x49,0x73,0xFD,0xD6,0x34,0x96,0x82,0xE2,0x16,0x17,0xA4,0xF4,0x26};


  virtual ~ChatProject_checkFriendOnline_presult() throw() {}

  std::vector<bool> * success;

  _ChatProject_checkFriendOnline_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_getFriendListZalo_args__isset {
  _ChatProject_getFriendListZalo_args__isset() : userId(false), oAuthCode(false) {}
  bool userId;
  bool oAuthCode;
} _ChatProject_getFriendListZalo_args__isset;

class ChatProject_getFriendListZalo_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  ChatProject_getFriendListZalo_args() : userId(), oAuthCode() {
  }

  virtual ~ChatProject_getFriendListZalo_args() throw() {}

  std::string userId;
  std::string oAuthCode;

  _ChatProject_getFriendListZalo_args__isset __isset;

  void __set_userId(const std::string& val) {
    userId = val;
  }

  void __set_oAuthCode(const std::string& val) {
    oAuthCode = val;
  }

  bool operator == (const ChatProject_getFriendListZalo_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(oAuthCode == rhs.oAuthCode))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getFriendListZalo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getFriendListZalo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_getFriendListZalo_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~ChatProject_getFriendListZalo_pargs() throw() {}

  const std::string* userId;
  const std::string* oAuthCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getFriendListZalo_result__isset {
  _ChatProject_getFriendListZalo_result__isset() : success(false) {}
  bool success;
} _ChatProject_getFriendListZalo_result__isset;

class ChatProject_getFriendListZalo_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  ChatProject_getFriendListZalo_result() : success() {
  }

  virtual ~ChatProject_getFriendListZalo_result() throw() {}

  std::string success;

  _ChatProject_getFriendListZalo_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ChatProject_getFriendListZalo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getFriendListZalo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getFriendListZalo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getFriendListZalo_presult__isset {
  _ChatProject_getFriendListZalo_presult__isset() : success(false) {}
  bool success;
} _ChatProject_getFriendListZalo_presult__isset;

class ChatProject_getFriendListZalo_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~ChatProject_getFriendListZalo_presult() throw() {}

  std::string* success;

  _ChatProject_getFriendListZalo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_getProfileZalo_args__isset {
  _ChatProject_getProfileZalo_args__isset() : userId(false), oAuthCode(false) {}
  bool userId;
  bool oAuthCode;
} _ChatProject_getProfileZalo_args__isset;

class ChatProject_getProfileZalo_args {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  ChatProject_getProfileZalo_args() : userId(), oAuthCode() {
  }

  virtual ~ChatProject_getProfileZalo_args() throw() {}

  std::string userId;
  std::string oAuthCode;

  _ChatProject_getProfileZalo_args__isset __isset;

  void __set_userId(const std::string& val) {
    userId = val;
  }

  void __set_oAuthCode(const std::string& val) {
    oAuthCode = val;
  }

  bool operator == (const ChatProject_getProfileZalo_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    if (!(oAuthCode == rhs.oAuthCode))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getProfileZalo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getProfileZalo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_getProfileZalo_pargs {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};


  virtual ~ChatProject_getProfileZalo_pargs() throw() {}

  const std::string* userId;
  const std::string* oAuthCode;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getProfileZalo_result__isset {
  _ChatProject_getProfileZalo_result__isset() : success(false) {}
  bool success;
} _ChatProject_getProfileZalo_result__isset;

class ChatProject_getProfileZalo_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  ChatProject_getProfileZalo_result() : success() {
  }

  virtual ~ChatProject_getProfileZalo_result() throw() {}

  std::string success;

  _ChatProject_getProfileZalo_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ChatProject_getProfileZalo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_getProfileZalo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_getProfileZalo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_getProfileZalo_presult__isset {
  _ChatProject_getProfileZalo_presult__isset() : success(false) {}
  bool success;
} _ChatProject_getProfileZalo_presult__isset;

class ChatProject_getProfileZalo_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~ChatProject_getProfileZalo_presult() throw() {}

  std::string* success;

  _ChatProject_getProfileZalo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class ChatProject_loadAllEmotion_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ChatProject_loadAllEmotion_args() {
  }

  virtual ~ChatProject_loadAllEmotion_args() throw() {}


  bool operator == (const ChatProject_loadAllEmotion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ChatProject_loadAllEmotion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_loadAllEmotion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_loadAllEmotion_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ChatProject_loadAllEmotion_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_loadAllEmotion_result__isset {
  _ChatProject_loadAllEmotion_result__isset() : success(false) {}
  bool success;
} _ChatProject_loadAllEmotion_result__isset;

class ChatProject_loadAllEmotion_result {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};

  ChatProject_loadAllEmotion_result() : success() {
  }

  virtual ~ChatProject_loadAllEmotion_result() throw() {}

  std::string success;

  _ChatProject_loadAllEmotion_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const ChatProject_loadAllEmotion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_loadAllEmotion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_loadAllEmotion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_loadAllEmotion_presult__isset {
  _ChatProject_loadAllEmotion_presult__isset() : success(false) {}
  bool success;
} _ChatProject_loadAllEmotion_presult__isset;

class ChatProject_loadAllEmotion_presult {
 public:

  static const char* ascii_fingerprint; // = "9A73381FEFD6B67F432E717102246330";
  static const uint8_t binary_fingerprint[16]; // = {0x9A,0x73,0x38,0x1F,0xEF,0xD6,0xB6,0x7F,0x43,0x2E,0x71,0x71,0x02,0x24,0x63,0x30};


  virtual ~ChatProject_loadAllEmotion_presult() throw() {}

  std::string* success;

  _ChatProject_loadAllEmotion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _ChatProject_checkOfflineMessage_args__isset {
  _ChatProject_checkOfflineMessage_args__isset() : userId(false) {}
  bool userId;
} _ChatProject_checkOfflineMessage_args__isset;

class ChatProject_checkOfflineMessage_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ChatProject_checkOfflineMessage_args() : userId() {
  }

  virtual ~ChatProject_checkOfflineMessage_args() throw() {}

  std::string userId;

  _ChatProject_checkOfflineMessage_args__isset __isset;

  void __set_userId(const std::string& val) {
    userId = val;
  }

  bool operator == (const ChatProject_checkOfflineMessage_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const ChatProject_checkOfflineMessage_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_checkOfflineMessage_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class ChatProject_checkOfflineMessage_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ChatProject_checkOfflineMessage_pargs() throw() {}

  const std::string* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_checkOfflineMessage_result__isset {
  _ChatProject_checkOfflineMessage_result__isset() : success(false) {}
  bool success;
} _ChatProject_checkOfflineMessage_result__isset;

class ChatProject_checkOfflineMessage_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ChatProject_checkOfflineMessage_result() {
  }

  virtual ~ChatProject_checkOfflineMessage_result() throw() {}

  std::vector<std::string>  success;

  _ChatProject_checkOfflineMessage_result__isset __isset;

  void __set_success(const std::vector<std::string> & val) {
    success = val;
  }

  bool operator == (const ChatProject_checkOfflineMessage_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ChatProject_checkOfflineMessage_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ChatProject_checkOfflineMessage_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _ChatProject_checkOfflineMessage_presult__isset {
  _ChatProject_checkOfflineMessage_presult__isset() : success(false) {}
  bool success;
} _ChatProject_checkOfflineMessage_presult__isset;

class ChatProject_checkOfflineMessage_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ChatProject_checkOfflineMessage_presult() throw() {}

  std::vector<std::string> * success;

  _ChatProject_checkOfflineMessage_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class ChatProjectClient : virtual public ChatProjectIf {
 public:
  ChatProjectClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  ChatProjectClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getAllChatRoom(std::vector<RoomItem> & _return);
  void send_getAllChatRoom();
  void recv_getAllChatRoom(std::vector<RoomItem> & _return);
  void getListUserInRoom(std::vector<UserItem> & _return, const std::string& roomId);
  void send_getListUserInRoom(const std::string& roomId);
  void recv_getListUserInRoom(std::vector<UserItem> & _return);
  void getAllEmotionGroup(std::vector<GroupEmotion> & _return);
  void send_getAllEmotionGroup();
  void recv_getAllEmotionGroup(std::vector<GroupEmotion> & _return);
  void getEmotionGroup(GroupEmotion& _return, const std::string& emotionGroupId);
  void send_getEmotionGroup(const std::string& emotionGroupId);
  void recv_getEmotionGroup(GroupEmotion& _return);
  void addRoom(const RoomItem& newRoom);
  void send_addRoom(const RoomItem& newRoom);
  void recv_addRoom();
  void editRoom(const RoomItem& room);
  void send_editRoom(const RoomItem& room);
  void recv_editRoom();
  void deleteRoom(const std::string& roomId);
  void send_deleteRoom(const std::string& roomId);
  void recv_deleteRoom();
  void addEmotion(const std::string& emotionItem);
  void send_addEmotion(const std::string& emotionItem);
  void recv_addEmotion();
  void editEmotion(const int64_t emotionId, const EmotionItem& emotionItem);
  void send_editEmotion(const int64_t emotionId, const EmotionItem& emotionItem);
  void recv_editEmotion();
  void deleteEmotion(const int64_t emotionId);
  void send_deleteEmotion(const int64_t emotionId);
  void recv_deleteEmotion();
  void kickUser(const std::string& userId);
  void send_kickUser(const std::string& userId);
  void recv_kickUser();
  void getRoomStatisticByDate(RoomStatistic& _return, const int32_t date);
  void send_getRoomStatisticByDate(const int32_t date);
  void recv_getRoomStatisticByDate(RoomStatistic& _return);
  void getEmotionStatisticByDate(EmotionStatistic& _return, const int32_t date);
  void send_getEmotionStatisticByDate(const int32_t date);
  void recv_getEmotionStatisticByDate(EmotionStatistic& _return);
  bool sendMessageInternal(const MsgItem& msgItem, const bool messageOnline);
  void send_sendMessageInternal(const MsgItem& msgItem, const bool messageOnline);
  bool recv_sendMessageInternal();
  void saveListMsgId(const std::vector<int64_t> & listMsgId);
  void send_saveListMsgId(const std::vector<int64_t> & listMsgId);
  void recv_saveListMsgId();
  void saveOfflineMsgNotify(const std::string& userId);
  void send_saveOfflineMsgNotify(const std::string& userId);
  void recv_saveOfflineMsgNotify();
  void getMessageList(std::vector<MsgItem> & _return, const std::string& userId1, const std::string& userId2, const int32_t totalMsg);
  void send_getMessageList(const std::string& userId1, const std::string& userId2, const int32_t totalMsg);
  void recv_getMessageList(std::vector<MsgItem> & _return);
  void getMessageIdList(std::vector<int64_t> & _return, const std::string& userId1, const std::string& userId2, const int32_t totalMsg);
  void send_getMessageIdList(const std::string& userId1, const std::string& userId2, const int32_t totalMsg);
  void recv_getMessageIdList(std::vector<int64_t> & _return);
  void getMessageItem(MsgItem& _return, const int64_t MsgId);
  void send_getMessageItem(const int64_t MsgId);
  void recv_getMessageItem(MsgItem& _return);
  void saveRoomMsg(const MsgItem& msg, const std::string& roomId);
  void send_saveRoomMsg(const MsgItem& msg, const std::string& roomId);
  void recv_saveRoomMsg();
  void getRoomMsg(std::vector<MsgItem> & _return, const std::string& roomId);
  void send_getRoomMsg(const std::string& roomId);
  void recv_getRoomMsg(std::vector<MsgItem> & _return);
  void getUserInRoom(std::vector<UserItem> & _return, const std::string& roomId);
  void send_getUserInRoom(const std::string& roomId);
  void recv_getUserInRoom(std::vector<UserItem> & _return);
  void getUserProfile(UserItem& _return, const std::string& userId);
  void send_getUserProfile(const std::string& userId);
  void recv_getUserProfile(UserItem& _return);
  void getFriendList(std::vector<UserItem> & _return, const std::string& userId);
  void send_getFriendList(const std::string& userId);
  void recv_getFriendList(std::vector<UserItem> & _return);
  int64_t getNewMsgId();
  void send_getNewMsgId();
  int64_t recv_getNewMsgId();
  void notifyUserOnline(const std::string& userId);
  void send_notifyUserOnline(const std::string& userId);
  void recv_notifyUserOnline();
  void notifyListUserOffline(const std::vector<std::string> & listUserIdOffline);
  void send_notifyListUserOffline(const std::vector<std::string> & listUserIdOffline);
  void recv_notifyListUserOffline();
  void checkFriendOnline(std::vector<bool> & _return, const std::vector<std::string> & listFriendId);
  void send_checkFriendOnline(const std::vector<std::string> & listFriendId);
  void recv_checkFriendOnline(std::vector<bool> & _return);
  void getFriendListZalo(std::string& _return, const std::string& userId, const std::string& oAuthCode);
  void send_getFriendListZalo(const std::string& userId, const std::string& oAuthCode);
  void recv_getFriendListZalo(std::string& _return);
  void getProfileZalo(std::string& _return, const std::string& userId, const std::string& oAuthCode);
  void send_getProfileZalo(const std::string& userId, const std::string& oAuthCode);
  void recv_getProfileZalo(std::string& _return);
  void loadAllEmotion(std::string& _return);
  void send_loadAllEmotion();
  void recv_loadAllEmotion(std::string& _return);
  void checkOfflineMessage(std::vector<std::string> & _return, const std::string& userId);
  void send_checkOfflineMessage(const std::string& userId);
  void recv_checkOfflineMessage(std::vector<std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ChatProjectProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ChatProjectIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ChatProjectProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getAllChatRoom(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getListUserInRoom(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllEmotionGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEmotionGroup(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addRoom(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_editRoom(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteRoom(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_addEmotion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_editEmotion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteEmotion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kickUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRoomStatisticByDate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getEmotionStatisticByDate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sendMessageInternal(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveListMsgId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveOfflineMsgNotify(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMessageList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMessageIdList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMessageItem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_saveRoomMsg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getRoomMsg(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserInRoom(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getUserProfile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFriendList(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNewMsgId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyUserOnline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_notifyListUserOffline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkFriendOnline(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFriendListZalo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getProfileZalo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loadAllEmotion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_checkOfflineMessage(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ChatProjectProcessor(boost::shared_ptr<ChatProjectIf> iface) :
    iface_(iface) {
    processMap_["getAllChatRoom"] = &ChatProjectProcessor::process_getAllChatRoom;
    processMap_["getListUserInRoom"] = &ChatProjectProcessor::process_getListUserInRoom;
    processMap_["getAllEmotionGroup"] = &ChatProjectProcessor::process_getAllEmotionGroup;
    processMap_["getEmotionGroup"] = &ChatProjectProcessor::process_getEmotionGroup;
    processMap_["addRoom"] = &ChatProjectProcessor::process_addRoom;
    processMap_["editRoom"] = &ChatProjectProcessor::process_editRoom;
    processMap_["deleteRoom"] = &ChatProjectProcessor::process_deleteRoom;
    processMap_["addEmotion"] = &ChatProjectProcessor::process_addEmotion;
    processMap_["editEmotion"] = &ChatProjectProcessor::process_editEmotion;
    processMap_["deleteEmotion"] = &ChatProjectProcessor::process_deleteEmotion;
    processMap_["kickUser"] = &ChatProjectProcessor::process_kickUser;
    processMap_["getRoomStatisticByDate"] = &ChatProjectProcessor::process_getRoomStatisticByDate;
    processMap_["getEmotionStatisticByDate"] = &ChatProjectProcessor::process_getEmotionStatisticByDate;
    processMap_["sendMessageInternal"] = &ChatProjectProcessor::process_sendMessageInternal;
    processMap_["saveListMsgId"] = &ChatProjectProcessor::process_saveListMsgId;
    processMap_["saveOfflineMsgNotify"] = &ChatProjectProcessor::process_saveOfflineMsgNotify;
    processMap_["getMessageList"] = &ChatProjectProcessor::process_getMessageList;
    processMap_["getMessageIdList"] = &ChatProjectProcessor::process_getMessageIdList;
    processMap_["getMessageItem"] = &ChatProjectProcessor::process_getMessageItem;
    processMap_["saveRoomMsg"] = &ChatProjectProcessor::process_saveRoomMsg;
    processMap_["getRoomMsg"] = &ChatProjectProcessor::process_getRoomMsg;
    processMap_["getUserInRoom"] = &ChatProjectProcessor::process_getUserInRoom;
    processMap_["getUserProfile"] = &ChatProjectProcessor::process_getUserProfile;
    processMap_["getFriendList"] = &ChatProjectProcessor::process_getFriendList;
    processMap_["getNewMsgId"] = &ChatProjectProcessor::process_getNewMsgId;
    processMap_["notifyUserOnline"] = &ChatProjectProcessor::process_notifyUserOnline;
    processMap_["notifyListUserOffline"] = &ChatProjectProcessor::process_notifyListUserOffline;
    processMap_["checkFriendOnline"] = &ChatProjectProcessor::process_checkFriendOnline;
    processMap_["getFriendListZalo"] = &ChatProjectProcessor::process_getFriendListZalo;
    processMap_["getProfileZalo"] = &ChatProjectProcessor::process_getProfileZalo;
    processMap_["loadAllEmotion"] = &ChatProjectProcessor::process_loadAllEmotion;
    processMap_["checkOfflineMessage"] = &ChatProjectProcessor::process_checkOfflineMessage;
  }

  virtual ~ChatProjectProcessor() {}
};

class ChatProjectProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ChatProjectProcessorFactory(const ::boost::shared_ptr< ChatProjectIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ChatProjectIfFactory > handlerFactory_;
};

class ChatProjectMultiface : virtual public ChatProjectIf {
 public:
  ChatProjectMultiface(std::vector<boost::shared_ptr<ChatProjectIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ChatProjectMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ChatProjectIf> > ifaces_;
  ChatProjectMultiface() {}
  void add(boost::shared_ptr<ChatProjectIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getAllChatRoom(std::vector<RoomItem> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllChatRoom(_return);
    }
    ifaces_[i]->getAllChatRoom(_return);
    return;
  }

  void getListUserInRoom(std::vector<UserItem> & _return, const std::string& roomId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getListUserInRoom(_return, roomId);
    }
    ifaces_[i]->getListUserInRoom(_return, roomId);
    return;
  }

  void getAllEmotionGroup(std::vector<GroupEmotion> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllEmotionGroup(_return);
    }
    ifaces_[i]->getAllEmotionGroup(_return);
    return;
  }

  void getEmotionGroup(GroupEmotion& _return, const std::string& emotionGroupId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEmotionGroup(_return, emotionGroupId);
    }
    ifaces_[i]->getEmotionGroup(_return, emotionGroupId);
    return;
  }

  void addRoom(const RoomItem& newRoom) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addRoom(newRoom);
    }
    ifaces_[i]->addRoom(newRoom);
  }

  void editRoom(const RoomItem& room) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->editRoom(room);
    }
    ifaces_[i]->editRoom(room);
  }

  void deleteRoom(const std::string& roomId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteRoom(roomId);
    }
    ifaces_[i]->deleteRoom(roomId);
  }

  void addEmotion(const std::string& emotionItem) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->addEmotion(emotionItem);
    }
    ifaces_[i]->addEmotion(emotionItem);
  }

  void editEmotion(const int64_t emotionId, const EmotionItem& emotionItem) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->editEmotion(emotionId, emotionItem);
    }
    ifaces_[i]->editEmotion(emotionId, emotionItem);
  }

  void deleteEmotion(const int64_t emotionId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteEmotion(emotionId);
    }
    ifaces_[i]->deleteEmotion(emotionId);
  }

  void kickUser(const std::string& userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kickUser(userId);
    }
    ifaces_[i]->kickUser(userId);
  }

  void getRoomStatisticByDate(RoomStatistic& _return, const int32_t date) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRoomStatisticByDate(_return, date);
    }
    ifaces_[i]->getRoomStatisticByDate(_return, date);
    return;
  }

  void getEmotionStatisticByDate(EmotionStatistic& _return, const int32_t date) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getEmotionStatisticByDate(_return, date);
    }
    ifaces_[i]->getEmotionStatisticByDate(_return, date);
    return;
  }

  bool sendMessageInternal(const MsgItem& msgItem, const bool messageOnline) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sendMessageInternal(msgItem, messageOnline);
    }
    return ifaces_[i]->sendMessageInternal(msgItem, messageOnline);
  }

  void saveListMsgId(const std::vector<int64_t> & listMsgId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveListMsgId(listMsgId);
    }
    ifaces_[i]->saveListMsgId(listMsgId);
  }

  void saveOfflineMsgNotify(const std::string& userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveOfflineMsgNotify(userId);
    }
    ifaces_[i]->saveOfflineMsgNotify(userId);
  }

  void getMessageList(std::vector<MsgItem> & _return, const std::string& userId1, const std::string& userId2, const int32_t totalMsg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMessageList(_return, userId1, userId2, totalMsg);
    }
    ifaces_[i]->getMessageList(_return, userId1, userId2, totalMsg);
    return;
  }

  void getMessageIdList(std::vector<int64_t> & _return, const std::string& userId1, const std::string& userId2, const int32_t totalMsg) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMessageIdList(_return, userId1, userId2, totalMsg);
    }
    ifaces_[i]->getMessageIdList(_return, userId1, userId2, totalMsg);
    return;
  }

  void getMessageItem(MsgItem& _return, const int64_t MsgId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMessageItem(_return, MsgId);
    }
    ifaces_[i]->getMessageItem(_return, MsgId);
    return;
  }

  void saveRoomMsg(const MsgItem& msg, const std::string& roomId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->saveRoomMsg(msg, roomId);
    }
    ifaces_[i]->saveRoomMsg(msg, roomId);
  }

  void getRoomMsg(std::vector<MsgItem> & _return, const std::string& roomId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getRoomMsg(_return, roomId);
    }
    ifaces_[i]->getRoomMsg(_return, roomId);
    return;
  }

  void getUserInRoom(std::vector<UserItem> & _return, const std::string& roomId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserInRoom(_return, roomId);
    }
    ifaces_[i]->getUserInRoom(_return, roomId);
    return;
  }

  void getUserProfile(UserItem& _return, const std::string& userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getUserProfile(_return, userId);
    }
    ifaces_[i]->getUserProfile(_return, userId);
    return;
  }

  void getFriendList(std::vector<UserItem> & _return, const std::string& userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFriendList(_return, userId);
    }
    ifaces_[i]->getFriendList(_return, userId);
    return;
  }

  int64_t getNewMsgId() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNewMsgId();
    }
    return ifaces_[i]->getNewMsgId();
  }

  void notifyUserOnline(const std::string& userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyUserOnline(userId);
    }
    ifaces_[i]->notifyUserOnline(userId);
  }

  void notifyListUserOffline(const std::vector<std::string> & listUserIdOffline) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyListUserOffline(listUserIdOffline);
    }
    ifaces_[i]->notifyListUserOffline(listUserIdOffline);
  }

  void checkFriendOnline(std::vector<bool> & _return, const std::vector<std::string> & listFriendId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkFriendOnline(_return, listFriendId);
    }
    ifaces_[i]->checkFriendOnline(_return, listFriendId);
    return;
  }

  void getFriendListZalo(std::string& _return, const std::string& userId, const std::string& oAuthCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFriendListZalo(_return, userId, oAuthCode);
    }
    ifaces_[i]->getFriendListZalo(_return, userId, oAuthCode);
    return;
  }

  void getProfileZalo(std::string& _return, const std::string& userId, const std::string& oAuthCode) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getProfileZalo(_return, userId, oAuthCode);
    }
    ifaces_[i]->getProfileZalo(_return, userId, oAuthCode);
    return;
  }

  void loadAllEmotion(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loadAllEmotion(_return);
    }
    ifaces_[i]->loadAllEmotion(_return);
    return;
  }

  void checkOfflineMessage(std::vector<std::string> & _return, const std::string& userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->checkOfflineMessage(_return, userId);
    }
    ifaces_[i]->checkOfflineMessage(_return, userId);
    return;
  }

};

} // namespace

#endif
