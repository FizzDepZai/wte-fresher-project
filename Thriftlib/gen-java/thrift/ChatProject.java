/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ChatProject;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ChatProject {

  public interface Iface {

    /**
     * Get all chat room from database
     */
    public List<RoomItem> getAllChatRoom() throws org.apache.thrift.TException;

    /**
     * Get list online user in room
     * 
     * @param roomId
     */
    public List<UserItem> getListUserInRoom(String roomId) throws org.apache.thrift.TException;

    /**
     * Get all emotion groups
     */
    public List<GroupEmotion> getAllEmotionGroup() throws org.apache.thrift.TException;

    /**
     * Get an emotion group
     * 
     * @param emotionGroupId
     */
    public GroupEmotion getEmotionGroup(String emotionGroupId) throws org.apache.thrift.TException;

    /**
     * Add new room
     * 
     * @param newRoom
     */
    public void addRoom(RoomItem newRoom) throws org.apache.thrift.TException;

    /**
     * Edit room
     * 
     * @param room
     */
    public void editRoom(RoomItem room) throws org.apache.thrift.TException;

    /**
     * Delete room
     * 
     * @param roomId
     */
    public void deleteRoom(String roomId) throws org.apache.thrift.TException;

    /**
     * Add many emotions to an emotion group
     * 
     * @param emotionItem
     */
    public void addEmotion(String emotionItem) throws org.apache.thrift.TException;

    /**
     * Edit emotion
     * 
     * @param emotionId
     * @param emotionItem
     */
    public void editEmotion(String emotionId, EmotionItem emotionItem) throws org.apache.thrift.TException;

    /**
     * Delete emotion
     * 
     * @param emotionId
     */
    public void deleteEmotion(String emotionId) throws org.apache.thrift.TException;

    /**
     * Kick user in room
     * 
     * @param userId
     */
    public void kickUser(String userId) throws org.apache.thrift.TException;

    /**
     * Get room statistic by date
     * 
     * @param date
     */
    public RoomStatistic getRoomStatisticByDate(int date) throws org.apache.thrift.TException;

    /**
     * Get emotion statistic by date
     * 
     * @param date
     */
    public EmotionStatistic getEmotionStatisticByDate(int date) throws org.apache.thrift.TException;

    /**
     * delete all emotion in group
     * 
     * @param groupEmotionId
     */
    public boolean deleteAllEmotionInGroup(String groupEmotionId) throws org.apache.thrift.TException;

    /**
     * delete group emotion with groupEmotionId
     * 
     * @param groupEmotionId
     */
    public boolean deleteGroupEmotion(String groupEmotionId) throws org.apache.thrift.TException;

    /**
     * add new group
     * return groupId
     * 
     * @param groupEmotionName
     */
    public String addGroupEmotion(String groupEmotionName) throws org.apache.thrift.TException;

    /**
     * get all group emotion
     */
    public String gelAllGroupEmotion() throws org.apache.thrift.TException;

    /**
     * Load all emotion
     */
    public String loadAllEmotion() throws org.apache.thrift.TException;

    /**
     * get emotion with group id
     * 
     * @param groupId
     */
    public String getEmotionWithGroup(String groupId) throws org.apache.thrift.TException;

    /**
     * check image url exist in db
     * 
     * @param imageStyle
     * @param groupEmotionId
     */
    public boolean checkImageEmotionExist(String imageStyle, String groupEmotionId) throws org.apache.thrift.TException;

    /**
     * Send message item from server connection to server chat
     * 
     * @param msgItem
     * @param messageOnline
     */
    public boolean sendMessageInternal(MsgItem msgItem, boolean messageOnline) throws org.apache.thrift.TException;

    /**
     * Save list message id to database (back-end)
     * 
     * @param listMsgId
     */
    public void saveListMsgId(List<Long> listMsgId) throws org.apache.thrift.TException;

    /**
     * Save offline message notify
     * 
     * @param userId
     */
    public void saveOfflineMsgNotify(String userId) throws org.apache.thrift.TException;

    /**
     * Get message list between two users from position of current message (total message in front-end) (front-end - middleware)
     * 
     * @param userId1
     * @param userId2
     * @param totalMsg
     */
    public List<MsgItem> getMessageList(String userId1, String userId2, int totalMsg) throws org.apache.thrift.TException;

    /**
     * Get list of message id (limit) of two users (middleware-backend)
     * 
     * @param userId1
     * @param userId2
     * @param totalMsg
     */
    public List<Long> getMessageIdList(String userId1, String userId2, int totalMsg) throws org.apache.thrift.TException;

    /**
     * Get a message item between two users by message id (middleware - back-end)
     * 
     * @param userId1
     * @param userId2
     * @param MsgId
     */
    public MsgItem getMessageItem(String userId1, String userId2, long MsgId) throws org.apache.thrift.TException;

    /**
     * Save room's messages
     * 
     * @param msg
     * @param roomId
     */
    public void saveRoomMsg(MsgItem msg, String roomId) throws org.apache.thrift.TException;

    /**
     * Get all room's messages
     * 
     * @param roomId
     */
    public List<MsgItem> getRoomMsg(String roomId) throws org.apache.thrift.TException;

    /**
     * Get all users in room
     * 
     * @param roomId
     */
    public List<UserItem> getUserInRoom(String roomId) throws org.apache.thrift.TException;

    /**
     * Get user profile
     * 
     * @param userId
     */
    public UserItem getUserProfile(String userId) throws org.apache.thrift.TException;

    /**
     * Get friend list of an user
     * 
     * @param userId
     */
    public List<UserItem> getFriendList(String userId) throws org.apache.thrift.TException;

    /**
     * Get new message id
     */
    public long getNewMsgId() throws org.apache.thrift.TException;

    /**
     * Notify user online
     * 
     * @param userId
     */
    public void notifyUserOnline(String userId) throws org.apache.thrift.TException;

    /**
     * Notify list user offline
     * 
     * @param listUserIdOffline
     */
    public void notifyListUserOffline(List<String> listUserIdOffline) throws org.apache.thrift.TException;

    /**
     * check friend online
     * return friend list with status online
     * 
     * @param listFriendId
     */
    public List<Boolean> checkFriendOnline(List<String> listFriendId) throws org.apache.thrift.TException;

    /**
     * Get friend list from zalo (string-JSON)
     * 
     * @param userId
     * @param oAuthCode
     */
    public String getFriendListZalo(String userId, String oAuthCode) throws org.apache.thrift.TException;

    /**
     * Get profile of an user from zalo (string-JSON)
     * 
     * @param userId
     * @param oAuthCode
     */
    public String getProfileZalo(String userId, String oAuthCode) throws org.apache.thrift.TException;

    /**
     * Set login session
     * 
     * @param sessionId
     */
    public void setLogin(String sessionId) throws org.apache.thrift.TException;

    /**
     * Check if user log in
     * 
     * @param sessionId
     */
    public boolean isLogin(String sessionId) throws org.apache.thrift.TException;

    /**
     * Set user logout
     * 
     * @param sessionId
     */
    public void setLogout(String sessionId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAllChatRoom(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getListUserInRoom(String roomId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllEmotionGroup(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEmotionGroup(String emotionGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addRoom(RoomItem newRoom, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editRoom(RoomItem room, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteRoom(String roomId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addEmotion(String emotionItem, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void editEmotion(String emotionId, EmotionItem emotionItem, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteEmotion(String emotionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void kickUser(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRoomStatisticByDate(int date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEmotionStatisticByDate(int date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteAllEmotionInGroup(String groupEmotionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteGroupEmotion(String groupEmotionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addGroupEmotion(String groupEmotionName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void gelAllGroupEmotion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loadAllEmotion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEmotionWithGroup(String groupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkImageEmotionExist(String imageStyle, String groupEmotionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendMessageInternal(MsgItem msgItem, boolean messageOnline, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveListMsgId(List<Long> listMsgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveOfflineMsgNotify(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMessageList(String userId1, String userId2, int totalMsg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMessageIdList(String userId1, String userId2, int totalMsg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMessageItem(String userId1, String userId2, long MsgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void saveRoomMsg(MsgItem msg, String roomId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRoomMsg(String roomId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserInRoom(String roomId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserProfile(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFriendList(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getNewMsgId(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void notifyUserOnline(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void notifyListUserOffline(List<String> listUserIdOffline, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void checkFriendOnline(List<String> listFriendId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFriendListZalo(String userId, String oAuthCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getProfileZalo(String userId, String oAuthCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setLogin(String sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isLogin(String sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setLogout(String sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public List<RoomItem> getAllChatRoom() throws org.apache.thrift.TException
    {
      send_getAllChatRoom();
      return recv_getAllChatRoom();
    }

    public void send_getAllChatRoom() throws org.apache.thrift.TException
    {
      getAllChatRoom_args args = new getAllChatRoom_args();
      sendBase("getAllChatRoom", args);
    }

    public List<RoomItem> recv_getAllChatRoom() throws org.apache.thrift.TException
    {
      getAllChatRoom_result result = new getAllChatRoom_result();
      receiveBase(result, "getAllChatRoom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllChatRoom failed: unknown result");
    }

    public List<UserItem> getListUserInRoom(String roomId) throws org.apache.thrift.TException
    {
      send_getListUserInRoom(roomId);
      return recv_getListUserInRoom();
    }

    public void send_getListUserInRoom(String roomId) throws org.apache.thrift.TException
    {
      getListUserInRoom_args args = new getListUserInRoom_args();
      args.setRoomId(roomId);
      sendBase("getListUserInRoom", args);
    }

    public List<UserItem> recv_getListUserInRoom() throws org.apache.thrift.TException
    {
      getListUserInRoom_result result = new getListUserInRoom_result();
      receiveBase(result, "getListUserInRoom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getListUserInRoom failed: unknown result");
    }

    public List<GroupEmotion> getAllEmotionGroup() throws org.apache.thrift.TException
    {
      send_getAllEmotionGroup();
      return recv_getAllEmotionGroup();
    }

    public void send_getAllEmotionGroup() throws org.apache.thrift.TException
    {
      getAllEmotionGroup_args args = new getAllEmotionGroup_args();
      sendBase("getAllEmotionGroup", args);
    }

    public List<GroupEmotion> recv_getAllEmotionGroup() throws org.apache.thrift.TException
    {
      getAllEmotionGroup_result result = new getAllEmotionGroup_result();
      receiveBase(result, "getAllEmotionGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllEmotionGroup failed: unknown result");
    }

    public GroupEmotion getEmotionGroup(String emotionGroupId) throws org.apache.thrift.TException
    {
      send_getEmotionGroup(emotionGroupId);
      return recv_getEmotionGroup();
    }

    public void send_getEmotionGroup(String emotionGroupId) throws org.apache.thrift.TException
    {
      getEmotionGroup_args args = new getEmotionGroup_args();
      args.setEmotionGroupId(emotionGroupId);
      sendBase("getEmotionGroup", args);
    }

    public GroupEmotion recv_getEmotionGroup() throws org.apache.thrift.TException
    {
      getEmotionGroup_result result = new getEmotionGroup_result();
      receiveBase(result, "getEmotionGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEmotionGroup failed: unknown result");
    }

    public void addRoom(RoomItem newRoom) throws org.apache.thrift.TException
    {
      send_addRoom(newRoom);
      recv_addRoom();
    }

    public void send_addRoom(RoomItem newRoom) throws org.apache.thrift.TException
    {
      addRoom_args args = new addRoom_args();
      args.setNewRoom(newRoom);
      sendBase("addRoom", args);
    }

    public void recv_addRoom() throws org.apache.thrift.TException
    {
      addRoom_result result = new addRoom_result();
      receiveBase(result, "addRoom");
      return;
    }

    public void editRoom(RoomItem room) throws org.apache.thrift.TException
    {
      send_editRoom(room);
      recv_editRoom();
    }

    public void send_editRoom(RoomItem room) throws org.apache.thrift.TException
    {
      editRoom_args args = new editRoom_args();
      args.setRoom(room);
      sendBase("editRoom", args);
    }

    public void recv_editRoom() throws org.apache.thrift.TException
    {
      editRoom_result result = new editRoom_result();
      receiveBase(result, "editRoom");
      return;
    }

    public void deleteRoom(String roomId) throws org.apache.thrift.TException
    {
      send_deleteRoom(roomId);
      recv_deleteRoom();
    }

    public void send_deleteRoom(String roomId) throws org.apache.thrift.TException
    {
      deleteRoom_args args = new deleteRoom_args();
      args.setRoomId(roomId);
      sendBase("deleteRoom", args);
    }

    public void recv_deleteRoom() throws org.apache.thrift.TException
    {
      deleteRoom_result result = new deleteRoom_result();
      receiveBase(result, "deleteRoom");
      return;
    }

    public void addEmotion(String emotionItem) throws org.apache.thrift.TException
    {
      send_addEmotion(emotionItem);
      recv_addEmotion();
    }

    public void send_addEmotion(String emotionItem) throws org.apache.thrift.TException
    {
      addEmotion_args args = new addEmotion_args();
      args.setEmotionItem(emotionItem);
      sendBase("addEmotion", args);
    }

    public void recv_addEmotion() throws org.apache.thrift.TException
    {
      addEmotion_result result = new addEmotion_result();
      receiveBase(result, "addEmotion");
      return;
    }

    public void editEmotion(String emotionId, EmotionItem emotionItem) throws org.apache.thrift.TException
    {
      send_editEmotion(emotionId, emotionItem);
      recv_editEmotion();
    }

    public void send_editEmotion(String emotionId, EmotionItem emotionItem) throws org.apache.thrift.TException
    {
      editEmotion_args args = new editEmotion_args();
      args.setEmotionId(emotionId);
      args.setEmotionItem(emotionItem);
      sendBase("editEmotion", args);
    }

    public void recv_editEmotion() throws org.apache.thrift.TException
    {
      editEmotion_result result = new editEmotion_result();
      receiveBase(result, "editEmotion");
      return;
    }

    public void deleteEmotion(String emotionId) throws org.apache.thrift.TException
    {
      send_deleteEmotion(emotionId);
      recv_deleteEmotion();
    }

    public void send_deleteEmotion(String emotionId) throws org.apache.thrift.TException
    {
      deleteEmotion_args args = new deleteEmotion_args();
      args.setEmotionId(emotionId);
      sendBase("deleteEmotion", args);
    }

    public void recv_deleteEmotion() throws org.apache.thrift.TException
    {
      deleteEmotion_result result = new deleteEmotion_result();
      receiveBase(result, "deleteEmotion");
      return;
    }

    public void kickUser(String userId) throws org.apache.thrift.TException
    {
      send_kickUser(userId);
      recv_kickUser();
    }

    public void send_kickUser(String userId) throws org.apache.thrift.TException
    {
      kickUser_args args = new kickUser_args();
      args.setUserId(userId);
      sendBase("kickUser", args);
    }

    public void recv_kickUser() throws org.apache.thrift.TException
    {
      kickUser_result result = new kickUser_result();
      receiveBase(result, "kickUser");
      return;
    }

    public RoomStatistic getRoomStatisticByDate(int date) throws org.apache.thrift.TException
    {
      send_getRoomStatisticByDate(date);
      return recv_getRoomStatisticByDate();
    }

    public void send_getRoomStatisticByDate(int date) throws org.apache.thrift.TException
    {
      getRoomStatisticByDate_args args = new getRoomStatisticByDate_args();
      args.setDate(date);
      sendBase("getRoomStatisticByDate", args);
    }

    public RoomStatistic recv_getRoomStatisticByDate() throws org.apache.thrift.TException
    {
      getRoomStatisticByDate_result result = new getRoomStatisticByDate_result();
      receiveBase(result, "getRoomStatisticByDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRoomStatisticByDate failed: unknown result");
    }

    public EmotionStatistic getEmotionStatisticByDate(int date) throws org.apache.thrift.TException
    {
      send_getEmotionStatisticByDate(date);
      return recv_getEmotionStatisticByDate();
    }

    public void send_getEmotionStatisticByDate(int date) throws org.apache.thrift.TException
    {
      getEmotionStatisticByDate_args args = new getEmotionStatisticByDate_args();
      args.setDate(date);
      sendBase("getEmotionStatisticByDate", args);
    }

    public EmotionStatistic recv_getEmotionStatisticByDate() throws org.apache.thrift.TException
    {
      getEmotionStatisticByDate_result result = new getEmotionStatisticByDate_result();
      receiveBase(result, "getEmotionStatisticByDate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEmotionStatisticByDate failed: unknown result");
    }

    public boolean deleteAllEmotionInGroup(String groupEmotionId) throws org.apache.thrift.TException
    {
      send_deleteAllEmotionInGroup(groupEmotionId);
      return recv_deleteAllEmotionInGroup();
    }

    public void send_deleteAllEmotionInGroup(String groupEmotionId) throws org.apache.thrift.TException
    {
      deleteAllEmotionInGroup_args args = new deleteAllEmotionInGroup_args();
      args.setGroupEmotionId(groupEmotionId);
      sendBase("deleteAllEmotionInGroup", args);
    }

    public boolean recv_deleteAllEmotionInGroup() throws org.apache.thrift.TException
    {
      deleteAllEmotionInGroup_result result = new deleteAllEmotionInGroup_result();
      receiveBase(result, "deleteAllEmotionInGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteAllEmotionInGroup failed: unknown result");
    }

    public boolean deleteGroupEmotion(String groupEmotionId) throws org.apache.thrift.TException
    {
      send_deleteGroupEmotion(groupEmotionId);
      return recv_deleteGroupEmotion();
    }

    public void send_deleteGroupEmotion(String groupEmotionId) throws org.apache.thrift.TException
    {
      deleteGroupEmotion_args args = new deleteGroupEmotion_args();
      args.setGroupEmotionId(groupEmotionId);
      sendBase("deleteGroupEmotion", args);
    }

    public boolean recv_deleteGroupEmotion() throws org.apache.thrift.TException
    {
      deleteGroupEmotion_result result = new deleteGroupEmotion_result();
      receiveBase(result, "deleteGroupEmotion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteGroupEmotion failed: unknown result");
    }

    public String addGroupEmotion(String groupEmotionName) throws org.apache.thrift.TException
    {
      send_addGroupEmotion(groupEmotionName);
      return recv_addGroupEmotion();
    }

    public void send_addGroupEmotion(String groupEmotionName) throws org.apache.thrift.TException
    {
      addGroupEmotion_args args = new addGroupEmotion_args();
      args.setGroupEmotionName(groupEmotionName);
      sendBase("addGroupEmotion", args);
    }

    public String recv_addGroupEmotion() throws org.apache.thrift.TException
    {
      addGroupEmotion_result result = new addGroupEmotion_result();
      receiveBase(result, "addGroupEmotion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addGroupEmotion failed: unknown result");
    }

    public String gelAllGroupEmotion() throws org.apache.thrift.TException
    {
      send_gelAllGroupEmotion();
      return recv_gelAllGroupEmotion();
    }

    public void send_gelAllGroupEmotion() throws org.apache.thrift.TException
    {
      gelAllGroupEmotion_args args = new gelAllGroupEmotion_args();
      sendBase("gelAllGroupEmotion", args);
    }

    public String recv_gelAllGroupEmotion() throws org.apache.thrift.TException
    {
      gelAllGroupEmotion_result result = new gelAllGroupEmotion_result();
      receiveBase(result, "gelAllGroupEmotion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "gelAllGroupEmotion failed: unknown result");
    }

    public String loadAllEmotion() throws org.apache.thrift.TException
    {
      send_loadAllEmotion();
      return recv_loadAllEmotion();
    }

    public void send_loadAllEmotion() throws org.apache.thrift.TException
    {
      loadAllEmotion_args args = new loadAllEmotion_args();
      sendBase("loadAllEmotion", args);
    }

    public String recv_loadAllEmotion() throws org.apache.thrift.TException
    {
      loadAllEmotion_result result = new loadAllEmotion_result();
      receiveBase(result, "loadAllEmotion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loadAllEmotion failed: unknown result");
    }

    public String getEmotionWithGroup(String groupId) throws org.apache.thrift.TException
    {
      send_getEmotionWithGroup(groupId);
      return recv_getEmotionWithGroup();
    }

    public void send_getEmotionWithGroup(String groupId) throws org.apache.thrift.TException
    {
      getEmotionWithGroup_args args = new getEmotionWithGroup_args();
      args.setGroupId(groupId);
      sendBase("getEmotionWithGroup", args);
    }

    public String recv_getEmotionWithGroup() throws org.apache.thrift.TException
    {
      getEmotionWithGroup_result result = new getEmotionWithGroup_result();
      receiveBase(result, "getEmotionWithGroup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEmotionWithGroup failed: unknown result");
    }

    public boolean checkImageEmotionExist(String imageStyle, String groupEmotionId) throws org.apache.thrift.TException
    {
      send_checkImageEmotionExist(imageStyle, groupEmotionId);
      return recv_checkImageEmotionExist();
    }

    public void send_checkImageEmotionExist(String imageStyle, String groupEmotionId) throws org.apache.thrift.TException
    {
      checkImageEmotionExist_args args = new checkImageEmotionExist_args();
      args.setImageStyle(imageStyle);
      args.setGroupEmotionId(groupEmotionId);
      sendBase("checkImageEmotionExist", args);
    }

    public boolean recv_checkImageEmotionExist() throws org.apache.thrift.TException
    {
      checkImageEmotionExist_result result = new checkImageEmotionExist_result();
      receiveBase(result, "checkImageEmotionExist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkImageEmotionExist failed: unknown result");
    }

    public boolean sendMessageInternal(MsgItem msgItem, boolean messageOnline) throws org.apache.thrift.TException
    {
      send_sendMessageInternal(msgItem, messageOnline);
      return recv_sendMessageInternal();
    }

    public void send_sendMessageInternal(MsgItem msgItem, boolean messageOnline) throws org.apache.thrift.TException
    {
      sendMessageInternal_args args = new sendMessageInternal_args();
      args.setMsgItem(msgItem);
      args.setMessageOnline(messageOnline);
      sendBase("sendMessageInternal", args);
    }

    public boolean recv_sendMessageInternal() throws org.apache.thrift.TException
    {
      sendMessageInternal_result result = new sendMessageInternal_result();
      receiveBase(result, "sendMessageInternal");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendMessageInternal failed: unknown result");
    }

    public void saveListMsgId(List<Long> listMsgId) throws org.apache.thrift.TException
    {
      send_saveListMsgId(listMsgId);
      recv_saveListMsgId();
    }

    public void send_saveListMsgId(List<Long> listMsgId) throws org.apache.thrift.TException
    {
      saveListMsgId_args args = new saveListMsgId_args();
      args.setListMsgId(listMsgId);
      sendBase("saveListMsgId", args);
    }

    public void recv_saveListMsgId() throws org.apache.thrift.TException
    {
      saveListMsgId_result result = new saveListMsgId_result();
      receiveBase(result, "saveListMsgId");
      return;
    }

    public void saveOfflineMsgNotify(String userId) throws org.apache.thrift.TException
    {
      send_saveOfflineMsgNotify(userId);
      recv_saveOfflineMsgNotify();
    }

    public void send_saveOfflineMsgNotify(String userId) throws org.apache.thrift.TException
    {
      saveOfflineMsgNotify_args args = new saveOfflineMsgNotify_args();
      args.setUserId(userId);
      sendBase("saveOfflineMsgNotify", args);
    }

    public void recv_saveOfflineMsgNotify() throws org.apache.thrift.TException
    {
      saveOfflineMsgNotify_result result = new saveOfflineMsgNotify_result();
      receiveBase(result, "saveOfflineMsgNotify");
      return;
    }

    public List<MsgItem> getMessageList(String userId1, String userId2, int totalMsg) throws org.apache.thrift.TException
    {
      send_getMessageList(userId1, userId2, totalMsg);
      return recv_getMessageList();
    }

    public void send_getMessageList(String userId1, String userId2, int totalMsg) throws org.apache.thrift.TException
    {
      getMessageList_args args = new getMessageList_args();
      args.setUserId1(userId1);
      args.setUserId2(userId2);
      args.setTotalMsg(totalMsg);
      sendBase("getMessageList", args);
    }

    public List<MsgItem> recv_getMessageList() throws org.apache.thrift.TException
    {
      getMessageList_result result = new getMessageList_result();
      receiveBase(result, "getMessageList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMessageList failed: unknown result");
    }

    public List<Long> getMessageIdList(String userId1, String userId2, int totalMsg) throws org.apache.thrift.TException
    {
      send_getMessageIdList(userId1, userId2, totalMsg);
      return recv_getMessageIdList();
    }

    public void send_getMessageIdList(String userId1, String userId2, int totalMsg) throws org.apache.thrift.TException
    {
      getMessageIdList_args args = new getMessageIdList_args();
      args.setUserId1(userId1);
      args.setUserId2(userId2);
      args.setTotalMsg(totalMsg);
      sendBase("getMessageIdList", args);
    }

    public List<Long> recv_getMessageIdList() throws org.apache.thrift.TException
    {
      getMessageIdList_result result = new getMessageIdList_result();
      receiveBase(result, "getMessageIdList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMessageIdList failed: unknown result");
    }

    public MsgItem getMessageItem(String userId1, String userId2, long MsgId) throws org.apache.thrift.TException
    {
      send_getMessageItem(userId1, userId2, MsgId);
      return recv_getMessageItem();
    }

    public void send_getMessageItem(String userId1, String userId2, long MsgId) throws org.apache.thrift.TException
    {
      getMessageItem_args args = new getMessageItem_args();
      args.setUserId1(userId1);
      args.setUserId2(userId2);
      args.setMsgId(MsgId);
      sendBase("getMessageItem", args);
    }

    public MsgItem recv_getMessageItem() throws org.apache.thrift.TException
    {
      getMessageItem_result result = new getMessageItem_result();
      receiveBase(result, "getMessageItem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMessageItem failed: unknown result");
    }

    public void saveRoomMsg(MsgItem msg, String roomId) throws org.apache.thrift.TException
    {
      send_saveRoomMsg(msg, roomId);
      recv_saveRoomMsg();
    }

    public void send_saveRoomMsg(MsgItem msg, String roomId) throws org.apache.thrift.TException
    {
      saveRoomMsg_args args = new saveRoomMsg_args();
      args.setMsg(msg);
      args.setRoomId(roomId);
      sendBase("saveRoomMsg", args);
    }

    public void recv_saveRoomMsg() throws org.apache.thrift.TException
    {
      saveRoomMsg_result result = new saveRoomMsg_result();
      receiveBase(result, "saveRoomMsg");
      return;
    }

    public List<MsgItem> getRoomMsg(String roomId) throws org.apache.thrift.TException
    {
      send_getRoomMsg(roomId);
      return recv_getRoomMsg();
    }

    public void send_getRoomMsg(String roomId) throws org.apache.thrift.TException
    {
      getRoomMsg_args args = new getRoomMsg_args();
      args.setRoomId(roomId);
      sendBase("getRoomMsg", args);
    }

    public List<MsgItem> recv_getRoomMsg() throws org.apache.thrift.TException
    {
      getRoomMsg_result result = new getRoomMsg_result();
      receiveBase(result, "getRoomMsg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRoomMsg failed: unknown result");
    }

    public List<UserItem> getUserInRoom(String roomId) throws org.apache.thrift.TException
    {
      send_getUserInRoom(roomId);
      return recv_getUserInRoom();
    }

    public void send_getUserInRoom(String roomId) throws org.apache.thrift.TException
    {
      getUserInRoom_args args = new getUserInRoom_args();
      args.setRoomId(roomId);
      sendBase("getUserInRoom", args);
    }

    public List<UserItem> recv_getUserInRoom() throws org.apache.thrift.TException
    {
      getUserInRoom_result result = new getUserInRoom_result();
      receiveBase(result, "getUserInRoom");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserInRoom failed: unknown result");
    }

    public UserItem getUserProfile(String userId) throws org.apache.thrift.TException
    {
      send_getUserProfile(userId);
      return recv_getUserProfile();
    }

    public void send_getUserProfile(String userId) throws org.apache.thrift.TException
    {
      getUserProfile_args args = new getUserProfile_args();
      args.setUserId(userId);
      sendBase("getUserProfile", args);
    }

    public UserItem recv_getUserProfile() throws org.apache.thrift.TException
    {
      getUserProfile_result result = new getUserProfile_result();
      receiveBase(result, "getUserProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserProfile failed: unknown result");
    }

    public List<UserItem> getFriendList(String userId) throws org.apache.thrift.TException
    {
      send_getFriendList(userId);
      return recv_getFriendList();
    }

    public void send_getFriendList(String userId) throws org.apache.thrift.TException
    {
      getFriendList_args args = new getFriendList_args();
      args.setUserId(userId);
      sendBase("getFriendList", args);
    }

    public List<UserItem> recv_getFriendList() throws org.apache.thrift.TException
    {
      getFriendList_result result = new getFriendList_result();
      receiveBase(result, "getFriendList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFriendList failed: unknown result");
    }

    public long getNewMsgId() throws org.apache.thrift.TException
    {
      send_getNewMsgId();
      return recv_getNewMsgId();
    }

    public void send_getNewMsgId() throws org.apache.thrift.TException
    {
      getNewMsgId_args args = new getNewMsgId_args();
      sendBase("getNewMsgId", args);
    }

    public long recv_getNewMsgId() throws org.apache.thrift.TException
    {
      getNewMsgId_result result = new getNewMsgId_result();
      receiveBase(result, "getNewMsgId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getNewMsgId failed: unknown result");
    }

    public void notifyUserOnline(String userId) throws org.apache.thrift.TException
    {
      send_notifyUserOnline(userId);
      recv_notifyUserOnline();
    }

    public void send_notifyUserOnline(String userId) throws org.apache.thrift.TException
    {
      notifyUserOnline_args args = new notifyUserOnline_args();
      args.setUserId(userId);
      sendBase("notifyUserOnline", args);
    }

    public void recv_notifyUserOnline() throws org.apache.thrift.TException
    {
      notifyUserOnline_result result = new notifyUserOnline_result();
      receiveBase(result, "notifyUserOnline");
      return;
    }

    public void notifyListUserOffline(List<String> listUserIdOffline) throws org.apache.thrift.TException
    {
      send_notifyListUserOffline(listUserIdOffline);
      recv_notifyListUserOffline();
    }

    public void send_notifyListUserOffline(List<String> listUserIdOffline) throws org.apache.thrift.TException
    {
      notifyListUserOffline_args args = new notifyListUserOffline_args();
      args.setListUserIdOffline(listUserIdOffline);
      sendBase("notifyListUserOffline", args);
    }

    public void recv_notifyListUserOffline() throws org.apache.thrift.TException
    {
      notifyListUserOffline_result result = new notifyListUserOffline_result();
      receiveBase(result, "notifyListUserOffline");
      return;
    }

    public List<Boolean> checkFriendOnline(List<String> listFriendId) throws org.apache.thrift.TException
    {
      send_checkFriendOnline(listFriendId);
      return recv_checkFriendOnline();
    }

    public void send_checkFriendOnline(List<String> listFriendId) throws org.apache.thrift.TException
    {
      checkFriendOnline_args args = new checkFriendOnline_args();
      args.setListFriendId(listFriendId);
      sendBase("checkFriendOnline", args);
    }

    public List<Boolean> recv_checkFriendOnline() throws org.apache.thrift.TException
    {
      checkFriendOnline_result result = new checkFriendOnline_result();
      receiveBase(result, "checkFriendOnline");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkFriendOnline failed: unknown result");
    }

    public String getFriendListZalo(String userId, String oAuthCode) throws org.apache.thrift.TException
    {
      send_getFriendListZalo(userId, oAuthCode);
      return recv_getFriendListZalo();
    }

    public void send_getFriendListZalo(String userId, String oAuthCode) throws org.apache.thrift.TException
    {
      getFriendListZalo_args args = new getFriendListZalo_args();
      args.setUserId(userId);
      args.setOAuthCode(oAuthCode);
      sendBase("getFriendListZalo", args);
    }

    public String recv_getFriendListZalo() throws org.apache.thrift.TException
    {
      getFriendListZalo_result result = new getFriendListZalo_result();
      receiveBase(result, "getFriendListZalo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFriendListZalo failed: unknown result");
    }

    public String getProfileZalo(String userId, String oAuthCode) throws org.apache.thrift.TException
    {
      send_getProfileZalo(userId, oAuthCode);
      return recv_getProfileZalo();
    }

    public void send_getProfileZalo(String userId, String oAuthCode) throws org.apache.thrift.TException
    {
      getProfileZalo_args args = new getProfileZalo_args();
      args.setUserId(userId);
      args.setOAuthCode(oAuthCode);
      sendBase("getProfileZalo", args);
    }

    public String recv_getProfileZalo() throws org.apache.thrift.TException
    {
      getProfileZalo_result result = new getProfileZalo_result();
      receiveBase(result, "getProfileZalo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProfileZalo failed: unknown result");
    }

    public void setLogin(String sessionId) throws org.apache.thrift.TException
    {
      send_setLogin(sessionId);
      recv_setLogin();
    }

    public void send_setLogin(String sessionId) throws org.apache.thrift.TException
    {
      setLogin_args args = new setLogin_args();
      args.setSessionId(sessionId);
      sendBase("setLogin", args);
    }

    public void recv_setLogin() throws org.apache.thrift.TException
    {
      setLogin_result result = new setLogin_result();
      receiveBase(result, "setLogin");
      return;
    }

    public boolean isLogin(String sessionId) throws org.apache.thrift.TException
    {
      send_isLogin(sessionId);
      return recv_isLogin();
    }

    public void send_isLogin(String sessionId) throws org.apache.thrift.TException
    {
      isLogin_args args = new isLogin_args();
      args.setSessionId(sessionId);
      sendBase("isLogin", args);
    }

    public boolean recv_isLogin() throws org.apache.thrift.TException
    {
      isLogin_result result = new isLogin_result();
      receiveBase(result, "isLogin");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isLogin failed: unknown result");
    }

    public void setLogout(String sessionId) throws org.apache.thrift.TException
    {
      send_setLogout(sessionId);
      recv_setLogout();
    }

    public void send_setLogout(String sessionId) throws org.apache.thrift.TException
    {
      setLogout_args args = new setLogout_args();
      args.setSessionId(sessionId);
      sendBase("setLogout", args);
    }

    public void recv_setLogout() throws org.apache.thrift.TException
    {
      setLogout_result result = new setLogout_result();
      receiveBase(result, "setLogout");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAllChatRoom(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllChatRoom_call method_call = new getAllChatRoom_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllChatRoom_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAllChatRoom_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllChatRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllChatRoom_args args = new getAllChatRoom_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<RoomItem> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllChatRoom();
      }
    }

    public void getListUserInRoom(String roomId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getListUserInRoom_call method_call = new getListUserInRoom_call(roomId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getListUserInRoom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String roomId;
      public getListUserInRoom_call(String roomId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roomId = roomId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getListUserInRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getListUserInRoom_args args = new getListUserInRoom_args();
        args.setRoomId(roomId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<UserItem> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getListUserInRoom();
      }
    }

    public void getAllEmotionGroup(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllEmotionGroup_call method_call = new getAllEmotionGroup_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllEmotionGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAllEmotionGroup_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllEmotionGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllEmotionGroup_args args = new getAllEmotionGroup_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<GroupEmotion> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllEmotionGroup();
      }
    }

    public void getEmotionGroup(String emotionGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEmotionGroup_call method_call = new getEmotionGroup_call(emotionGroupId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEmotionGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String emotionGroupId;
      public getEmotionGroup_call(String emotionGroupId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.emotionGroupId = emotionGroupId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEmotionGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEmotionGroup_args args = new getEmotionGroup_args();
        args.setEmotionGroupId(emotionGroupId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public GroupEmotion getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEmotionGroup();
      }
    }

    public void addRoom(RoomItem newRoom, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRoom_call method_call = new addRoom_call(newRoom, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRoom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RoomItem newRoom;
      public addRoom_call(RoomItem newRoom, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newRoom = newRoom;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRoom_args args = new addRoom_args();
        args.setNewRoom(newRoom);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addRoom();
      }
    }

    public void editRoom(RoomItem room, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editRoom_call method_call = new editRoom_call(room, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editRoom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RoomItem room;
      public editRoom_call(RoomItem room, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.room = room;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editRoom_args args = new editRoom_args();
        args.setRoom(room);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_editRoom();
      }
    }

    public void deleteRoom(String roomId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteRoom_call method_call = new deleteRoom_call(roomId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteRoom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String roomId;
      public deleteRoom_call(String roomId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roomId = roomId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteRoom_args args = new deleteRoom_args();
        args.setRoomId(roomId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteRoom();
      }
    }

    public void addEmotion(String emotionItem, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addEmotion_call method_call = new addEmotion_call(emotionItem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addEmotion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String emotionItem;
      public addEmotion_call(String emotionItem, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.emotionItem = emotionItem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addEmotion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addEmotion_args args = new addEmotion_args();
        args.setEmotionItem(emotionItem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addEmotion();
      }
    }

    public void editEmotion(String emotionId, EmotionItem emotionItem, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      editEmotion_call method_call = new editEmotion_call(emotionId, emotionItem, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class editEmotion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String emotionId;
      private EmotionItem emotionItem;
      public editEmotion_call(String emotionId, EmotionItem emotionItem, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.emotionId = emotionId;
        this.emotionItem = emotionItem;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("editEmotion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        editEmotion_args args = new editEmotion_args();
        args.setEmotionId(emotionId);
        args.setEmotionItem(emotionItem);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_editEmotion();
      }
    }

    public void deleteEmotion(String emotionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteEmotion_call method_call = new deleteEmotion_call(emotionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteEmotion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String emotionId;
      public deleteEmotion_call(String emotionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.emotionId = emotionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteEmotion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteEmotion_args args = new deleteEmotion_args();
        args.setEmotionId(emotionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_deleteEmotion();
      }
    }

    public void kickUser(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      kickUser_call method_call = new kickUser_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class kickUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      public kickUser_call(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("kickUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        kickUser_args args = new kickUser_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_kickUser();
      }
    }

    public void getRoomStatisticByDate(int date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRoomStatisticByDate_call method_call = new getRoomStatisticByDate_call(date, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRoomStatisticByDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int date;
      public getRoomStatisticByDate_call(int date, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.date = date;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRoomStatisticByDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRoomStatisticByDate_args args = new getRoomStatisticByDate_args();
        args.setDate(date);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RoomStatistic getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRoomStatisticByDate();
      }
    }

    public void getEmotionStatisticByDate(int date, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEmotionStatisticByDate_call method_call = new getEmotionStatisticByDate_call(date, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEmotionStatisticByDate_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int date;
      public getEmotionStatisticByDate_call(int date, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.date = date;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEmotionStatisticByDate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEmotionStatisticByDate_args args = new getEmotionStatisticByDate_args();
        args.setDate(date);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EmotionStatistic getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEmotionStatisticByDate();
      }
    }

    public void deleteAllEmotionInGroup(String groupEmotionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteAllEmotionInGroup_call method_call = new deleteAllEmotionInGroup_call(groupEmotionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteAllEmotionInGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String groupEmotionId;
      public deleteAllEmotionInGroup_call(String groupEmotionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupEmotionId = groupEmotionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteAllEmotionInGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteAllEmotionInGroup_args args = new deleteAllEmotionInGroup_args();
        args.setGroupEmotionId(groupEmotionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteAllEmotionInGroup();
      }
    }

    public void deleteGroupEmotion(String groupEmotionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteGroupEmotion_call method_call = new deleteGroupEmotion_call(groupEmotionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteGroupEmotion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String groupEmotionId;
      public deleteGroupEmotion_call(String groupEmotionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupEmotionId = groupEmotionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteGroupEmotion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteGroupEmotion_args args = new deleteGroupEmotion_args();
        args.setGroupEmotionId(groupEmotionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteGroupEmotion();
      }
    }

    public void addGroupEmotion(String groupEmotionName, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addGroupEmotion_call method_call = new addGroupEmotion_call(groupEmotionName, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addGroupEmotion_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String groupEmotionName;
      public addGroupEmotion_call(String groupEmotionName, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupEmotionName = groupEmotionName;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addGroupEmotion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addGroupEmotion_args args = new addGroupEmotion_args();
        args.setGroupEmotionName(groupEmotionName);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addGroupEmotion();
      }
    }

    public void gelAllGroupEmotion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      gelAllGroupEmotion_call method_call = new gelAllGroupEmotion_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class gelAllGroupEmotion_call extends org.apache.thrift.async.TAsyncMethodCall {
      public gelAllGroupEmotion_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("gelAllGroupEmotion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        gelAllGroupEmotion_args args = new gelAllGroupEmotion_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_gelAllGroupEmotion();
      }
    }

    public void loadAllEmotion(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loadAllEmotion_call method_call = new loadAllEmotion_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loadAllEmotion_call extends org.apache.thrift.async.TAsyncMethodCall {
      public loadAllEmotion_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loadAllEmotion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loadAllEmotion_args args = new loadAllEmotion_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loadAllEmotion();
      }
    }

    public void getEmotionWithGroup(String groupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEmotionWithGroup_call method_call = new getEmotionWithGroup_call(groupId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEmotionWithGroup_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String groupId;
      public getEmotionWithGroup_call(String groupId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.groupId = groupId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEmotionWithGroup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEmotionWithGroup_args args = new getEmotionWithGroup_args();
        args.setGroupId(groupId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEmotionWithGroup();
      }
    }

    public void checkImageEmotionExist(String imageStyle, String groupEmotionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkImageEmotionExist_call method_call = new checkImageEmotionExist_call(imageStyle, groupEmotionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkImageEmotionExist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String imageStyle;
      private String groupEmotionId;
      public checkImageEmotionExist_call(String imageStyle, String groupEmotionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.imageStyle = imageStyle;
        this.groupEmotionId = groupEmotionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkImageEmotionExist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkImageEmotionExist_args args = new checkImageEmotionExist_args();
        args.setImageStyle(imageStyle);
        args.setGroupEmotionId(groupEmotionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkImageEmotionExist();
      }
    }

    public void sendMessageInternal(MsgItem msgItem, boolean messageOnline, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendMessageInternal_call method_call = new sendMessageInternal_call(msgItem, messageOnline, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendMessageInternal_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MsgItem msgItem;
      private boolean messageOnline;
      public sendMessageInternal_call(MsgItem msgItem, boolean messageOnline, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msgItem = msgItem;
        this.messageOnline = messageOnline;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendMessageInternal", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendMessageInternal_args args = new sendMessageInternal_args();
        args.setMsgItem(msgItem);
        args.setMessageOnline(messageOnline);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendMessageInternal();
      }
    }

    public void saveListMsgId(List<Long> listMsgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveListMsgId_call method_call = new saveListMsgId_call(listMsgId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveListMsgId_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<Long> listMsgId;
      public saveListMsgId_call(List<Long> listMsgId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listMsgId = listMsgId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveListMsgId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveListMsgId_args args = new saveListMsgId_args();
        args.setListMsgId(listMsgId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveListMsgId();
      }
    }

    public void saveOfflineMsgNotify(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveOfflineMsgNotify_call method_call = new saveOfflineMsgNotify_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveOfflineMsgNotify_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      public saveOfflineMsgNotify_call(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveOfflineMsgNotify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveOfflineMsgNotify_args args = new saveOfflineMsgNotify_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveOfflineMsgNotify();
      }
    }

    public void getMessageList(String userId1, String userId2, int totalMsg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMessageList_call method_call = new getMessageList_call(userId1, userId2, totalMsg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMessageList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId1;
      private String userId2;
      private int totalMsg;
      public getMessageList_call(String userId1, String userId2, int totalMsg, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId1 = userId1;
        this.userId2 = userId2;
        this.totalMsg = totalMsg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMessageList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMessageList_args args = new getMessageList_args();
        args.setUserId1(userId1);
        args.setUserId2(userId2);
        args.setTotalMsg(totalMsg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<MsgItem> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMessageList();
      }
    }

    public void getMessageIdList(String userId1, String userId2, int totalMsg, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMessageIdList_call method_call = new getMessageIdList_call(userId1, userId2, totalMsg, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMessageIdList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId1;
      private String userId2;
      private int totalMsg;
      public getMessageIdList_call(String userId1, String userId2, int totalMsg, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId1 = userId1;
        this.userId2 = userId2;
        this.totalMsg = totalMsg;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMessageIdList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMessageIdList_args args = new getMessageIdList_args();
        args.setUserId1(userId1);
        args.setUserId2(userId2);
        args.setTotalMsg(totalMsg);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMessageIdList();
      }
    }

    public void getMessageItem(String userId1, String userId2, long MsgId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMessageItem_call method_call = new getMessageItem_call(userId1, userId2, MsgId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMessageItem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId1;
      private String userId2;
      private long MsgId;
      public getMessageItem_call(String userId1, String userId2, long MsgId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId1 = userId1;
        this.userId2 = userId2;
        this.MsgId = MsgId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMessageItem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMessageItem_args args = new getMessageItem_args();
        args.setUserId1(userId1);
        args.setUserId2(userId2);
        args.setMsgId(MsgId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MsgItem getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMessageItem();
      }
    }

    public void saveRoomMsg(MsgItem msg, String roomId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveRoomMsg_call method_call = new saveRoomMsg_call(msg, roomId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveRoomMsg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MsgItem msg;
      private String roomId;
      public saveRoomMsg_call(MsgItem msg, String roomId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.msg = msg;
        this.roomId = roomId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveRoomMsg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveRoomMsg_args args = new saveRoomMsg_args();
        args.setMsg(msg);
        args.setRoomId(roomId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_saveRoomMsg();
      }
    }

    public void getRoomMsg(String roomId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRoomMsg_call method_call = new getRoomMsg_call(roomId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRoomMsg_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String roomId;
      public getRoomMsg_call(String roomId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roomId = roomId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRoomMsg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRoomMsg_args args = new getRoomMsg_args();
        args.setRoomId(roomId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<MsgItem> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRoomMsg();
      }
    }

    public void getUserInRoom(String roomId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserInRoom_call method_call = new getUserInRoom_call(roomId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserInRoom_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String roomId;
      public getUserInRoom_call(String roomId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.roomId = roomId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserInRoom", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserInRoom_args args = new getUserInRoom_args();
        args.setRoomId(roomId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<UserItem> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserInRoom();
      }
    }

    public void getUserProfile(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserProfile_call method_call = new getUserProfile_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      public getUserProfile_call(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserProfile_args args = new getUserProfile_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserItem getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserProfile();
      }
    }

    public void getFriendList(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFriendList_call method_call = new getFriendList_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFriendList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      public getFriendList_call(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFriendList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFriendList_args args = new getFriendList_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<UserItem> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFriendList();
      }
    }

    public void getNewMsgId(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getNewMsgId_call method_call = new getNewMsgId_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getNewMsgId_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getNewMsgId_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getNewMsgId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getNewMsgId_args args = new getNewMsgId_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getNewMsgId();
      }
    }

    public void notifyUserOnline(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyUserOnline_call method_call = new notifyUserOnline_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyUserOnline_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      public notifyUserOnline_call(String userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyUserOnline", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyUserOnline_args args = new notifyUserOnline_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_notifyUserOnline();
      }
    }

    public void notifyListUserOffline(List<String> listUserIdOffline, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyListUserOffline_call method_call = new notifyListUserOffline_call(listUserIdOffline, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyListUserOffline_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> listUserIdOffline;
      public notifyListUserOffline_call(List<String> listUserIdOffline, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listUserIdOffline = listUserIdOffline;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyListUserOffline", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyListUserOffline_args args = new notifyListUserOffline_args();
        args.setListUserIdOffline(listUserIdOffline);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_notifyListUserOffline();
      }
    }

    public void checkFriendOnline(List<String> listFriendId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkFriendOnline_call method_call = new checkFriendOnline_call(listFriendId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkFriendOnline_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<String> listFriendId;
      public checkFriendOnline_call(List<String> listFriendId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.listFriendId = listFriendId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkFriendOnline", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkFriendOnline_args args = new checkFriendOnline_args();
        args.setListFriendId(listFriendId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Boolean> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkFriendOnline();
      }
    }

    public void getFriendListZalo(String userId, String oAuthCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFriendListZalo_call method_call = new getFriendListZalo_call(userId, oAuthCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFriendListZalo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      private String oAuthCode;
      public getFriendListZalo_call(String userId, String oAuthCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.oAuthCode = oAuthCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFriendListZalo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFriendListZalo_args args = new getFriendListZalo_args();
        args.setUserId(userId);
        args.setOAuthCode(oAuthCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFriendListZalo();
      }
    }

    public void getProfileZalo(String userId, String oAuthCode, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProfileZalo_call method_call = new getProfileZalo_call(userId, oAuthCode, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProfileZalo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String userId;
      private String oAuthCode;
      public getProfileZalo_call(String userId, String oAuthCode, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.oAuthCode = oAuthCode;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProfileZalo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProfileZalo_args args = new getProfileZalo_args();
        args.setUserId(userId);
        args.setOAuthCode(oAuthCode);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProfileZalo();
      }
    }

    public void setLogin(String sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setLogin_call method_call = new setLogin_call(sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setLogin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      public setLogin_call(String sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setLogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setLogin_args args = new setLogin_args();
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setLogin();
      }
    }

    public void isLogin(String sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isLogin_call method_call = new isLogin_call(sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isLogin_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      public isLogin_call(String sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isLogin", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isLogin_args args = new isLogin_args();
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isLogin();
      }
    }

    public void setLogout(String sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setLogout_call method_call = new setLogout_call(sessionId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setLogout_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String sessionId;
      public setLogout_call(String sessionId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sessionId = sessionId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setLogout", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setLogout_args args = new setLogout_args();
        args.setSessionId(sessionId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_setLogout();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAllChatRoom", new getAllChatRoom());
      processMap.put("getListUserInRoom", new getListUserInRoom());
      processMap.put("getAllEmotionGroup", new getAllEmotionGroup());
      processMap.put("getEmotionGroup", new getEmotionGroup());
      processMap.put("addRoom", new addRoom());
      processMap.put("editRoom", new editRoom());
      processMap.put("deleteRoom", new deleteRoom());
      processMap.put("addEmotion", new addEmotion());
      processMap.put("editEmotion", new editEmotion());
      processMap.put("deleteEmotion", new deleteEmotion());
      processMap.put("kickUser", new kickUser());
      processMap.put("getRoomStatisticByDate", new getRoomStatisticByDate());
      processMap.put("getEmotionStatisticByDate", new getEmotionStatisticByDate());
      processMap.put("deleteAllEmotionInGroup", new deleteAllEmotionInGroup());
      processMap.put("deleteGroupEmotion", new deleteGroupEmotion());
      processMap.put("addGroupEmotion", new addGroupEmotion());
      processMap.put("gelAllGroupEmotion", new gelAllGroupEmotion());
      processMap.put("loadAllEmotion", new loadAllEmotion());
      processMap.put("getEmotionWithGroup", new getEmotionWithGroup());
      processMap.put("checkImageEmotionExist", new checkImageEmotionExist());
      processMap.put("sendMessageInternal", new sendMessageInternal());
      processMap.put("saveListMsgId", new saveListMsgId());
      processMap.put("saveOfflineMsgNotify", new saveOfflineMsgNotify());
      processMap.put("getMessageList", new getMessageList());
      processMap.put("getMessageIdList", new getMessageIdList());
      processMap.put("getMessageItem", new getMessageItem());
      processMap.put("saveRoomMsg", new saveRoomMsg());
      processMap.put("getRoomMsg", new getRoomMsg());
      processMap.put("getUserInRoom", new getUserInRoom());
      processMap.put("getUserProfile", new getUserProfile());
      processMap.put("getFriendList", new getFriendList());
      processMap.put("getNewMsgId", new getNewMsgId());
      processMap.put("notifyUserOnline", new notifyUserOnline());
      processMap.put("notifyListUserOffline", new notifyListUserOffline());
      processMap.put("checkFriendOnline", new checkFriendOnline());
      processMap.put("getFriendListZalo", new getFriendListZalo());
      processMap.put("getProfileZalo", new getProfileZalo());
      processMap.put("setLogin", new setLogin());
      processMap.put("isLogin", new isLogin());
      processMap.put("setLogout", new setLogout());
      return processMap;
    }

    public static class getAllChatRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllChatRoom_args> {
      public getAllChatRoom() {
        super("getAllChatRoom");
      }

      public getAllChatRoom_args getEmptyArgsInstance() {
        return new getAllChatRoom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllChatRoom_result getResult(I iface, getAllChatRoom_args args) throws org.apache.thrift.TException {
        getAllChatRoom_result result = new getAllChatRoom_result();
        result.success = iface.getAllChatRoom();
        return result;
      }
    }

    public static class getListUserInRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getListUserInRoom_args> {
      public getListUserInRoom() {
        super("getListUserInRoom");
      }

      public getListUserInRoom_args getEmptyArgsInstance() {
        return new getListUserInRoom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getListUserInRoom_result getResult(I iface, getListUserInRoom_args args) throws org.apache.thrift.TException {
        getListUserInRoom_result result = new getListUserInRoom_result();
        result.success = iface.getListUserInRoom(args.roomId);
        return result;
      }
    }

    public static class getAllEmotionGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllEmotionGroup_args> {
      public getAllEmotionGroup() {
        super("getAllEmotionGroup");
      }

      public getAllEmotionGroup_args getEmptyArgsInstance() {
        return new getAllEmotionGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllEmotionGroup_result getResult(I iface, getAllEmotionGroup_args args) throws org.apache.thrift.TException {
        getAllEmotionGroup_result result = new getAllEmotionGroup_result();
        result.success = iface.getAllEmotionGroup();
        return result;
      }
    }

    public static class getEmotionGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEmotionGroup_args> {
      public getEmotionGroup() {
        super("getEmotionGroup");
      }

      public getEmotionGroup_args getEmptyArgsInstance() {
        return new getEmotionGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEmotionGroup_result getResult(I iface, getEmotionGroup_args args) throws org.apache.thrift.TException {
        getEmotionGroup_result result = new getEmotionGroup_result();
        result.success = iface.getEmotionGroup(args.emotionGroupId);
        return result;
      }
    }

    public static class addRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRoom_args> {
      public addRoom() {
        super("addRoom");
      }

      public addRoom_args getEmptyArgsInstance() {
        return new addRoom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRoom_result getResult(I iface, addRoom_args args) throws org.apache.thrift.TException {
        addRoom_result result = new addRoom_result();
        iface.addRoom(args.newRoom);
        return result;
      }
    }

    public static class editRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editRoom_args> {
      public editRoom() {
        super("editRoom");
      }

      public editRoom_args getEmptyArgsInstance() {
        return new editRoom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editRoom_result getResult(I iface, editRoom_args args) throws org.apache.thrift.TException {
        editRoom_result result = new editRoom_result();
        iface.editRoom(args.room);
        return result;
      }
    }

    public static class deleteRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteRoom_args> {
      public deleteRoom() {
        super("deleteRoom");
      }

      public deleteRoom_args getEmptyArgsInstance() {
        return new deleteRoom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteRoom_result getResult(I iface, deleteRoom_args args) throws org.apache.thrift.TException {
        deleteRoom_result result = new deleteRoom_result();
        iface.deleteRoom(args.roomId);
        return result;
      }
    }

    public static class addEmotion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addEmotion_args> {
      public addEmotion() {
        super("addEmotion");
      }

      public addEmotion_args getEmptyArgsInstance() {
        return new addEmotion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addEmotion_result getResult(I iface, addEmotion_args args) throws org.apache.thrift.TException {
        addEmotion_result result = new addEmotion_result();
        iface.addEmotion(args.emotionItem);
        return result;
      }
    }

    public static class editEmotion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, editEmotion_args> {
      public editEmotion() {
        super("editEmotion");
      }

      public editEmotion_args getEmptyArgsInstance() {
        return new editEmotion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public editEmotion_result getResult(I iface, editEmotion_args args) throws org.apache.thrift.TException {
        editEmotion_result result = new editEmotion_result();
        iface.editEmotion(args.emotionId, args.emotionItem);
        return result;
      }
    }

    public static class deleteEmotion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteEmotion_args> {
      public deleteEmotion() {
        super("deleteEmotion");
      }

      public deleteEmotion_args getEmptyArgsInstance() {
        return new deleteEmotion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteEmotion_result getResult(I iface, deleteEmotion_args args) throws org.apache.thrift.TException {
        deleteEmotion_result result = new deleteEmotion_result();
        iface.deleteEmotion(args.emotionId);
        return result;
      }
    }

    public static class kickUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, kickUser_args> {
      public kickUser() {
        super("kickUser");
      }

      public kickUser_args getEmptyArgsInstance() {
        return new kickUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public kickUser_result getResult(I iface, kickUser_args args) throws org.apache.thrift.TException {
        kickUser_result result = new kickUser_result();
        iface.kickUser(args.userId);
        return result;
      }
    }

    public static class getRoomStatisticByDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRoomStatisticByDate_args> {
      public getRoomStatisticByDate() {
        super("getRoomStatisticByDate");
      }

      public getRoomStatisticByDate_args getEmptyArgsInstance() {
        return new getRoomStatisticByDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRoomStatisticByDate_result getResult(I iface, getRoomStatisticByDate_args args) throws org.apache.thrift.TException {
        getRoomStatisticByDate_result result = new getRoomStatisticByDate_result();
        result.success = iface.getRoomStatisticByDate(args.date);
        return result;
      }
    }

    public static class getEmotionStatisticByDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEmotionStatisticByDate_args> {
      public getEmotionStatisticByDate() {
        super("getEmotionStatisticByDate");
      }

      public getEmotionStatisticByDate_args getEmptyArgsInstance() {
        return new getEmotionStatisticByDate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEmotionStatisticByDate_result getResult(I iface, getEmotionStatisticByDate_args args) throws org.apache.thrift.TException {
        getEmotionStatisticByDate_result result = new getEmotionStatisticByDate_result();
        result.success = iface.getEmotionStatisticByDate(args.date);
        return result;
      }
    }

    public static class deleteAllEmotionInGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAllEmotionInGroup_args> {
      public deleteAllEmotionInGroup() {
        super("deleteAllEmotionInGroup");
      }

      public deleteAllEmotionInGroup_args getEmptyArgsInstance() {
        return new deleteAllEmotionInGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteAllEmotionInGroup_result getResult(I iface, deleteAllEmotionInGroup_args args) throws org.apache.thrift.TException {
        deleteAllEmotionInGroup_result result = new deleteAllEmotionInGroup_result();
        result.success = iface.deleteAllEmotionInGroup(args.groupEmotionId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class deleteGroupEmotion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteGroupEmotion_args> {
      public deleteGroupEmotion() {
        super("deleteGroupEmotion");
      }

      public deleteGroupEmotion_args getEmptyArgsInstance() {
        return new deleteGroupEmotion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteGroupEmotion_result getResult(I iface, deleteGroupEmotion_args args) throws org.apache.thrift.TException {
        deleteGroupEmotion_result result = new deleteGroupEmotion_result();
        result.success = iface.deleteGroupEmotion(args.groupEmotionId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addGroupEmotion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addGroupEmotion_args> {
      public addGroupEmotion() {
        super("addGroupEmotion");
      }

      public addGroupEmotion_args getEmptyArgsInstance() {
        return new addGroupEmotion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addGroupEmotion_result getResult(I iface, addGroupEmotion_args args) throws org.apache.thrift.TException {
        addGroupEmotion_result result = new addGroupEmotion_result();
        result.success = iface.addGroupEmotion(args.groupEmotionName);
        return result;
      }
    }

    public static class gelAllGroupEmotion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, gelAllGroupEmotion_args> {
      public gelAllGroupEmotion() {
        super("gelAllGroupEmotion");
      }

      public gelAllGroupEmotion_args getEmptyArgsInstance() {
        return new gelAllGroupEmotion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public gelAllGroupEmotion_result getResult(I iface, gelAllGroupEmotion_args args) throws org.apache.thrift.TException {
        gelAllGroupEmotion_result result = new gelAllGroupEmotion_result();
        result.success = iface.gelAllGroupEmotion();
        return result;
      }
    }

    public static class loadAllEmotion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loadAllEmotion_args> {
      public loadAllEmotion() {
        super("loadAllEmotion");
      }

      public loadAllEmotion_args getEmptyArgsInstance() {
        return new loadAllEmotion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loadAllEmotion_result getResult(I iface, loadAllEmotion_args args) throws org.apache.thrift.TException {
        loadAllEmotion_result result = new loadAllEmotion_result();
        result.success = iface.loadAllEmotion();
        return result;
      }
    }

    public static class getEmotionWithGroup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEmotionWithGroup_args> {
      public getEmotionWithGroup() {
        super("getEmotionWithGroup");
      }

      public getEmotionWithGroup_args getEmptyArgsInstance() {
        return new getEmotionWithGroup_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEmotionWithGroup_result getResult(I iface, getEmotionWithGroup_args args) throws org.apache.thrift.TException {
        getEmotionWithGroup_result result = new getEmotionWithGroup_result();
        result.success = iface.getEmotionWithGroup(args.groupId);
        return result;
      }
    }

    public static class checkImageEmotionExist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkImageEmotionExist_args> {
      public checkImageEmotionExist() {
        super("checkImageEmotionExist");
      }

      public checkImageEmotionExist_args getEmptyArgsInstance() {
        return new checkImageEmotionExist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkImageEmotionExist_result getResult(I iface, checkImageEmotionExist_args args) throws org.apache.thrift.TException {
        checkImageEmotionExist_result result = new checkImageEmotionExist_result();
        result.success = iface.checkImageEmotionExist(args.imageStyle, args.groupEmotionId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class sendMessageInternal<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendMessageInternal_args> {
      public sendMessageInternal() {
        super("sendMessageInternal");
      }

      public sendMessageInternal_args getEmptyArgsInstance() {
        return new sendMessageInternal_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendMessageInternal_result getResult(I iface, sendMessageInternal_args args) throws org.apache.thrift.TException {
        sendMessageInternal_result result = new sendMessageInternal_result();
        result.success = iface.sendMessageInternal(args.msgItem, args.messageOnline);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class saveListMsgId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveListMsgId_args> {
      public saveListMsgId() {
        super("saveListMsgId");
      }

      public saveListMsgId_args getEmptyArgsInstance() {
        return new saveListMsgId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveListMsgId_result getResult(I iface, saveListMsgId_args args) throws org.apache.thrift.TException {
        saveListMsgId_result result = new saveListMsgId_result();
        iface.saveListMsgId(args.listMsgId);
        return result;
      }
    }

    public static class saveOfflineMsgNotify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveOfflineMsgNotify_args> {
      public saveOfflineMsgNotify() {
        super("saveOfflineMsgNotify");
      }

      public saveOfflineMsgNotify_args getEmptyArgsInstance() {
        return new saveOfflineMsgNotify_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveOfflineMsgNotify_result getResult(I iface, saveOfflineMsgNotify_args args) throws org.apache.thrift.TException {
        saveOfflineMsgNotify_result result = new saveOfflineMsgNotify_result();
        iface.saveOfflineMsgNotify(args.userId);
        return result;
      }
    }

    public static class getMessageList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMessageList_args> {
      public getMessageList() {
        super("getMessageList");
      }

      public getMessageList_args getEmptyArgsInstance() {
        return new getMessageList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMessageList_result getResult(I iface, getMessageList_args args) throws org.apache.thrift.TException {
        getMessageList_result result = new getMessageList_result();
        result.success = iface.getMessageList(args.userId1, args.userId2, args.totalMsg);
        return result;
      }
    }

    public static class getMessageIdList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMessageIdList_args> {
      public getMessageIdList() {
        super("getMessageIdList");
      }

      public getMessageIdList_args getEmptyArgsInstance() {
        return new getMessageIdList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMessageIdList_result getResult(I iface, getMessageIdList_args args) throws org.apache.thrift.TException {
        getMessageIdList_result result = new getMessageIdList_result();
        result.success = iface.getMessageIdList(args.userId1, args.userId2, args.totalMsg);
        return result;
      }
    }

    public static class getMessageItem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMessageItem_args> {
      public getMessageItem() {
        super("getMessageItem");
      }

      public getMessageItem_args getEmptyArgsInstance() {
        return new getMessageItem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMessageItem_result getResult(I iface, getMessageItem_args args) throws org.apache.thrift.TException {
        getMessageItem_result result = new getMessageItem_result();
        result.success = iface.getMessageItem(args.userId1, args.userId2, args.MsgId);
        return result;
      }
    }

    public static class saveRoomMsg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveRoomMsg_args> {
      public saveRoomMsg() {
        super("saveRoomMsg");
      }

      public saveRoomMsg_args getEmptyArgsInstance() {
        return new saveRoomMsg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveRoomMsg_result getResult(I iface, saveRoomMsg_args args) throws org.apache.thrift.TException {
        saveRoomMsg_result result = new saveRoomMsg_result();
        iface.saveRoomMsg(args.msg, args.roomId);
        return result;
      }
    }

    public static class getRoomMsg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRoomMsg_args> {
      public getRoomMsg() {
        super("getRoomMsg");
      }

      public getRoomMsg_args getEmptyArgsInstance() {
        return new getRoomMsg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRoomMsg_result getResult(I iface, getRoomMsg_args args) throws org.apache.thrift.TException {
        getRoomMsg_result result = new getRoomMsg_result();
        result.success = iface.getRoomMsg(args.roomId);
        return result;
      }
    }

    public static class getUserInRoom<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserInRoom_args> {
      public getUserInRoom() {
        super("getUserInRoom");
      }

      public getUserInRoom_args getEmptyArgsInstance() {
        return new getUserInRoom_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserInRoom_result getResult(I iface, getUserInRoom_args args) throws org.apache.thrift.TException {
        getUserInRoom_result result = new getUserInRoom_result();
        result.success = iface.getUserInRoom(args.roomId);
        return result;
      }
    }

    public static class getUserProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserProfile_args> {
      public getUserProfile() {
        super("getUserProfile");
      }

      public getUserProfile_args getEmptyArgsInstance() {
        return new getUserProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserProfile_result getResult(I iface, getUserProfile_args args) throws org.apache.thrift.TException {
        getUserProfile_result result = new getUserProfile_result();
        result.success = iface.getUserProfile(args.userId);
        return result;
      }
    }

    public static class getFriendList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFriendList_args> {
      public getFriendList() {
        super("getFriendList");
      }

      public getFriendList_args getEmptyArgsInstance() {
        return new getFriendList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFriendList_result getResult(I iface, getFriendList_args args) throws org.apache.thrift.TException {
        getFriendList_result result = new getFriendList_result();
        result.success = iface.getFriendList(args.userId);
        return result;
      }
    }

    public static class getNewMsgId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getNewMsgId_args> {
      public getNewMsgId() {
        super("getNewMsgId");
      }

      public getNewMsgId_args getEmptyArgsInstance() {
        return new getNewMsgId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getNewMsgId_result getResult(I iface, getNewMsgId_args args) throws org.apache.thrift.TException {
        getNewMsgId_result result = new getNewMsgId_result();
        result.success = iface.getNewMsgId();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class notifyUserOnline<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyUserOnline_args> {
      public notifyUserOnline() {
        super("notifyUserOnline");
      }

      public notifyUserOnline_args getEmptyArgsInstance() {
        return new notifyUserOnline_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public notifyUserOnline_result getResult(I iface, notifyUserOnline_args args) throws org.apache.thrift.TException {
        notifyUserOnline_result result = new notifyUserOnline_result();
        iface.notifyUserOnline(args.userId);
        return result;
      }
    }

    public static class notifyListUserOffline<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyListUserOffline_args> {
      public notifyListUserOffline() {
        super("notifyListUserOffline");
      }

      public notifyListUserOffline_args getEmptyArgsInstance() {
        return new notifyListUserOffline_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public notifyListUserOffline_result getResult(I iface, notifyListUserOffline_args args) throws org.apache.thrift.TException {
        notifyListUserOffline_result result = new notifyListUserOffline_result();
        iface.notifyListUserOffline(args.listUserIdOffline);
        return result;
      }
    }

    public static class checkFriendOnline<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkFriendOnline_args> {
      public checkFriendOnline() {
        super("checkFriendOnline");
      }

      public checkFriendOnline_args getEmptyArgsInstance() {
        return new checkFriendOnline_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkFriendOnline_result getResult(I iface, checkFriendOnline_args args) throws org.apache.thrift.TException {
        checkFriendOnline_result result = new checkFriendOnline_result();
        result.success = iface.checkFriendOnline(args.listFriendId);
        return result;
      }
    }

    public static class getFriendListZalo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFriendListZalo_args> {
      public getFriendListZalo() {
        super("getFriendListZalo");
      }

      public getFriendListZalo_args getEmptyArgsInstance() {
        return new getFriendListZalo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFriendListZalo_result getResult(I iface, getFriendListZalo_args args) throws org.apache.thrift.TException {
        getFriendListZalo_result result = new getFriendListZalo_result();
        result.success = iface.getFriendListZalo(args.userId, args.oAuthCode);
        return result;
      }
    }

    public static class getProfileZalo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProfileZalo_args> {
      public getProfileZalo() {
        super("getProfileZalo");
      }

      public getProfileZalo_args getEmptyArgsInstance() {
        return new getProfileZalo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getProfileZalo_result getResult(I iface, getProfileZalo_args args) throws org.apache.thrift.TException {
        getProfileZalo_result result = new getProfileZalo_result();
        result.success = iface.getProfileZalo(args.userId, args.oAuthCode);
        return result;
      }
    }

    public static class setLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setLogin_args> {
      public setLogin() {
        super("setLogin");
      }

      public setLogin_args getEmptyArgsInstance() {
        return new setLogin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setLogin_result getResult(I iface, setLogin_args args) throws org.apache.thrift.TException {
        setLogin_result result = new setLogin_result();
        iface.setLogin(args.sessionId);
        return result;
      }
    }

    public static class isLogin<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isLogin_args> {
      public isLogin() {
        super("isLogin");
      }

      public isLogin_args getEmptyArgsInstance() {
        return new isLogin_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isLogin_result getResult(I iface, isLogin_args args) throws org.apache.thrift.TException {
        isLogin_result result = new isLogin_result();
        result.success = iface.isLogin(args.sessionId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class setLogout<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setLogout_args> {
      public setLogout() {
        super("setLogout");
      }

      public setLogout_args getEmptyArgsInstance() {
        return new setLogout_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setLogout_result getResult(I iface, setLogout_args args) throws org.apache.thrift.TException {
        setLogout_result result = new setLogout_result();
        iface.setLogout(args.sessionId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAllChatRoom", new getAllChatRoom());
      processMap.put("getListUserInRoom", new getListUserInRoom());
      processMap.put("getAllEmotionGroup", new getAllEmotionGroup());
      processMap.put("getEmotionGroup", new getEmotionGroup());
      processMap.put("addRoom", new addRoom());
      processMap.put("editRoom", new editRoom());
      processMap.put("deleteRoom", new deleteRoom());
      processMap.put("addEmotion", new addEmotion());
      processMap.put("editEmotion", new editEmotion());
      processMap.put("deleteEmotion", new deleteEmotion());
      processMap.put("kickUser", new kickUser());
      processMap.put("getRoomStatisticByDate", new getRoomStatisticByDate());
      processMap.put("getEmotionStatisticByDate", new getEmotionStatisticByDate());
      processMap.put("deleteAllEmotionInGroup", new deleteAllEmotionInGroup());
      processMap.put("deleteGroupEmotion", new deleteGroupEmotion());
      processMap.put("addGroupEmotion", new addGroupEmotion());
      processMap.put("gelAllGroupEmotion", new gelAllGroupEmotion());
      processMap.put("loadAllEmotion", new loadAllEmotion());
      processMap.put("getEmotionWithGroup", new getEmotionWithGroup());
      processMap.put("checkImageEmotionExist", new checkImageEmotionExist());
      processMap.put("sendMessageInternal", new sendMessageInternal());
      processMap.put("saveListMsgId", new saveListMsgId());
      processMap.put("saveOfflineMsgNotify", new saveOfflineMsgNotify());
      processMap.put("getMessageList", new getMessageList());
      processMap.put("getMessageIdList", new getMessageIdList());
      processMap.put("getMessageItem", new getMessageItem());
      processMap.put("saveRoomMsg", new saveRoomMsg());
      processMap.put("getRoomMsg", new getRoomMsg());
      processMap.put("getUserInRoom", new getUserInRoom());
      processMap.put("getUserProfile", new getUserProfile());
      processMap.put("getFriendList", new getFriendList());
      processMap.put("getNewMsgId", new getNewMsgId());
      processMap.put("notifyUserOnline", new notifyUserOnline());
      processMap.put("notifyListUserOffline", new notifyListUserOffline());
      processMap.put("checkFriendOnline", new checkFriendOnline());
      processMap.put("getFriendListZalo", new getFriendListZalo());
      processMap.put("getProfileZalo", new getProfileZalo());
      processMap.put("setLogin", new setLogin());
      processMap.put("isLogin", new isLogin());
      processMap.put("setLogout", new setLogout());
      return processMap;
    }

    public static class getAllChatRoom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllChatRoom_args, List<RoomItem>> {
      public getAllChatRoom() {
        super("getAllChatRoom");
      }

      public getAllChatRoom_args getEmptyArgsInstance() {
        return new getAllChatRoom_args();
      }

      public AsyncMethodCallback<List<RoomItem>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<RoomItem>>() { 
          public void onComplete(List<RoomItem> o) {
            getAllChatRoom_result result = new getAllChatRoom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllChatRoom_result result = new getAllChatRoom_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllChatRoom_args args, org.apache.thrift.async.AsyncMethodCallback<List<RoomItem>> resultHandler) throws TException {
        iface.getAllChatRoom(resultHandler);
      }
    }

    public static class getListUserInRoom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getListUserInRoom_args, List<UserItem>> {
      public getListUserInRoom() {
        super("getListUserInRoom");
      }

      public getListUserInRoom_args getEmptyArgsInstance() {
        return new getListUserInRoom_args();
      }

      public AsyncMethodCallback<List<UserItem>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<UserItem>>() { 
          public void onComplete(List<UserItem> o) {
            getListUserInRoom_result result = new getListUserInRoom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getListUserInRoom_result result = new getListUserInRoom_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getListUserInRoom_args args, org.apache.thrift.async.AsyncMethodCallback<List<UserItem>> resultHandler) throws TException {
        iface.getListUserInRoom(args.roomId,resultHandler);
      }
    }

    public static class getAllEmotionGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllEmotionGroup_args, List<GroupEmotion>> {
      public getAllEmotionGroup() {
        super("getAllEmotionGroup");
      }

      public getAllEmotionGroup_args getEmptyArgsInstance() {
        return new getAllEmotionGroup_args();
      }

      public AsyncMethodCallback<List<GroupEmotion>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<GroupEmotion>>() { 
          public void onComplete(List<GroupEmotion> o) {
            getAllEmotionGroup_result result = new getAllEmotionGroup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllEmotionGroup_result result = new getAllEmotionGroup_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllEmotionGroup_args args, org.apache.thrift.async.AsyncMethodCallback<List<GroupEmotion>> resultHandler) throws TException {
        iface.getAllEmotionGroup(resultHandler);
      }
    }

    public static class getEmotionGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEmotionGroup_args, GroupEmotion> {
      public getEmotionGroup() {
        super("getEmotionGroup");
      }

      public getEmotionGroup_args getEmptyArgsInstance() {
        return new getEmotionGroup_args();
      }

      public AsyncMethodCallback<GroupEmotion> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<GroupEmotion>() { 
          public void onComplete(GroupEmotion o) {
            getEmotionGroup_result result = new getEmotionGroup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEmotionGroup_result result = new getEmotionGroup_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEmotionGroup_args args, org.apache.thrift.async.AsyncMethodCallback<GroupEmotion> resultHandler) throws TException {
        iface.getEmotionGroup(args.emotionGroupId,resultHandler);
      }
    }

    public static class addRoom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRoom_args, Void> {
      public addRoom() {
        super("addRoom");
      }

      public addRoom_args getEmptyArgsInstance() {
        return new addRoom_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addRoom_result result = new addRoom_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRoom_result result = new addRoom_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRoom_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addRoom(args.newRoom,resultHandler);
      }
    }

    public static class editRoom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editRoom_args, Void> {
      public editRoom() {
        super("editRoom");
      }

      public editRoom_args getEmptyArgsInstance() {
        return new editRoom_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            editRoom_result result = new editRoom_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editRoom_result result = new editRoom_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editRoom_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.editRoom(args.room,resultHandler);
      }
    }

    public static class deleteRoom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteRoom_args, Void> {
      public deleteRoom() {
        super("deleteRoom");
      }

      public deleteRoom_args getEmptyArgsInstance() {
        return new deleteRoom_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteRoom_result result = new deleteRoom_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteRoom_result result = new deleteRoom_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteRoom_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteRoom(args.roomId,resultHandler);
      }
    }

    public static class addEmotion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addEmotion_args, Void> {
      public addEmotion() {
        super("addEmotion");
      }

      public addEmotion_args getEmptyArgsInstance() {
        return new addEmotion_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addEmotion_result result = new addEmotion_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addEmotion_result result = new addEmotion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addEmotion_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addEmotion(args.emotionItem,resultHandler);
      }
    }

    public static class editEmotion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, editEmotion_args, Void> {
      public editEmotion() {
        super("editEmotion");
      }

      public editEmotion_args getEmptyArgsInstance() {
        return new editEmotion_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            editEmotion_result result = new editEmotion_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            editEmotion_result result = new editEmotion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, editEmotion_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.editEmotion(args.emotionId, args.emotionItem,resultHandler);
      }
    }

    public static class deleteEmotion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteEmotion_args, Void> {
      public deleteEmotion() {
        super("deleteEmotion");
      }

      public deleteEmotion_args getEmptyArgsInstance() {
        return new deleteEmotion_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteEmotion_result result = new deleteEmotion_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteEmotion_result result = new deleteEmotion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteEmotion_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.deleteEmotion(args.emotionId,resultHandler);
      }
    }

    public static class kickUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, kickUser_args, Void> {
      public kickUser() {
        super("kickUser");
      }

      public kickUser_args getEmptyArgsInstance() {
        return new kickUser_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            kickUser_result result = new kickUser_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            kickUser_result result = new kickUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, kickUser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.kickUser(args.userId,resultHandler);
      }
    }

    public static class getRoomStatisticByDate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRoomStatisticByDate_args, RoomStatistic> {
      public getRoomStatisticByDate() {
        super("getRoomStatisticByDate");
      }

      public getRoomStatisticByDate_args getEmptyArgsInstance() {
        return new getRoomStatisticByDate_args();
      }

      public AsyncMethodCallback<RoomStatistic> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RoomStatistic>() { 
          public void onComplete(RoomStatistic o) {
            getRoomStatisticByDate_result result = new getRoomStatisticByDate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRoomStatisticByDate_result result = new getRoomStatisticByDate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRoomStatisticByDate_args args, org.apache.thrift.async.AsyncMethodCallback<RoomStatistic> resultHandler) throws TException {
        iface.getRoomStatisticByDate(args.date,resultHandler);
      }
    }

    public static class getEmotionStatisticByDate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEmotionStatisticByDate_args, EmotionStatistic> {
      public getEmotionStatisticByDate() {
        super("getEmotionStatisticByDate");
      }

      public getEmotionStatisticByDate_args getEmptyArgsInstance() {
        return new getEmotionStatisticByDate_args();
      }

      public AsyncMethodCallback<EmotionStatistic> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<EmotionStatistic>() { 
          public void onComplete(EmotionStatistic o) {
            getEmotionStatisticByDate_result result = new getEmotionStatisticByDate_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEmotionStatisticByDate_result result = new getEmotionStatisticByDate_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEmotionStatisticByDate_args args, org.apache.thrift.async.AsyncMethodCallback<EmotionStatistic> resultHandler) throws TException {
        iface.getEmotionStatisticByDate(args.date,resultHandler);
      }
    }

    public static class deleteAllEmotionInGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteAllEmotionInGroup_args, Boolean> {
      public deleteAllEmotionInGroup() {
        super("deleteAllEmotionInGroup");
      }

      public deleteAllEmotionInGroup_args getEmptyArgsInstance() {
        return new deleteAllEmotionInGroup_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteAllEmotionInGroup_result result = new deleteAllEmotionInGroup_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteAllEmotionInGroup_result result = new deleteAllEmotionInGroup_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteAllEmotionInGroup_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteAllEmotionInGroup(args.groupEmotionId,resultHandler);
      }
    }

    public static class deleteGroupEmotion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteGroupEmotion_args, Boolean> {
      public deleteGroupEmotion() {
        super("deleteGroupEmotion");
      }

      public deleteGroupEmotion_args getEmptyArgsInstance() {
        return new deleteGroupEmotion_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            deleteGroupEmotion_result result = new deleteGroupEmotion_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteGroupEmotion_result result = new deleteGroupEmotion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteGroupEmotion_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.deleteGroupEmotion(args.groupEmotionId,resultHandler);
      }
    }

    public static class addGroupEmotion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addGroupEmotion_args, String> {
      public addGroupEmotion() {
        super("addGroupEmotion");
      }

      public addGroupEmotion_args getEmptyArgsInstance() {
        return new addGroupEmotion_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            addGroupEmotion_result result = new addGroupEmotion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addGroupEmotion_result result = new addGroupEmotion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addGroupEmotion_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.addGroupEmotion(args.groupEmotionName,resultHandler);
      }
    }

    public static class gelAllGroupEmotion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, gelAllGroupEmotion_args, String> {
      public gelAllGroupEmotion() {
        super("gelAllGroupEmotion");
      }

      public gelAllGroupEmotion_args getEmptyArgsInstance() {
        return new gelAllGroupEmotion_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            gelAllGroupEmotion_result result = new gelAllGroupEmotion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            gelAllGroupEmotion_result result = new gelAllGroupEmotion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, gelAllGroupEmotion_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.gelAllGroupEmotion(resultHandler);
      }
    }

    public static class loadAllEmotion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loadAllEmotion_args, String> {
      public loadAllEmotion() {
        super("loadAllEmotion");
      }

      public loadAllEmotion_args getEmptyArgsInstance() {
        return new loadAllEmotion_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            loadAllEmotion_result result = new loadAllEmotion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loadAllEmotion_result result = new loadAllEmotion_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loadAllEmotion_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.loadAllEmotion(resultHandler);
      }
    }

    public static class getEmotionWithGroup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEmotionWithGroup_args, String> {
      public getEmotionWithGroup() {
        super("getEmotionWithGroup");
      }

      public getEmotionWithGroup_args getEmptyArgsInstance() {
        return new getEmotionWithGroup_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getEmotionWithGroup_result result = new getEmotionWithGroup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEmotionWithGroup_result result = new getEmotionWithGroup_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEmotionWithGroup_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getEmotionWithGroup(args.groupId,resultHandler);
      }
    }

    public static class checkImageEmotionExist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkImageEmotionExist_args, Boolean> {
      public checkImageEmotionExist() {
        super("checkImageEmotionExist");
      }

      public checkImageEmotionExist_args getEmptyArgsInstance() {
        return new checkImageEmotionExist_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            checkImageEmotionExist_result result = new checkImageEmotionExist_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkImageEmotionExist_result result = new checkImageEmotionExist_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkImageEmotionExist_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.checkImageEmotionExist(args.imageStyle, args.groupEmotionId,resultHandler);
      }
    }

    public static class sendMessageInternal<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendMessageInternal_args, Boolean> {
      public sendMessageInternal() {
        super("sendMessageInternal");
      }

      public sendMessageInternal_args getEmptyArgsInstance() {
        return new sendMessageInternal_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            sendMessageInternal_result result = new sendMessageInternal_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendMessageInternal_result result = new sendMessageInternal_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendMessageInternal_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.sendMessageInternal(args.msgItem, args.messageOnline,resultHandler);
      }
    }

    public static class saveListMsgId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveListMsgId_args, Void> {
      public saveListMsgId() {
        super("saveListMsgId");
      }

      public saveListMsgId_args getEmptyArgsInstance() {
        return new saveListMsgId_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            saveListMsgId_result result = new saveListMsgId_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveListMsgId_result result = new saveListMsgId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveListMsgId_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.saveListMsgId(args.listMsgId,resultHandler);
      }
    }

    public static class saveOfflineMsgNotify<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveOfflineMsgNotify_args, Void> {
      public saveOfflineMsgNotify() {
        super("saveOfflineMsgNotify");
      }

      public saveOfflineMsgNotify_args getEmptyArgsInstance() {
        return new saveOfflineMsgNotify_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            saveOfflineMsgNotify_result result = new saveOfflineMsgNotify_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveOfflineMsgNotify_result result = new saveOfflineMsgNotify_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveOfflineMsgNotify_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.saveOfflineMsgNotify(args.userId,resultHandler);
      }
    }

    public static class getMessageList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMessageList_args, List<MsgItem>> {
      public getMessageList() {
        super("getMessageList");
      }

      public getMessageList_args getEmptyArgsInstance() {
        return new getMessageList_args();
      }

      public AsyncMethodCallback<List<MsgItem>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<MsgItem>>() { 
          public void onComplete(List<MsgItem> o) {
            getMessageList_result result = new getMessageList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMessageList_result result = new getMessageList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMessageList_args args, org.apache.thrift.async.AsyncMethodCallback<List<MsgItem>> resultHandler) throws TException {
        iface.getMessageList(args.userId1, args.userId2, args.totalMsg,resultHandler);
      }
    }

    public static class getMessageIdList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMessageIdList_args, List<Long>> {
      public getMessageIdList() {
        super("getMessageIdList");
      }

      public getMessageIdList_args getEmptyArgsInstance() {
        return new getMessageIdList_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getMessageIdList_result result = new getMessageIdList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMessageIdList_result result = new getMessageIdList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMessageIdList_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getMessageIdList(args.userId1, args.userId2, args.totalMsg,resultHandler);
      }
    }

    public static class getMessageItem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMessageItem_args, MsgItem> {
      public getMessageItem() {
        super("getMessageItem");
      }

      public getMessageItem_args getEmptyArgsInstance() {
        return new getMessageItem_args();
      }

      public AsyncMethodCallback<MsgItem> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MsgItem>() { 
          public void onComplete(MsgItem o) {
            getMessageItem_result result = new getMessageItem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMessageItem_result result = new getMessageItem_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMessageItem_args args, org.apache.thrift.async.AsyncMethodCallback<MsgItem> resultHandler) throws TException {
        iface.getMessageItem(args.userId1, args.userId2, args.MsgId,resultHandler);
      }
    }

    public static class saveRoomMsg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveRoomMsg_args, Void> {
      public saveRoomMsg() {
        super("saveRoomMsg");
      }

      public saveRoomMsg_args getEmptyArgsInstance() {
        return new saveRoomMsg_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            saveRoomMsg_result result = new saveRoomMsg_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            saveRoomMsg_result result = new saveRoomMsg_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveRoomMsg_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.saveRoomMsg(args.msg, args.roomId,resultHandler);
      }
    }

    public static class getRoomMsg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRoomMsg_args, List<MsgItem>> {
      public getRoomMsg() {
        super("getRoomMsg");
      }

      public getRoomMsg_args getEmptyArgsInstance() {
        return new getRoomMsg_args();
      }

      public AsyncMethodCallback<List<MsgItem>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<MsgItem>>() { 
          public void onComplete(List<MsgItem> o) {
            getRoomMsg_result result = new getRoomMsg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRoomMsg_result result = new getRoomMsg_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRoomMsg_args args, org.apache.thrift.async.AsyncMethodCallback<List<MsgItem>> resultHandler) throws TException {
        iface.getRoomMsg(args.roomId,resultHandler);
      }
    }

    public static class getUserInRoom<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserInRoom_args, List<UserItem>> {
      public getUserInRoom() {
        super("getUserInRoom");
      }

      public getUserInRoom_args getEmptyArgsInstance() {
        return new getUserInRoom_args();
      }

      public AsyncMethodCallback<List<UserItem>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<UserItem>>() { 
          public void onComplete(List<UserItem> o) {
            getUserInRoom_result result = new getUserInRoom_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserInRoom_result result = new getUserInRoom_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserInRoom_args args, org.apache.thrift.async.AsyncMethodCallback<List<UserItem>> resultHandler) throws TException {
        iface.getUserInRoom(args.roomId,resultHandler);
      }
    }

    public static class getUserProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserProfile_args, UserItem> {
      public getUserProfile() {
        super("getUserProfile");
      }

      public getUserProfile_args getEmptyArgsInstance() {
        return new getUserProfile_args();
      }

      public AsyncMethodCallback<UserItem> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UserItem>() { 
          public void onComplete(UserItem o) {
            getUserProfile_result result = new getUserProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserProfile_result result = new getUserProfile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserProfile_args args, org.apache.thrift.async.AsyncMethodCallback<UserItem> resultHandler) throws TException {
        iface.getUserProfile(args.userId,resultHandler);
      }
    }

    public static class getFriendList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFriendList_args, List<UserItem>> {
      public getFriendList() {
        super("getFriendList");
      }

      public getFriendList_args getEmptyArgsInstance() {
        return new getFriendList_args();
      }

      public AsyncMethodCallback<List<UserItem>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<UserItem>>() { 
          public void onComplete(List<UserItem> o) {
            getFriendList_result result = new getFriendList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFriendList_result result = new getFriendList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFriendList_args args, org.apache.thrift.async.AsyncMethodCallback<List<UserItem>> resultHandler) throws TException {
        iface.getFriendList(args.userId,resultHandler);
      }
    }

    public static class getNewMsgId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getNewMsgId_args, Long> {
      public getNewMsgId() {
        super("getNewMsgId");
      }

      public getNewMsgId_args getEmptyArgsInstance() {
        return new getNewMsgId_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            getNewMsgId_result result = new getNewMsgId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getNewMsgId_result result = new getNewMsgId_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getNewMsgId_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.getNewMsgId(resultHandler);
      }
    }

    public static class notifyUserOnline<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, notifyUserOnline_args, Void> {
      public notifyUserOnline() {
        super("notifyUserOnline");
      }

      public notifyUserOnline_args getEmptyArgsInstance() {
        return new notifyUserOnline_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            notifyUserOnline_result result = new notifyUserOnline_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            notifyUserOnline_result result = new notifyUserOnline_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, notifyUserOnline_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.notifyUserOnline(args.userId,resultHandler);
      }
    }

    public static class notifyListUserOffline<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, notifyListUserOffline_args, Void> {
      public notifyListUserOffline() {
        super("notifyListUserOffline");
      }

      public notifyListUserOffline_args getEmptyArgsInstance() {
        return new notifyListUserOffline_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            notifyListUserOffline_result result = new notifyListUserOffline_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            notifyListUserOffline_result result = new notifyListUserOffline_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, notifyListUserOffline_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.notifyListUserOffline(args.listUserIdOffline,resultHandler);
      }
    }

    public static class checkFriendOnline<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkFriendOnline_args, List<Boolean>> {
      public checkFriendOnline() {
        super("checkFriendOnline");
      }

      public checkFriendOnline_args getEmptyArgsInstance() {
        return new checkFriendOnline_args();
      }

      public AsyncMethodCallback<List<Boolean>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Boolean>>() { 
          public void onComplete(List<Boolean> o) {
            checkFriendOnline_result result = new checkFriendOnline_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            checkFriendOnline_result result = new checkFriendOnline_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkFriendOnline_args args, org.apache.thrift.async.AsyncMethodCallback<List<Boolean>> resultHandler) throws TException {
        iface.checkFriendOnline(args.listFriendId,resultHandler);
      }
    }

    public static class getFriendListZalo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFriendListZalo_args, String> {
      public getFriendListZalo() {
        super("getFriendListZalo");
      }

      public getFriendListZalo_args getEmptyArgsInstance() {
        return new getFriendListZalo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getFriendListZalo_result result = new getFriendListZalo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFriendListZalo_result result = new getFriendListZalo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFriendListZalo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getFriendListZalo(args.userId, args.oAuthCode,resultHandler);
      }
    }

    public static class getProfileZalo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProfileZalo_args, String> {
      public getProfileZalo() {
        super("getProfileZalo");
      }

      public getProfileZalo_args getEmptyArgsInstance() {
        return new getProfileZalo_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getProfileZalo_result result = new getProfileZalo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getProfileZalo_result result = new getProfileZalo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProfileZalo_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getProfileZalo(args.userId, args.oAuthCode,resultHandler);
      }
    }

    public static class setLogin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setLogin_args, Void> {
      public setLogin() {
        super("setLogin");
      }

      public setLogin_args getEmptyArgsInstance() {
        return new setLogin_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setLogin_result result = new setLogin_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setLogin_result result = new setLogin_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setLogin_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setLogin(args.sessionId,resultHandler);
      }
    }

    public static class isLogin<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isLogin_args, Boolean> {
      public isLogin() {
        super("isLogin");
      }

      public isLogin_args getEmptyArgsInstance() {
        return new isLogin_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            isLogin_result result = new isLogin_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isLogin_result result = new isLogin_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isLogin_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.isLogin(args.sessionId,resultHandler);
      }
    }

    public static class setLogout<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setLogout_args, Void> {
      public setLogout() {
        super("setLogout");
      }

      public setLogout_args getEmptyArgsInstance() {
        return new setLogout_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            setLogout_result result = new setLogout_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setLogout_result result = new setLogout_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setLogout_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.setLogout(args.sessionId,resultHandler);
      }
    }

  }

  public static class getAllChatRoom_args implements org.apache.thrift.TBase<getAllChatRoom_args, getAllChatRoom_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllChatRoom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllChatRoom_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllChatRoom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllChatRoom_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllChatRoom_args.class, metaDataMap);
    }

    public getAllChatRoom_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllChatRoom_args(getAllChatRoom_args other) {
    }

    public getAllChatRoom_args deepCopy() {
      return new getAllChatRoom_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllChatRoom_args)
        return this.equals((getAllChatRoom_args)that);
      return false;
    }

    public boolean equals(getAllChatRoom_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllChatRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllChatRoom_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllChatRoom_argsStandardSchemeFactory implements SchemeFactory {
      public getAllChatRoom_argsStandardScheme getScheme() {
        return new getAllChatRoom_argsStandardScheme();
      }
    }

    private static class getAllChatRoom_argsStandardScheme extends StandardScheme<getAllChatRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllChatRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllChatRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllChatRoom_argsTupleSchemeFactory implements SchemeFactory {
      public getAllChatRoom_argsTupleScheme getScheme() {
        return new getAllChatRoom_argsTupleScheme();
      }
    }

    private static class getAllChatRoom_argsTupleScheme extends TupleScheme<getAllChatRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllChatRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllChatRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAllChatRoom_result implements org.apache.thrift.TBase<getAllChatRoom_result, getAllChatRoom_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllChatRoom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllChatRoom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllChatRoom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllChatRoom_resultTupleSchemeFactory());
    }

    public List<RoomItem> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RoomItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllChatRoom_result.class, metaDataMap);
    }

    public getAllChatRoom_result() {
    }

    public getAllChatRoom_result(
      List<RoomItem> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllChatRoom_result(getAllChatRoom_result other) {
      if (other.isSetSuccess()) {
        List<RoomItem> __this__success = new ArrayList<RoomItem>(other.success.size());
        for (RoomItem other_element : other.success) {
          __this__success.add(new RoomItem(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllChatRoom_result deepCopy() {
      return new getAllChatRoom_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<RoomItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(RoomItem elem) {
      if (this.success == null) {
        this.success = new ArrayList<RoomItem>();
      }
      this.success.add(elem);
    }

    public List<RoomItem> getSuccess() {
      return this.success;
    }

    public getAllChatRoom_result setSuccess(List<RoomItem> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<RoomItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllChatRoom_result)
        return this.equals((getAllChatRoom_result)that);
      return false;
    }

    public boolean equals(getAllChatRoom_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllChatRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllChatRoom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllChatRoom_resultStandardSchemeFactory implements SchemeFactory {
      public getAllChatRoom_resultStandardScheme getScheme() {
        return new getAllChatRoom_resultStandardScheme();
      }
    }

    private static class getAllChatRoom_resultStandardScheme extends StandardScheme<getAllChatRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllChatRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<RoomItem>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    RoomItem _elem34;
                    _elem34 = new RoomItem();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllChatRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (RoomItem _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllChatRoom_resultTupleSchemeFactory implements SchemeFactory {
      public getAllChatRoom_resultTupleScheme getScheme() {
        return new getAllChatRoom_resultTupleScheme();
      }
    }

    private static class getAllChatRoom_resultTupleScheme extends TupleScheme<getAllChatRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllChatRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (RoomItem _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllChatRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<RoomItem>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              RoomItem _elem39;
              _elem39 = new RoomItem();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getListUserInRoom_args implements org.apache.thrift.TBase<getListUserInRoom_args, getListUserInRoom_args._Fields>, java.io.Serializable, Cloneable, Comparable<getListUserInRoom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListUserInRoom_args");

    private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListUserInRoom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListUserInRoom_argsTupleSchemeFactory());
    }

    public String roomId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOM_ID((short)1, "roomId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOM_ID
            return ROOM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListUserInRoom_args.class, metaDataMap);
    }

    public getListUserInRoom_args() {
    }

    public getListUserInRoom_args(
      String roomId)
    {
      this();
      this.roomId = roomId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListUserInRoom_args(getListUserInRoom_args other) {
      if (other.isSetRoomId()) {
        this.roomId = other.roomId;
      }
    }

    public getListUserInRoom_args deepCopy() {
      return new getListUserInRoom_args(this);
    }

    @Override
    public void clear() {
      this.roomId = null;
    }

    public String getRoomId() {
      return this.roomId;
    }

    public getListUserInRoom_args setRoomId(String roomId) {
      this.roomId = roomId;
      return this;
    }

    public void unsetRoomId() {
      this.roomId = null;
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return this.roomId != null;
    }

    public void setRoomIdIsSet(boolean value) {
      if (!value) {
        this.roomId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROOM_ID:
        if (value == null) {
          unsetRoomId();
        } else {
          setRoomId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOM_ID:
        return getRoomId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROOM_ID:
        return isSetRoomId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListUserInRoom_args)
        return this.equals((getListUserInRoom_args)that);
      return false;
    }

    public boolean equals(getListUserInRoom_args that) {
      if (that == null)
        return false;

      boolean this_present_roomId = true && this.isSetRoomId();
      boolean that_present_roomId = true && that.isSetRoomId();
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (!this.roomId.equals(that.roomId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getListUserInRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoomId()).compareTo(other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListUserInRoom_args(");
      boolean first = true;

      sb.append("roomId:");
      if (this.roomId == null) {
        sb.append("null");
      } else {
        sb.append(this.roomId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListUserInRoom_argsStandardSchemeFactory implements SchemeFactory {
      public getListUserInRoom_argsStandardScheme getScheme() {
        return new getListUserInRoom_argsStandardScheme();
      }
    }

    private static class getListUserInRoom_argsStandardScheme extends StandardScheme<getListUserInRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListUserInRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roomId = iprot.readString();
                struct.setRoomIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListUserInRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roomId != null) {
          oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
          oprot.writeString(struct.roomId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListUserInRoom_argsTupleSchemeFactory implements SchemeFactory {
      public getListUserInRoom_argsTupleScheme getScheme() {
        return new getListUserInRoom_argsTupleScheme();
      }
    }

    private static class getListUserInRoom_argsTupleScheme extends TupleScheme<getListUserInRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListUserInRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoomId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoomId()) {
          oprot.writeString(struct.roomId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListUserInRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roomId = iprot.readString();
          struct.setRoomIdIsSet(true);
        }
      }
    }

  }

  public static class getListUserInRoom_result implements org.apache.thrift.TBase<getListUserInRoom_result, getListUserInRoom_result._Fields>, java.io.Serializable, Cloneable, Comparable<getListUserInRoom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getListUserInRoom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getListUserInRoom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getListUserInRoom_resultTupleSchemeFactory());
    }

    public List<UserItem> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getListUserInRoom_result.class, metaDataMap);
    }

    public getListUserInRoom_result() {
    }

    public getListUserInRoom_result(
      List<UserItem> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getListUserInRoom_result(getListUserInRoom_result other) {
      if (other.isSetSuccess()) {
        List<UserItem> __this__success = new ArrayList<UserItem>(other.success.size());
        for (UserItem other_element : other.success) {
          __this__success.add(new UserItem(other_element));
        }
        this.success = __this__success;
      }
    }

    public getListUserInRoom_result deepCopy() {
      return new getListUserInRoom_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<UserItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(UserItem elem) {
      if (this.success == null) {
        this.success = new ArrayList<UserItem>();
      }
      this.success.add(elem);
    }

    public List<UserItem> getSuccess() {
      return this.success;
    }

    public getListUserInRoom_result setSuccess(List<UserItem> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<UserItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getListUserInRoom_result)
        return this.equals((getListUserInRoom_result)that);
      return false;
    }

    public boolean equals(getListUserInRoom_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getListUserInRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getListUserInRoom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getListUserInRoom_resultStandardSchemeFactory implements SchemeFactory {
      public getListUserInRoom_resultStandardScheme getScheme() {
        return new getListUserInRoom_resultStandardScheme();
      }
    }

    private static class getListUserInRoom_resultStandardScheme extends StandardScheme<getListUserInRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getListUserInRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.success = new ArrayList<UserItem>(_list40.size);
                  for (int _i41 = 0; _i41 < _list40.size; ++_i41)
                  {
                    UserItem _elem42;
                    _elem42 = new UserItem();
                    _elem42.read(iprot);
                    struct.success.add(_elem42);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getListUserInRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (UserItem _iter43 : struct.success)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getListUserInRoom_resultTupleSchemeFactory implements SchemeFactory {
      public getListUserInRoom_resultTupleScheme getScheme() {
        return new getListUserInRoom_resultTupleScheme();
      }
    }

    private static class getListUserInRoom_resultTupleScheme extends TupleScheme<getListUserInRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getListUserInRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (UserItem _iter44 : struct.success)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getListUserInRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<UserItem>(_list45.size);
            for (int _i46 = 0; _i46 < _list45.size; ++_i46)
            {
              UserItem _elem47;
              _elem47 = new UserItem();
              _elem47.read(iprot);
              struct.success.add(_elem47);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllEmotionGroup_args implements org.apache.thrift.TBase<getAllEmotionGroup_args, getAllEmotionGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllEmotionGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllEmotionGroup_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllEmotionGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllEmotionGroup_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllEmotionGroup_args.class, metaDataMap);
    }

    public getAllEmotionGroup_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllEmotionGroup_args(getAllEmotionGroup_args other) {
    }

    public getAllEmotionGroup_args deepCopy() {
      return new getAllEmotionGroup_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllEmotionGroup_args)
        return this.equals((getAllEmotionGroup_args)that);
      return false;
    }

    public boolean equals(getAllEmotionGroup_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllEmotionGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllEmotionGroup_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllEmotionGroup_argsStandardSchemeFactory implements SchemeFactory {
      public getAllEmotionGroup_argsStandardScheme getScheme() {
        return new getAllEmotionGroup_argsStandardScheme();
      }
    }

    private static class getAllEmotionGroup_argsStandardScheme extends StandardScheme<getAllEmotionGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllEmotionGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllEmotionGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllEmotionGroup_argsTupleSchemeFactory implements SchemeFactory {
      public getAllEmotionGroup_argsTupleScheme getScheme() {
        return new getAllEmotionGroup_argsTupleScheme();
      }
    }

    private static class getAllEmotionGroup_argsTupleScheme extends TupleScheme<getAllEmotionGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllEmotionGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllEmotionGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAllEmotionGroup_result implements org.apache.thrift.TBase<getAllEmotionGroup_result, getAllEmotionGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllEmotionGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllEmotionGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllEmotionGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllEmotionGroup_resultTupleSchemeFactory());
    }

    public List<GroupEmotion> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupEmotion.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllEmotionGroup_result.class, metaDataMap);
    }

    public getAllEmotionGroup_result() {
    }

    public getAllEmotionGroup_result(
      List<GroupEmotion> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllEmotionGroup_result(getAllEmotionGroup_result other) {
      if (other.isSetSuccess()) {
        List<GroupEmotion> __this__success = new ArrayList<GroupEmotion>(other.success.size());
        for (GroupEmotion other_element : other.success) {
          __this__success.add(new GroupEmotion(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllEmotionGroup_result deepCopy() {
      return new getAllEmotionGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<GroupEmotion> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(GroupEmotion elem) {
      if (this.success == null) {
        this.success = new ArrayList<GroupEmotion>();
      }
      this.success.add(elem);
    }

    public List<GroupEmotion> getSuccess() {
      return this.success;
    }

    public getAllEmotionGroup_result setSuccess(List<GroupEmotion> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<GroupEmotion>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllEmotionGroup_result)
        return this.equals((getAllEmotionGroup_result)that);
      return false;
    }

    public boolean equals(getAllEmotionGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllEmotionGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllEmotionGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllEmotionGroup_resultStandardSchemeFactory implements SchemeFactory {
      public getAllEmotionGroup_resultStandardScheme getScheme() {
        return new getAllEmotionGroup_resultStandardScheme();
      }
    }

    private static class getAllEmotionGroup_resultStandardScheme extends StandardScheme<getAllEmotionGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllEmotionGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.success = new ArrayList<GroupEmotion>(_list48.size);
                  for (int _i49 = 0; _i49 < _list48.size; ++_i49)
                  {
                    GroupEmotion _elem50;
                    _elem50 = new GroupEmotion();
                    _elem50.read(iprot);
                    struct.success.add(_elem50);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllEmotionGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (GroupEmotion _iter51 : struct.success)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllEmotionGroup_resultTupleSchemeFactory implements SchemeFactory {
      public getAllEmotionGroup_resultTupleScheme getScheme() {
        return new getAllEmotionGroup_resultTupleScheme();
      }
    }

    private static class getAllEmotionGroup_resultTupleScheme extends TupleScheme<getAllEmotionGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllEmotionGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (GroupEmotion _iter52 : struct.success)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllEmotionGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<GroupEmotion>(_list53.size);
            for (int _i54 = 0; _i54 < _list53.size; ++_i54)
            {
              GroupEmotion _elem55;
              _elem55 = new GroupEmotion();
              _elem55.read(iprot);
              struct.success.add(_elem55);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEmotionGroup_args implements org.apache.thrift.TBase<getEmotionGroup_args, getEmotionGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEmotionGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmotionGroup_args");

    private static final org.apache.thrift.protocol.TField EMOTION_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("emotionGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEmotionGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEmotionGroup_argsTupleSchemeFactory());
    }

    public String emotionGroupId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMOTION_GROUP_ID((short)1, "emotionGroupId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMOTION_GROUP_ID
            return EMOTION_GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMOTION_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("emotionGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmotionGroup_args.class, metaDataMap);
    }

    public getEmotionGroup_args() {
    }

    public getEmotionGroup_args(
      String emotionGroupId)
    {
      this();
      this.emotionGroupId = emotionGroupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEmotionGroup_args(getEmotionGroup_args other) {
      if (other.isSetEmotionGroupId()) {
        this.emotionGroupId = other.emotionGroupId;
      }
    }

    public getEmotionGroup_args deepCopy() {
      return new getEmotionGroup_args(this);
    }

    @Override
    public void clear() {
      this.emotionGroupId = null;
    }

    public String getEmotionGroupId() {
      return this.emotionGroupId;
    }

    public getEmotionGroup_args setEmotionGroupId(String emotionGroupId) {
      this.emotionGroupId = emotionGroupId;
      return this;
    }

    public void unsetEmotionGroupId() {
      this.emotionGroupId = null;
    }

    /** Returns true if field emotionGroupId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmotionGroupId() {
      return this.emotionGroupId != null;
    }

    public void setEmotionGroupIdIsSet(boolean value) {
      if (!value) {
        this.emotionGroupId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMOTION_GROUP_ID:
        if (value == null) {
          unsetEmotionGroupId();
        } else {
          setEmotionGroupId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMOTION_GROUP_ID:
        return getEmotionGroupId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMOTION_GROUP_ID:
        return isSetEmotionGroupId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEmotionGroup_args)
        return this.equals((getEmotionGroup_args)that);
      return false;
    }

    public boolean equals(getEmotionGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_emotionGroupId = true && this.isSetEmotionGroupId();
      boolean that_present_emotionGroupId = true && that.isSetEmotionGroupId();
      if (this_present_emotionGroupId || that_present_emotionGroupId) {
        if (!(this_present_emotionGroupId && that_present_emotionGroupId))
          return false;
        if (!this.emotionGroupId.equals(that.emotionGroupId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getEmotionGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEmotionGroupId()).compareTo(other.isSetEmotionGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmotionGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emotionGroupId, other.emotionGroupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEmotionGroup_args(");
      boolean first = true;

      sb.append("emotionGroupId:");
      if (this.emotionGroupId == null) {
        sb.append("null");
      } else {
        sb.append(this.emotionGroupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEmotionGroup_argsStandardSchemeFactory implements SchemeFactory {
      public getEmotionGroup_argsStandardScheme getScheme() {
        return new getEmotionGroup_argsStandardScheme();
      }
    }

    private static class getEmotionGroup_argsStandardScheme extends StandardScheme<getEmotionGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEmotionGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMOTION_GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.emotionGroupId = iprot.readString();
                struct.setEmotionGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEmotionGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.emotionGroupId != null) {
          oprot.writeFieldBegin(EMOTION_GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.emotionGroupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEmotionGroup_argsTupleSchemeFactory implements SchemeFactory {
      public getEmotionGroup_argsTupleScheme getScheme() {
        return new getEmotionGroup_argsTupleScheme();
      }
    }

    private static class getEmotionGroup_argsTupleScheme extends TupleScheme<getEmotionGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEmotionGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmotionGroupId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmotionGroupId()) {
          oprot.writeString(struct.emotionGroupId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEmotionGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.emotionGroupId = iprot.readString();
          struct.setEmotionGroupIdIsSet(true);
        }
      }
    }

  }

  public static class getEmotionGroup_result implements org.apache.thrift.TBase<getEmotionGroup_result, getEmotionGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEmotionGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmotionGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEmotionGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEmotionGroup_resultTupleSchemeFactory());
    }

    public GroupEmotion success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, GroupEmotion.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmotionGroup_result.class, metaDataMap);
    }

    public getEmotionGroup_result() {
    }

    public getEmotionGroup_result(
      GroupEmotion success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEmotionGroup_result(getEmotionGroup_result other) {
      if (other.isSetSuccess()) {
        this.success = new GroupEmotion(other.success);
      }
    }

    public getEmotionGroup_result deepCopy() {
      return new getEmotionGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public GroupEmotion getSuccess() {
      return this.success;
    }

    public getEmotionGroup_result setSuccess(GroupEmotion success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((GroupEmotion)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEmotionGroup_result)
        return this.equals((getEmotionGroup_result)that);
      return false;
    }

    public boolean equals(getEmotionGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getEmotionGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEmotionGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEmotionGroup_resultStandardSchemeFactory implements SchemeFactory {
      public getEmotionGroup_resultStandardScheme getScheme() {
        return new getEmotionGroup_resultStandardScheme();
      }
    }

    private static class getEmotionGroup_resultStandardScheme extends StandardScheme<getEmotionGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEmotionGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new GroupEmotion();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEmotionGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEmotionGroup_resultTupleSchemeFactory implements SchemeFactory {
      public getEmotionGroup_resultTupleScheme getScheme() {
        return new getEmotionGroup_resultTupleScheme();
      }
    }

    private static class getEmotionGroup_resultTupleScheme extends TupleScheme<getEmotionGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEmotionGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEmotionGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new GroupEmotion();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addRoom_args implements org.apache.thrift.TBase<addRoom_args, addRoom_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRoom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRoom_args");

    private static final org.apache.thrift.protocol.TField NEW_ROOM_FIELD_DESC = new org.apache.thrift.protocol.TField("newRoom", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRoom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRoom_argsTupleSchemeFactory());
    }

    public RoomItem newRoom; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEW_ROOM((short)1, "newRoom");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEW_ROOM
            return NEW_ROOM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEW_ROOM, new org.apache.thrift.meta_data.FieldMetaData("newRoom", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RoomItem.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRoom_args.class, metaDataMap);
    }

    public addRoom_args() {
    }

    public addRoom_args(
      RoomItem newRoom)
    {
      this();
      this.newRoom = newRoom;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRoom_args(addRoom_args other) {
      if (other.isSetNewRoom()) {
        this.newRoom = new RoomItem(other.newRoom);
      }
    }

    public addRoom_args deepCopy() {
      return new addRoom_args(this);
    }

    @Override
    public void clear() {
      this.newRoom = null;
    }

    public RoomItem getNewRoom() {
      return this.newRoom;
    }

    public addRoom_args setNewRoom(RoomItem newRoom) {
      this.newRoom = newRoom;
      return this;
    }

    public void unsetNewRoom() {
      this.newRoom = null;
    }

    /** Returns true if field newRoom is set (has been assigned a value) and false otherwise */
    public boolean isSetNewRoom() {
      return this.newRoom != null;
    }

    public void setNewRoomIsSet(boolean value) {
      if (!value) {
        this.newRoom = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEW_ROOM:
        if (value == null) {
          unsetNewRoom();
        } else {
          setNewRoom((RoomItem)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEW_ROOM:
        return getNewRoom();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEW_ROOM:
        return isSetNewRoom();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRoom_args)
        return this.equals((addRoom_args)that);
      return false;
    }

    public boolean equals(addRoom_args that) {
      if (that == null)
        return false;

      boolean this_present_newRoom = true && this.isSetNewRoom();
      boolean that_present_newRoom = true && that.isSetNewRoom();
      if (this_present_newRoom || that_present_newRoom) {
        if (!(this_present_newRoom && that_present_newRoom))
          return false;
        if (!this.newRoom.equals(that.newRoom))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNewRoom()).compareTo(other.isSetNewRoom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewRoom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newRoom, other.newRoom);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRoom_args(");
      boolean first = true;

      sb.append("newRoom:");
      if (this.newRoom == null) {
        sb.append("null");
      } else {
        sb.append(this.newRoom);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (newRoom != null) {
        newRoom.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRoom_argsStandardSchemeFactory implements SchemeFactory {
      public addRoom_argsStandardScheme getScheme() {
        return new addRoom_argsStandardScheme();
      }
    }

    private static class addRoom_argsStandardScheme extends StandardScheme<addRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEW_ROOM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.newRoom = new RoomItem();
                struct.newRoom.read(iprot);
                struct.setNewRoomIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.newRoom != null) {
          oprot.writeFieldBegin(NEW_ROOM_FIELD_DESC);
          struct.newRoom.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRoom_argsTupleSchemeFactory implements SchemeFactory {
      public addRoom_argsTupleScheme getScheme() {
        return new addRoom_argsTupleScheme();
      }
    }

    private static class addRoom_argsTupleScheme extends TupleScheme<addRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNewRoom()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNewRoom()) {
          struct.newRoom.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.newRoom = new RoomItem();
          struct.newRoom.read(iprot);
          struct.setNewRoomIsSet(true);
        }
      }
    }

  }

  public static class addRoom_result implements org.apache.thrift.TBase<addRoom_result, addRoom_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRoom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRoom_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRoom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRoom_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRoom_result.class, metaDataMap);
    }

    public addRoom_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRoom_result(addRoom_result other) {
    }

    public addRoom_result deepCopy() {
      return new addRoom_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRoom_result)
        return this.equals((addRoom_result)that);
      return false;
    }

    public boolean equals(addRoom_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRoom_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRoom_resultStandardSchemeFactory implements SchemeFactory {
      public addRoom_resultStandardScheme getScheme() {
        return new addRoom_resultStandardScheme();
      }
    }

    private static class addRoom_resultStandardScheme extends StandardScheme<addRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRoom_resultTupleSchemeFactory implements SchemeFactory {
      public addRoom_resultTupleScheme getScheme() {
        return new addRoom_resultTupleScheme();
      }
    }

    private static class addRoom_resultTupleScheme extends TupleScheme<addRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class editRoom_args implements org.apache.thrift.TBase<editRoom_args, editRoom_args._Fields>, java.io.Serializable, Cloneable, Comparable<editRoom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editRoom_args");

    private static final org.apache.thrift.protocol.TField ROOM_FIELD_DESC = new org.apache.thrift.protocol.TField("room", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editRoom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editRoom_argsTupleSchemeFactory());
    }

    public RoomItem room; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOM((short)1, "room");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOM
            return ROOM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOM, new org.apache.thrift.meta_data.FieldMetaData("room", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RoomItem.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editRoom_args.class, metaDataMap);
    }

    public editRoom_args() {
    }

    public editRoom_args(
      RoomItem room)
    {
      this();
      this.room = room;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editRoom_args(editRoom_args other) {
      if (other.isSetRoom()) {
        this.room = new RoomItem(other.room);
      }
    }

    public editRoom_args deepCopy() {
      return new editRoom_args(this);
    }

    @Override
    public void clear() {
      this.room = null;
    }

    public RoomItem getRoom() {
      return this.room;
    }

    public editRoom_args setRoom(RoomItem room) {
      this.room = room;
      return this;
    }

    public void unsetRoom() {
      this.room = null;
    }

    /** Returns true if field room is set (has been assigned a value) and false otherwise */
    public boolean isSetRoom() {
      return this.room != null;
    }

    public void setRoomIsSet(boolean value) {
      if (!value) {
        this.room = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROOM:
        if (value == null) {
          unsetRoom();
        } else {
          setRoom((RoomItem)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOM:
        return getRoom();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROOM:
        return isSetRoom();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editRoom_args)
        return this.equals((editRoom_args)that);
      return false;
    }

    public boolean equals(editRoom_args that) {
      if (that == null)
        return false;

      boolean this_present_room = true && this.isSetRoom();
      boolean that_present_room = true && that.isSetRoom();
      if (this_present_room || that_present_room) {
        if (!(this_present_room && that_present_room))
          return false;
        if (!this.room.equals(that.room))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(editRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoom()).compareTo(other.isSetRoom());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoom()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.room, other.room);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editRoom_args(");
      boolean first = true;

      sb.append("room:");
      if (this.room == null) {
        sb.append("null");
      } else {
        sb.append(this.room);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (room != null) {
        room.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editRoom_argsStandardSchemeFactory implements SchemeFactory {
      public editRoom_argsStandardScheme getScheme() {
        return new editRoom_argsStandardScheme();
      }
    }

    private static class editRoom_argsStandardScheme extends StandardScheme<editRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.room = new RoomItem();
                struct.room.read(iprot);
                struct.setRoomIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.room != null) {
          oprot.writeFieldBegin(ROOM_FIELD_DESC);
          struct.room.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editRoom_argsTupleSchemeFactory implements SchemeFactory {
      public editRoom_argsTupleScheme getScheme() {
        return new editRoom_argsTupleScheme();
      }
    }

    private static class editRoom_argsTupleScheme extends TupleScheme<editRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoom()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoom()) {
          struct.room.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.room = new RoomItem();
          struct.room.read(iprot);
          struct.setRoomIsSet(true);
        }
      }
    }

  }

  public static class editRoom_result implements org.apache.thrift.TBase<editRoom_result, editRoom_result._Fields>, java.io.Serializable, Cloneable, Comparable<editRoom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editRoom_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editRoom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editRoom_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editRoom_result.class, metaDataMap);
    }

    public editRoom_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editRoom_result(editRoom_result other) {
    }

    public editRoom_result deepCopy() {
      return new editRoom_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editRoom_result)
        return this.equals((editRoom_result)that);
      return false;
    }

    public boolean equals(editRoom_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(editRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editRoom_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editRoom_resultStandardSchemeFactory implements SchemeFactory {
      public editRoom_resultStandardScheme getScheme() {
        return new editRoom_resultStandardScheme();
      }
    }

    private static class editRoom_resultStandardScheme extends StandardScheme<editRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editRoom_resultTupleSchemeFactory implements SchemeFactory {
      public editRoom_resultTupleScheme getScheme() {
        return new editRoom_resultTupleScheme();
      }
    }

    private static class editRoom_resultTupleScheme extends TupleScheme<editRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteRoom_args implements org.apache.thrift.TBase<deleteRoom_args, deleteRoom_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRoom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRoom_args");

    private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRoom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRoom_argsTupleSchemeFactory());
    }

    public String roomId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOM_ID((short)1, "roomId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOM_ID
            return ROOM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRoom_args.class, metaDataMap);
    }

    public deleteRoom_args() {
    }

    public deleteRoom_args(
      String roomId)
    {
      this();
      this.roomId = roomId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRoom_args(deleteRoom_args other) {
      if (other.isSetRoomId()) {
        this.roomId = other.roomId;
      }
    }

    public deleteRoom_args deepCopy() {
      return new deleteRoom_args(this);
    }

    @Override
    public void clear() {
      this.roomId = null;
    }

    public String getRoomId() {
      return this.roomId;
    }

    public deleteRoom_args setRoomId(String roomId) {
      this.roomId = roomId;
      return this;
    }

    public void unsetRoomId() {
      this.roomId = null;
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return this.roomId != null;
    }

    public void setRoomIdIsSet(boolean value) {
      if (!value) {
        this.roomId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROOM_ID:
        if (value == null) {
          unsetRoomId();
        } else {
          setRoomId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOM_ID:
        return getRoomId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROOM_ID:
        return isSetRoomId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRoom_args)
        return this.equals((deleteRoom_args)that);
      return false;
    }

    public boolean equals(deleteRoom_args that) {
      if (that == null)
        return false;

      boolean this_present_roomId = true && this.isSetRoomId();
      boolean that_present_roomId = true && that.isSetRoomId();
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (!this.roomId.equals(that.roomId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoomId()).compareTo(other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRoom_args(");
      boolean first = true;

      sb.append("roomId:");
      if (this.roomId == null) {
        sb.append("null");
      } else {
        sb.append(this.roomId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRoom_argsStandardSchemeFactory implements SchemeFactory {
      public deleteRoom_argsStandardScheme getScheme() {
        return new deleteRoom_argsStandardScheme();
      }
    }

    private static class deleteRoom_argsStandardScheme extends StandardScheme<deleteRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roomId = iprot.readString();
                struct.setRoomIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roomId != null) {
          oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
          oprot.writeString(struct.roomId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRoom_argsTupleSchemeFactory implements SchemeFactory {
      public deleteRoom_argsTupleScheme getScheme() {
        return new deleteRoom_argsTupleScheme();
      }
    }

    private static class deleteRoom_argsTupleScheme extends TupleScheme<deleteRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoomId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoomId()) {
          oprot.writeString(struct.roomId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roomId = iprot.readString();
          struct.setRoomIdIsSet(true);
        }
      }
    }

  }

  public static class deleteRoom_result implements org.apache.thrift.TBase<deleteRoom_result, deleteRoom_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRoom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRoom_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRoom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRoom_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRoom_result.class, metaDataMap);
    }

    public deleteRoom_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteRoom_result(deleteRoom_result other) {
    }

    public deleteRoom_result deepCopy() {
      return new deleteRoom_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRoom_result)
        return this.equals((deleteRoom_result)that);
      return false;
    }

    public boolean equals(deleteRoom_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRoom_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteRoom_resultStandardSchemeFactory implements SchemeFactory {
      public deleteRoom_resultStandardScheme getScheme() {
        return new deleteRoom_resultStandardScheme();
      }
    }

    private static class deleteRoom_resultStandardScheme extends StandardScheme<deleteRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteRoom_resultTupleSchemeFactory implements SchemeFactory {
      public deleteRoom_resultTupleScheme getScheme() {
        return new deleteRoom_resultTupleScheme();
      }
    }

    private static class deleteRoom_resultTupleScheme extends TupleScheme<deleteRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addEmotion_args implements org.apache.thrift.TBase<addEmotion_args, addEmotion_args._Fields>, java.io.Serializable, Cloneable, Comparable<addEmotion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addEmotion_args");

    private static final org.apache.thrift.protocol.TField EMOTION_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("emotionItem", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addEmotion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addEmotion_argsTupleSchemeFactory());
    }

    public String emotionItem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMOTION_ITEM((short)1, "emotionItem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMOTION_ITEM
            return EMOTION_ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMOTION_ITEM, new org.apache.thrift.meta_data.FieldMetaData("emotionItem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addEmotion_args.class, metaDataMap);
    }

    public addEmotion_args() {
    }

    public addEmotion_args(
      String emotionItem)
    {
      this();
      this.emotionItem = emotionItem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addEmotion_args(addEmotion_args other) {
      if (other.isSetEmotionItem()) {
        this.emotionItem = other.emotionItem;
      }
    }

    public addEmotion_args deepCopy() {
      return new addEmotion_args(this);
    }

    @Override
    public void clear() {
      this.emotionItem = null;
    }

    public String getEmotionItem() {
      return this.emotionItem;
    }

    public addEmotion_args setEmotionItem(String emotionItem) {
      this.emotionItem = emotionItem;
      return this;
    }

    public void unsetEmotionItem() {
      this.emotionItem = null;
    }

    /** Returns true if field emotionItem is set (has been assigned a value) and false otherwise */
    public boolean isSetEmotionItem() {
      return this.emotionItem != null;
    }

    public void setEmotionItemIsSet(boolean value) {
      if (!value) {
        this.emotionItem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMOTION_ITEM:
        if (value == null) {
          unsetEmotionItem();
        } else {
          setEmotionItem((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMOTION_ITEM:
        return getEmotionItem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMOTION_ITEM:
        return isSetEmotionItem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addEmotion_args)
        return this.equals((addEmotion_args)that);
      return false;
    }

    public boolean equals(addEmotion_args that) {
      if (that == null)
        return false;

      boolean this_present_emotionItem = true && this.isSetEmotionItem();
      boolean that_present_emotionItem = true && that.isSetEmotionItem();
      if (this_present_emotionItem || that_present_emotionItem) {
        if (!(this_present_emotionItem && that_present_emotionItem))
          return false;
        if (!this.emotionItem.equals(that.emotionItem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addEmotion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEmotionItem()).compareTo(other.isSetEmotionItem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmotionItem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emotionItem, other.emotionItem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addEmotion_args(");
      boolean first = true;

      sb.append("emotionItem:");
      if (this.emotionItem == null) {
        sb.append("null");
      } else {
        sb.append(this.emotionItem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addEmotion_argsStandardSchemeFactory implements SchemeFactory {
      public addEmotion_argsStandardScheme getScheme() {
        return new addEmotion_argsStandardScheme();
      }
    }

    private static class addEmotion_argsStandardScheme extends StandardScheme<addEmotion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addEmotion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMOTION_ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.emotionItem = iprot.readString();
                struct.setEmotionItemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addEmotion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.emotionItem != null) {
          oprot.writeFieldBegin(EMOTION_ITEM_FIELD_DESC);
          oprot.writeString(struct.emotionItem);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addEmotion_argsTupleSchemeFactory implements SchemeFactory {
      public addEmotion_argsTupleScheme getScheme() {
        return new addEmotion_argsTupleScheme();
      }
    }

    private static class addEmotion_argsTupleScheme extends TupleScheme<addEmotion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addEmotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmotionItem()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmotionItem()) {
          oprot.writeString(struct.emotionItem);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addEmotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.emotionItem = iprot.readString();
          struct.setEmotionItemIsSet(true);
        }
      }
    }

  }

  public static class addEmotion_result implements org.apache.thrift.TBase<addEmotion_result, addEmotion_result._Fields>, java.io.Serializable, Cloneable, Comparable<addEmotion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addEmotion_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addEmotion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addEmotion_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addEmotion_result.class, metaDataMap);
    }

    public addEmotion_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addEmotion_result(addEmotion_result other) {
    }

    public addEmotion_result deepCopy() {
      return new addEmotion_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addEmotion_result)
        return this.equals((addEmotion_result)that);
      return false;
    }

    public boolean equals(addEmotion_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addEmotion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addEmotion_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addEmotion_resultStandardSchemeFactory implements SchemeFactory {
      public addEmotion_resultStandardScheme getScheme() {
        return new addEmotion_resultStandardScheme();
      }
    }

    private static class addEmotion_resultStandardScheme extends StandardScheme<addEmotion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addEmotion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addEmotion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addEmotion_resultTupleSchemeFactory implements SchemeFactory {
      public addEmotion_resultTupleScheme getScheme() {
        return new addEmotion_resultTupleScheme();
      }
    }

    private static class addEmotion_resultTupleScheme extends TupleScheme<addEmotion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addEmotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addEmotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class editEmotion_args implements org.apache.thrift.TBase<editEmotion_args, editEmotion_args._Fields>, java.io.Serializable, Cloneable, Comparable<editEmotion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editEmotion_args");

    private static final org.apache.thrift.protocol.TField EMOTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("emotionId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField EMOTION_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("emotionItem", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editEmotion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editEmotion_argsTupleSchemeFactory());
    }

    public String emotionId; // required
    public EmotionItem emotionItem; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMOTION_ID((short)1, "emotionId"),
      EMOTION_ITEM((short)2, "emotionItem");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMOTION_ID
            return EMOTION_ID;
          case 2: // EMOTION_ITEM
            return EMOTION_ITEM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMOTION_ID, new org.apache.thrift.meta_data.FieldMetaData("emotionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EMOTION_ITEM, new org.apache.thrift.meta_data.FieldMetaData("emotionItem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmotionItem.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editEmotion_args.class, metaDataMap);
    }

    public editEmotion_args() {
    }

    public editEmotion_args(
      String emotionId,
      EmotionItem emotionItem)
    {
      this();
      this.emotionId = emotionId;
      this.emotionItem = emotionItem;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editEmotion_args(editEmotion_args other) {
      if (other.isSetEmotionId()) {
        this.emotionId = other.emotionId;
      }
      if (other.isSetEmotionItem()) {
        this.emotionItem = new EmotionItem(other.emotionItem);
      }
    }

    public editEmotion_args deepCopy() {
      return new editEmotion_args(this);
    }

    @Override
    public void clear() {
      this.emotionId = null;
      this.emotionItem = null;
    }

    public String getEmotionId() {
      return this.emotionId;
    }

    public editEmotion_args setEmotionId(String emotionId) {
      this.emotionId = emotionId;
      return this;
    }

    public void unsetEmotionId() {
      this.emotionId = null;
    }

    /** Returns true if field emotionId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmotionId() {
      return this.emotionId != null;
    }

    public void setEmotionIdIsSet(boolean value) {
      if (!value) {
        this.emotionId = null;
      }
    }

    public EmotionItem getEmotionItem() {
      return this.emotionItem;
    }

    public editEmotion_args setEmotionItem(EmotionItem emotionItem) {
      this.emotionItem = emotionItem;
      return this;
    }

    public void unsetEmotionItem() {
      this.emotionItem = null;
    }

    /** Returns true if field emotionItem is set (has been assigned a value) and false otherwise */
    public boolean isSetEmotionItem() {
      return this.emotionItem != null;
    }

    public void setEmotionItemIsSet(boolean value) {
      if (!value) {
        this.emotionItem = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMOTION_ID:
        if (value == null) {
          unsetEmotionId();
        } else {
          setEmotionId((String)value);
        }
        break;

      case EMOTION_ITEM:
        if (value == null) {
          unsetEmotionItem();
        } else {
          setEmotionItem((EmotionItem)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMOTION_ID:
        return getEmotionId();

      case EMOTION_ITEM:
        return getEmotionItem();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMOTION_ID:
        return isSetEmotionId();
      case EMOTION_ITEM:
        return isSetEmotionItem();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editEmotion_args)
        return this.equals((editEmotion_args)that);
      return false;
    }

    public boolean equals(editEmotion_args that) {
      if (that == null)
        return false;

      boolean this_present_emotionId = true && this.isSetEmotionId();
      boolean that_present_emotionId = true && that.isSetEmotionId();
      if (this_present_emotionId || that_present_emotionId) {
        if (!(this_present_emotionId && that_present_emotionId))
          return false;
        if (!this.emotionId.equals(that.emotionId))
          return false;
      }

      boolean this_present_emotionItem = true && this.isSetEmotionItem();
      boolean that_present_emotionItem = true && that.isSetEmotionItem();
      if (this_present_emotionItem || that_present_emotionItem) {
        if (!(this_present_emotionItem && that_present_emotionItem))
          return false;
        if (!this.emotionItem.equals(that.emotionItem))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(editEmotion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEmotionId()).compareTo(other.isSetEmotionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmotionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emotionId, other.emotionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEmotionItem()).compareTo(other.isSetEmotionItem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmotionItem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emotionItem, other.emotionItem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editEmotion_args(");
      boolean first = true;

      sb.append("emotionId:");
      if (this.emotionId == null) {
        sb.append("null");
      } else {
        sb.append(this.emotionId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("emotionItem:");
      if (this.emotionItem == null) {
        sb.append("null");
      } else {
        sb.append(this.emotionItem);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (emotionItem != null) {
        emotionItem.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editEmotion_argsStandardSchemeFactory implements SchemeFactory {
      public editEmotion_argsStandardScheme getScheme() {
        return new editEmotion_argsStandardScheme();
      }
    }

    private static class editEmotion_argsStandardScheme extends StandardScheme<editEmotion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editEmotion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMOTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.emotionId = iprot.readString();
                struct.setEmotionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EMOTION_ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.emotionItem = new EmotionItem();
                struct.emotionItem.read(iprot);
                struct.setEmotionItemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editEmotion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.emotionId != null) {
          oprot.writeFieldBegin(EMOTION_ID_FIELD_DESC);
          oprot.writeString(struct.emotionId);
          oprot.writeFieldEnd();
        }
        if (struct.emotionItem != null) {
          oprot.writeFieldBegin(EMOTION_ITEM_FIELD_DESC);
          struct.emotionItem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editEmotion_argsTupleSchemeFactory implements SchemeFactory {
      public editEmotion_argsTupleScheme getScheme() {
        return new editEmotion_argsTupleScheme();
      }
    }

    private static class editEmotion_argsTupleScheme extends TupleScheme<editEmotion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editEmotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmotionId()) {
          optionals.set(0);
        }
        if (struct.isSetEmotionItem()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetEmotionId()) {
          oprot.writeString(struct.emotionId);
        }
        if (struct.isSetEmotionItem()) {
          struct.emotionItem.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editEmotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.emotionId = iprot.readString();
          struct.setEmotionIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.emotionItem = new EmotionItem();
          struct.emotionItem.read(iprot);
          struct.setEmotionItemIsSet(true);
        }
      }
    }

  }

  public static class editEmotion_result implements org.apache.thrift.TBase<editEmotion_result, editEmotion_result._Fields>, java.io.Serializable, Cloneable, Comparable<editEmotion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("editEmotion_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new editEmotion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new editEmotion_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(editEmotion_result.class, metaDataMap);
    }

    public editEmotion_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public editEmotion_result(editEmotion_result other) {
    }

    public editEmotion_result deepCopy() {
      return new editEmotion_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof editEmotion_result)
        return this.equals((editEmotion_result)that);
      return false;
    }

    public boolean equals(editEmotion_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(editEmotion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("editEmotion_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class editEmotion_resultStandardSchemeFactory implements SchemeFactory {
      public editEmotion_resultStandardScheme getScheme() {
        return new editEmotion_resultStandardScheme();
      }
    }

    private static class editEmotion_resultStandardScheme extends StandardScheme<editEmotion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, editEmotion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, editEmotion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class editEmotion_resultTupleSchemeFactory implements SchemeFactory {
      public editEmotion_resultTupleScheme getScheme() {
        return new editEmotion_resultTupleScheme();
      }
    }

    private static class editEmotion_resultTupleScheme extends TupleScheme<editEmotion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, editEmotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, editEmotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class deleteEmotion_args implements org.apache.thrift.TBase<deleteEmotion_args, deleteEmotion_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteEmotion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEmotion_args");

    private static final org.apache.thrift.protocol.TField EMOTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("emotionId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEmotion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEmotion_argsTupleSchemeFactory());
    }

    public String emotionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EMOTION_ID((short)1, "emotionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EMOTION_ID
            return EMOTION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EMOTION_ID, new org.apache.thrift.meta_data.FieldMetaData("emotionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEmotion_args.class, metaDataMap);
    }

    public deleteEmotion_args() {
    }

    public deleteEmotion_args(
      String emotionId)
    {
      this();
      this.emotionId = emotionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEmotion_args(deleteEmotion_args other) {
      if (other.isSetEmotionId()) {
        this.emotionId = other.emotionId;
      }
    }

    public deleteEmotion_args deepCopy() {
      return new deleteEmotion_args(this);
    }

    @Override
    public void clear() {
      this.emotionId = null;
    }

    public String getEmotionId() {
      return this.emotionId;
    }

    public deleteEmotion_args setEmotionId(String emotionId) {
      this.emotionId = emotionId;
      return this;
    }

    public void unsetEmotionId() {
      this.emotionId = null;
    }

    /** Returns true if field emotionId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmotionId() {
      return this.emotionId != null;
    }

    public void setEmotionIdIsSet(boolean value) {
      if (!value) {
        this.emotionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EMOTION_ID:
        if (value == null) {
          unsetEmotionId();
        } else {
          setEmotionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EMOTION_ID:
        return getEmotionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EMOTION_ID:
        return isSetEmotionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEmotion_args)
        return this.equals((deleteEmotion_args)that);
      return false;
    }

    public boolean equals(deleteEmotion_args that) {
      if (that == null)
        return false;

      boolean this_present_emotionId = true && this.isSetEmotionId();
      boolean that_present_emotionId = true && that.isSetEmotionId();
      if (this_present_emotionId || that_present_emotionId) {
        if (!(this_present_emotionId && that_present_emotionId))
          return false;
        if (!this.emotionId.equals(that.emotionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteEmotion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEmotionId()).compareTo(other.isSetEmotionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmotionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emotionId, other.emotionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEmotion_args(");
      boolean first = true;

      sb.append("emotionId:");
      if (this.emotionId == null) {
        sb.append("null");
      } else {
        sb.append(this.emotionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEmotion_argsStandardSchemeFactory implements SchemeFactory {
      public deleteEmotion_argsStandardScheme getScheme() {
        return new deleteEmotion_argsStandardScheme();
      }
    }

    private static class deleteEmotion_argsStandardScheme extends StandardScheme<deleteEmotion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEmotion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EMOTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.emotionId = iprot.readString();
                struct.setEmotionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEmotion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.emotionId != null) {
          oprot.writeFieldBegin(EMOTION_ID_FIELD_DESC);
          oprot.writeString(struct.emotionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEmotion_argsTupleSchemeFactory implements SchemeFactory {
      public deleteEmotion_argsTupleScheme getScheme() {
        return new deleteEmotion_argsTupleScheme();
      }
    }

    private static class deleteEmotion_argsTupleScheme extends TupleScheme<deleteEmotion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEmotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEmotionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEmotionId()) {
          oprot.writeString(struct.emotionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEmotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.emotionId = iprot.readString();
          struct.setEmotionIdIsSet(true);
        }
      }
    }

  }

  public static class deleteEmotion_result implements org.apache.thrift.TBase<deleteEmotion_result, deleteEmotion_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteEmotion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteEmotion_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteEmotion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteEmotion_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteEmotion_result.class, metaDataMap);
    }

    public deleteEmotion_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteEmotion_result(deleteEmotion_result other) {
    }

    public deleteEmotion_result deepCopy() {
      return new deleteEmotion_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteEmotion_result)
        return this.equals((deleteEmotion_result)that);
      return false;
    }

    public boolean equals(deleteEmotion_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteEmotion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteEmotion_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteEmotion_resultStandardSchemeFactory implements SchemeFactory {
      public deleteEmotion_resultStandardScheme getScheme() {
        return new deleteEmotion_resultStandardScheme();
      }
    }

    private static class deleteEmotion_resultStandardScheme extends StandardScheme<deleteEmotion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteEmotion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteEmotion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteEmotion_resultTupleSchemeFactory implements SchemeFactory {
      public deleteEmotion_resultTupleScheme getScheme() {
        return new deleteEmotion_resultTupleScheme();
      }
    }

    private static class deleteEmotion_resultTupleScheme extends TupleScheme<deleteEmotion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteEmotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteEmotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class kickUser_args implements org.apache.thrift.TBase<kickUser_args, kickUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<kickUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("kickUser_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new kickUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new kickUser_argsTupleSchemeFactory());
    }

    public String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(kickUser_args.class, metaDataMap);
    }

    public kickUser_args() {
    }

    public kickUser_args(
      String userId)
    {
      this();
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public kickUser_args(kickUser_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public kickUser_args deepCopy() {
      return new kickUser_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public kickUser_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof kickUser_args)
        return this.equals((kickUser_args)that);
      return false;
    }

    public boolean equals(kickUser_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(kickUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("kickUser_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class kickUser_argsStandardSchemeFactory implements SchemeFactory {
      public kickUser_argsStandardScheme getScheme() {
        return new kickUser_argsStandardScheme();
      }
    }

    private static class kickUser_argsStandardScheme extends StandardScheme<kickUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, kickUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, kickUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class kickUser_argsTupleSchemeFactory implements SchemeFactory {
      public kickUser_argsTupleScheme getScheme() {
        return new kickUser_argsTupleScheme();
      }
    }

    private static class kickUser_argsTupleScheme extends TupleScheme<kickUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, kickUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, kickUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class kickUser_result implements org.apache.thrift.TBase<kickUser_result, kickUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<kickUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("kickUser_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new kickUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new kickUser_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(kickUser_result.class, metaDataMap);
    }

    public kickUser_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public kickUser_result(kickUser_result other) {
    }

    public kickUser_result deepCopy() {
      return new kickUser_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof kickUser_result)
        return this.equals((kickUser_result)that);
      return false;
    }

    public boolean equals(kickUser_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(kickUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("kickUser_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class kickUser_resultStandardSchemeFactory implements SchemeFactory {
      public kickUser_resultStandardScheme getScheme() {
        return new kickUser_resultStandardScheme();
      }
    }

    private static class kickUser_resultStandardScheme extends StandardScheme<kickUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, kickUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, kickUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class kickUser_resultTupleSchemeFactory implements SchemeFactory {
      public kickUser_resultTupleScheme getScheme() {
        return new kickUser_resultTupleScheme();
      }
    }

    private static class kickUser_resultTupleScheme extends TupleScheme<kickUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, kickUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, kickUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getRoomStatisticByDate_args implements org.apache.thrift.TBase<getRoomStatisticByDate_args, getRoomStatisticByDate_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRoomStatisticByDate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoomStatisticByDate_args");

    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRoomStatisticByDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRoomStatisticByDate_argsTupleSchemeFactory());
    }

    public int date; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATE((short)1, "date");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATE
            return DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoomStatisticByDate_args.class, metaDataMap);
    }

    public getRoomStatisticByDate_args() {
    }

    public getRoomStatisticByDate_args(
      int date)
    {
      this();
      this.date = date;
      setDateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoomStatisticByDate_args(getRoomStatisticByDate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.date = other.date;
    }

    public getRoomStatisticByDate_args deepCopy() {
      return new getRoomStatisticByDate_args(this);
    }

    @Override
    public void clear() {
      setDateIsSet(false);
      this.date = 0;
    }

    public int getDate() {
      return this.date;
    }

    public getRoomStatisticByDate_args setDate(int date) {
      this.date = date;
      setDateIsSet(true);
      return this;
    }

    public void unsetDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    public void setDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATE:
        return Integer.valueOf(getDate());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATE:
        return isSetDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoomStatisticByDate_args)
        return this.equals((getRoomStatisticByDate_args)that);
      return false;
    }

    public boolean equals(getRoomStatisticByDate_args that) {
      if (that == null)
        return false;

      boolean this_present_date = true;
      boolean that_present_date = true;
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (this.date != that.date)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRoomStatisticByDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoomStatisticByDate_args(");
      boolean first = true;

      sb.append("date:");
      sb.append(this.date);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoomStatisticByDate_argsStandardSchemeFactory implements SchemeFactory {
      public getRoomStatisticByDate_argsStandardScheme getScheme() {
        return new getRoomStatisticByDate_argsStandardScheme();
      }
    }

    private static class getRoomStatisticByDate_argsStandardScheme extends StandardScheme<getRoomStatisticByDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoomStatisticByDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.date = iprot.readI32();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoomStatisticByDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeI32(struct.date);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoomStatisticByDate_argsTupleSchemeFactory implements SchemeFactory {
      public getRoomStatisticByDate_argsTupleScheme getScheme() {
        return new getRoomStatisticByDate_argsTupleScheme();
      }
    }

    private static class getRoomStatisticByDate_argsTupleScheme extends TupleScheme<getRoomStatisticByDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoomStatisticByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDate()) {
          oprot.writeI32(struct.date);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoomStatisticByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.date = iprot.readI32();
          struct.setDateIsSet(true);
        }
      }
    }

  }

  public static class getRoomStatisticByDate_result implements org.apache.thrift.TBase<getRoomStatisticByDate_result, getRoomStatisticByDate_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRoomStatisticByDate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoomStatisticByDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRoomStatisticByDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRoomStatisticByDate_resultTupleSchemeFactory());
    }

    public RoomStatistic success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RoomStatistic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoomStatisticByDate_result.class, metaDataMap);
    }

    public getRoomStatisticByDate_result() {
    }

    public getRoomStatisticByDate_result(
      RoomStatistic success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoomStatisticByDate_result(getRoomStatisticByDate_result other) {
      if (other.isSetSuccess()) {
        this.success = new RoomStatistic(other.success);
      }
    }

    public getRoomStatisticByDate_result deepCopy() {
      return new getRoomStatisticByDate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RoomStatistic getSuccess() {
      return this.success;
    }

    public getRoomStatisticByDate_result setSuccess(RoomStatistic success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RoomStatistic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoomStatisticByDate_result)
        return this.equals((getRoomStatisticByDate_result)that);
      return false;
    }

    public boolean equals(getRoomStatisticByDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRoomStatisticByDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoomStatisticByDate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoomStatisticByDate_resultStandardSchemeFactory implements SchemeFactory {
      public getRoomStatisticByDate_resultStandardScheme getScheme() {
        return new getRoomStatisticByDate_resultStandardScheme();
      }
    }

    private static class getRoomStatisticByDate_resultStandardScheme extends StandardScheme<getRoomStatisticByDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoomStatisticByDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RoomStatistic();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoomStatisticByDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoomStatisticByDate_resultTupleSchemeFactory implements SchemeFactory {
      public getRoomStatisticByDate_resultTupleScheme getScheme() {
        return new getRoomStatisticByDate_resultTupleScheme();
      }
    }

    private static class getRoomStatisticByDate_resultTupleScheme extends TupleScheme<getRoomStatisticByDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoomStatisticByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoomStatisticByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RoomStatistic();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEmotionStatisticByDate_args implements org.apache.thrift.TBase<getEmotionStatisticByDate_args, getEmotionStatisticByDate_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEmotionStatisticByDate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmotionStatisticByDate_args");

    private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEmotionStatisticByDate_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEmotionStatisticByDate_argsTupleSchemeFactory());
    }

    public int date; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATE((short)1, "date");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATE
            return DATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmotionStatisticByDate_args.class, metaDataMap);
    }

    public getEmotionStatisticByDate_args() {
    }

    public getEmotionStatisticByDate_args(
      int date)
    {
      this();
      this.date = date;
      setDateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEmotionStatisticByDate_args(getEmotionStatisticByDate_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.date = other.date;
    }

    public getEmotionStatisticByDate_args deepCopy() {
      return new getEmotionStatisticByDate_args(this);
    }

    @Override
    public void clear() {
      setDateIsSet(false);
      this.date = 0;
    }

    public int getDate() {
      return this.date;
    }

    public getEmotionStatisticByDate_args setDate(int date) {
      this.date = date;
      setDateIsSet(true);
      return this;
    }

    public void unsetDate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    /** Returns true if field date is set (has been assigned a value) and false otherwise */
    public boolean isSetDate() {
      return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
    }

    public void setDateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATE:
        if (value == null) {
          unsetDate();
        } else {
          setDate((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATE:
        return Integer.valueOf(getDate());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATE:
        return isSetDate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEmotionStatisticByDate_args)
        return this.equals((getEmotionStatisticByDate_args)that);
      return false;
    }

    public boolean equals(getEmotionStatisticByDate_args that) {
      if (that == null)
        return false;

      boolean this_present_date = true;
      boolean that_present_date = true;
      if (this_present_date || that_present_date) {
        if (!(this_present_date && that_present_date))
          return false;
        if (this.date != that.date)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getEmotionStatisticByDate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEmotionStatisticByDate_args(");
      boolean first = true;

      sb.append("date:");
      sb.append(this.date);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEmotionStatisticByDate_argsStandardSchemeFactory implements SchemeFactory {
      public getEmotionStatisticByDate_argsStandardScheme getScheme() {
        return new getEmotionStatisticByDate_argsStandardScheme();
      }
    }

    private static class getEmotionStatisticByDate_argsStandardScheme extends StandardScheme<getEmotionStatisticByDate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEmotionStatisticByDate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.date = iprot.readI32();
                struct.setDateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEmotionStatisticByDate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeI32(struct.date);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEmotionStatisticByDate_argsTupleSchemeFactory implements SchemeFactory {
      public getEmotionStatisticByDate_argsTupleScheme getScheme() {
        return new getEmotionStatisticByDate_argsTupleScheme();
      }
    }

    private static class getEmotionStatisticByDate_argsTupleScheme extends TupleScheme<getEmotionStatisticByDate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEmotionStatisticByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDate()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDate()) {
          oprot.writeI32(struct.date);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEmotionStatisticByDate_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.date = iprot.readI32();
          struct.setDateIsSet(true);
        }
      }
    }

  }

  public static class getEmotionStatisticByDate_result implements org.apache.thrift.TBase<getEmotionStatisticByDate_result, getEmotionStatisticByDate_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEmotionStatisticByDate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmotionStatisticByDate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEmotionStatisticByDate_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEmotionStatisticByDate_resultTupleSchemeFactory());
    }

    public EmotionStatistic success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EmotionStatistic.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmotionStatisticByDate_result.class, metaDataMap);
    }

    public getEmotionStatisticByDate_result() {
    }

    public getEmotionStatisticByDate_result(
      EmotionStatistic success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEmotionStatisticByDate_result(getEmotionStatisticByDate_result other) {
      if (other.isSetSuccess()) {
        this.success = new EmotionStatistic(other.success);
      }
    }

    public getEmotionStatisticByDate_result deepCopy() {
      return new getEmotionStatisticByDate_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public EmotionStatistic getSuccess() {
      return this.success;
    }

    public getEmotionStatisticByDate_result setSuccess(EmotionStatistic success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EmotionStatistic)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEmotionStatisticByDate_result)
        return this.equals((getEmotionStatisticByDate_result)that);
      return false;
    }

    public boolean equals(getEmotionStatisticByDate_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getEmotionStatisticByDate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEmotionStatisticByDate_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEmotionStatisticByDate_resultStandardSchemeFactory implements SchemeFactory {
      public getEmotionStatisticByDate_resultStandardScheme getScheme() {
        return new getEmotionStatisticByDate_resultStandardScheme();
      }
    }

    private static class getEmotionStatisticByDate_resultStandardScheme extends StandardScheme<getEmotionStatisticByDate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEmotionStatisticByDate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new EmotionStatistic();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEmotionStatisticByDate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEmotionStatisticByDate_resultTupleSchemeFactory implements SchemeFactory {
      public getEmotionStatisticByDate_resultTupleScheme getScheme() {
        return new getEmotionStatisticByDate_resultTupleScheme();
      }
    }

    private static class getEmotionStatisticByDate_resultTupleScheme extends TupleScheme<getEmotionStatisticByDate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEmotionStatisticByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEmotionStatisticByDate_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new EmotionStatistic();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteAllEmotionInGroup_args implements org.apache.thrift.TBase<deleteAllEmotionInGroup_args, deleteAllEmotionInGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAllEmotionInGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAllEmotionInGroup_args");

    private static final org.apache.thrift.protocol.TField GROUP_EMOTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupEmotionId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteAllEmotionInGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteAllEmotionInGroup_argsTupleSchemeFactory());
    }

    public String groupEmotionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_EMOTION_ID((short)1, "groupEmotionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_EMOTION_ID
            return GROUP_EMOTION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_EMOTION_ID, new org.apache.thrift.meta_data.FieldMetaData("groupEmotionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAllEmotionInGroup_args.class, metaDataMap);
    }

    public deleteAllEmotionInGroup_args() {
    }

    public deleteAllEmotionInGroup_args(
      String groupEmotionId)
    {
      this();
      this.groupEmotionId = groupEmotionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAllEmotionInGroup_args(deleteAllEmotionInGroup_args other) {
      if (other.isSetGroupEmotionId()) {
        this.groupEmotionId = other.groupEmotionId;
      }
    }

    public deleteAllEmotionInGroup_args deepCopy() {
      return new deleteAllEmotionInGroup_args(this);
    }

    @Override
    public void clear() {
      this.groupEmotionId = null;
    }

    public String getGroupEmotionId() {
      return this.groupEmotionId;
    }

    public deleteAllEmotionInGroup_args setGroupEmotionId(String groupEmotionId) {
      this.groupEmotionId = groupEmotionId;
      return this;
    }

    public void unsetGroupEmotionId() {
      this.groupEmotionId = null;
    }

    /** Returns true if field groupEmotionId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupEmotionId() {
      return this.groupEmotionId != null;
    }

    public void setGroupEmotionIdIsSet(boolean value) {
      if (!value) {
        this.groupEmotionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_EMOTION_ID:
        if (value == null) {
          unsetGroupEmotionId();
        } else {
          setGroupEmotionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_EMOTION_ID:
        return getGroupEmotionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_EMOTION_ID:
        return isSetGroupEmotionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAllEmotionInGroup_args)
        return this.equals((deleteAllEmotionInGroup_args)that);
      return false;
    }

    public boolean equals(deleteAllEmotionInGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_groupEmotionId = true && this.isSetGroupEmotionId();
      boolean that_present_groupEmotionId = true && that.isSetGroupEmotionId();
      if (this_present_groupEmotionId || that_present_groupEmotionId) {
        if (!(this_present_groupEmotionId && that_present_groupEmotionId))
          return false;
        if (!this.groupEmotionId.equals(that.groupEmotionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteAllEmotionInGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroupEmotionId()).compareTo(other.isSetGroupEmotionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupEmotionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupEmotionId, other.groupEmotionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteAllEmotionInGroup_args(");
      boolean first = true;

      sb.append("groupEmotionId:");
      if (this.groupEmotionId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupEmotionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAllEmotionInGroup_argsStandardSchemeFactory implements SchemeFactory {
      public deleteAllEmotionInGroup_argsStandardScheme getScheme() {
        return new deleteAllEmotionInGroup_argsStandardScheme();
      }
    }

    private static class deleteAllEmotionInGroup_argsStandardScheme extends StandardScheme<deleteAllEmotionInGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAllEmotionInGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_EMOTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupEmotionId = iprot.readString();
                struct.setGroupEmotionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAllEmotionInGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.groupEmotionId != null) {
          oprot.writeFieldBegin(GROUP_EMOTION_ID_FIELD_DESC);
          oprot.writeString(struct.groupEmotionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAllEmotionInGroup_argsTupleSchemeFactory implements SchemeFactory {
      public deleteAllEmotionInGroup_argsTupleScheme getScheme() {
        return new deleteAllEmotionInGroup_argsTupleScheme();
      }
    }

    private static class deleteAllEmotionInGroup_argsTupleScheme extends TupleScheme<deleteAllEmotionInGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAllEmotionInGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupEmotionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGroupEmotionId()) {
          oprot.writeString(struct.groupEmotionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAllEmotionInGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.groupEmotionId = iprot.readString();
          struct.setGroupEmotionIdIsSet(true);
        }
      }
    }

  }

  public static class deleteAllEmotionInGroup_result implements org.apache.thrift.TBase<deleteAllEmotionInGroup_result, deleteAllEmotionInGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAllEmotionInGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAllEmotionInGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteAllEmotionInGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteAllEmotionInGroup_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAllEmotionInGroup_result.class, metaDataMap);
    }

    public deleteAllEmotionInGroup_result() {
    }

    public deleteAllEmotionInGroup_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAllEmotionInGroup_result(deleteAllEmotionInGroup_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteAllEmotionInGroup_result deepCopy() {
      return new deleteAllEmotionInGroup_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteAllEmotionInGroup_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAllEmotionInGroup_result)
        return this.equals((deleteAllEmotionInGroup_result)that);
      return false;
    }

    public boolean equals(deleteAllEmotionInGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteAllEmotionInGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteAllEmotionInGroup_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAllEmotionInGroup_resultStandardSchemeFactory implements SchemeFactory {
      public deleteAllEmotionInGroup_resultStandardScheme getScheme() {
        return new deleteAllEmotionInGroup_resultStandardScheme();
      }
    }

    private static class deleteAllEmotionInGroup_resultStandardScheme extends StandardScheme<deleteAllEmotionInGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAllEmotionInGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAllEmotionInGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAllEmotionInGroup_resultTupleSchemeFactory implements SchemeFactory {
      public deleteAllEmotionInGroup_resultTupleScheme getScheme() {
        return new deleteAllEmotionInGroup_resultTupleScheme();
      }
    }

    private static class deleteAllEmotionInGroup_resultTupleScheme extends TupleScheme<deleteAllEmotionInGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAllEmotionInGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAllEmotionInGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class deleteGroupEmotion_args implements org.apache.thrift.TBase<deleteGroupEmotion_args, deleteGroupEmotion_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteGroupEmotion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteGroupEmotion_args");

    private static final org.apache.thrift.protocol.TField GROUP_EMOTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupEmotionId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteGroupEmotion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteGroupEmotion_argsTupleSchemeFactory());
    }

    public String groupEmotionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_EMOTION_ID((short)1, "groupEmotionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_EMOTION_ID
            return GROUP_EMOTION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_EMOTION_ID, new org.apache.thrift.meta_data.FieldMetaData("groupEmotionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteGroupEmotion_args.class, metaDataMap);
    }

    public deleteGroupEmotion_args() {
    }

    public deleteGroupEmotion_args(
      String groupEmotionId)
    {
      this();
      this.groupEmotionId = groupEmotionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteGroupEmotion_args(deleteGroupEmotion_args other) {
      if (other.isSetGroupEmotionId()) {
        this.groupEmotionId = other.groupEmotionId;
      }
    }

    public deleteGroupEmotion_args deepCopy() {
      return new deleteGroupEmotion_args(this);
    }

    @Override
    public void clear() {
      this.groupEmotionId = null;
    }

    public String getGroupEmotionId() {
      return this.groupEmotionId;
    }

    public deleteGroupEmotion_args setGroupEmotionId(String groupEmotionId) {
      this.groupEmotionId = groupEmotionId;
      return this;
    }

    public void unsetGroupEmotionId() {
      this.groupEmotionId = null;
    }

    /** Returns true if field groupEmotionId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupEmotionId() {
      return this.groupEmotionId != null;
    }

    public void setGroupEmotionIdIsSet(boolean value) {
      if (!value) {
        this.groupEmotionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_EMOTION_ID:
        if (value == null) {
          unsetGroupEmotionId();
        } else {
          setGroupEmotionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_EMOTION_ID:
        return getGroupEmotionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_EMOTION_ID:
        return isSetGroupEmotionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteGroupEmotion_args)
        return this.equals((deleteGroupEmotion_args)that);
      return false;
    }

    public boolean equals(deleteGroupEmotion_args that) {
      if (that == null)
        return false;

      boolean this_present_groupEmotionId = true && this.isSetGroupEmotionId();
      boolean that_present_groupEmotionId = true && that.isSetGroupEmotionId();
      if (this_present_groupEmotionId || that_present_groupEmotionId) {
        if (!(this_present_groupEmotionId && that_present_groupEmotionId))
          return false;
        if (!this.groupEmotionId.equals(that.groupEmotionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteGroupEmotion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroupEmotionId()).compareTo(other.isSetGroupEmotionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupEmotionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupEmotionId, other.groupEmotionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteGroupEmotion_args(");
      boolean first = true;

      sb.append("groupEmotionId:");
      if (this.groupEmotionId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupEmotionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteGroupEmotion_argsStandardSchemeFactory implements SchemeFactory {
      public deleteGroupEmotion_argsStandardScheme getScheme() {
        return new deleteGroupEmotion_argsStandardScheme();
      }
    }

    private static class deleteGroupEmotion_argsStandardScheme extends StandardScheme<deleteGroupEmotion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteGroupEmotion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_EMOTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupEmotionId = iprot.readString();
                struct.setGroupEmotionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteGroupEmotion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.groupEmotionId != null) {
          oprot.writeFieldBegin(GROUP_EMOTION_ID_FIELD_DESC);
          oprot.writeString(struct.groupEmotionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteGroupEmotion_argsTupleSchemeFactory implements SchemeFactory {
      public deleteGroupEmotion_argsTupleScheme getScheme() {
        return new deleteGroupEmotion_argsTupleScheme();
      }
    }

    private static class deleteGroupEmotion_argsTupleScheme extends TupleScheme<deleteGroupEmotion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteGroupEmotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupEmotionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGroupEmotionId()) {
          oprot.writeString(struct.groupEmotionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteGroupEmotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.groupEmotionId = iprot.readString();
          struct.setGroupEmotionIdIsSet(true);
        }
      }
    }

  }

  public static class deleteGroupEmotion_result implements org.apache.thrift.TBase<deleteGroupEmotion_result, deleteGroupEmotion_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteGroupEmotion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteGroupEmotion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteGroupEmotion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteGroupEmotion_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteGroupEmotion_result.class, metaDataMap);
    }

    public deleteGroupEmotion_result() {
    }

    public deleteGroupEmotion_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteGroupEmotion_result(deleteGroupEmotion_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public deleteGroupEmotion_result deepCopy() {
      return new deleteGroupEmotion_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteGroupEmotion_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteGroupEmotion_result)
        return this.equals((deleteGroupEmotion_result)that);
      return false;
    }

    public boolean equals(deleteGroupEmotion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(deleteGroupEmotion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteGroupEmotion_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteGroupEmotion_resultStandardSchemeFactory implements SchemeFactory {
      public deleteGroupEmotion_resultStandardScheme getScheme() {
        return new deleteGroupEmotion_resultStandardScheme();
      }
    }

    private static class deleteGroupEmotion_resultStandardScheme extends StandardScheme<deleteGroupEmotion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteGroupEmotion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteGroupEmotion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteGroupEmotion_resultTupleSchemeFactory implements SchemeFactory {
      public deleteGroupEmotion_resultTupleScheme getScheme() {
        return new deleteGroupEmotion_resultTupleScheme();
      }
    }

    private static class deleteGroupEmotion_resultTupleScheme extends TupleScheme<deleteGroupEmotion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteGroupEmotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteGroupEmotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addGroupEmotion_args implements org.apache.thrift.TBase<addGroupEmotion_args, addGroupEmotion_args._Fields>, java.io.Serializable, Cloneable, Comparable<addGroupEmotion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGroupEmotion_args");

    private static final org.apache.thrift.protocol.TField GROUP_EMOTION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("groupEmotionName", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addGroupEmotion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addGroupEmotion_argsTupleSchemeFactory());
    }

    public String groupEmotionName; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_EMOTION_NAME((short)1, "groupEmotionName");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_EMOTION_NAME
            return GROUP_EMOTION_NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_EMOTION_NAME, new org.apache.thrift.meta_data.FieldMetaData("groupEmotionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGroupEmotion_args.class, metaDataMap);
    }

    public addGroupEmotion_args() {
    }

    public addGroupEmotion_args(
      String groupEmotionName)
    {
      this();
      this.groupEmotionName = groupEmotionName;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGroupEmotion_args(addGroupEmotion_args other) {
      if (other.isSetGroupEmotionName()) {
        this.groupEmotionName = other.groupEmotionName;
      }
    }

    public addGroupEmotion_args deepCopy() {
      return new addGroupEmotion_args(this);
    }

    @Override
    public void clear() {
      this.groupEmotionName = null;
    }

    public String getGroupEmotionName() {
      return this.groupEmotionName;
    }

    public addGroupEmotion_args setGroupEmotionName(String groupEmotionName) {
      this.groupEmotionName = groupEmotionName;
      return this;
    }

    public void unsetGroupEmotionName() {
      this.groupEmotionName = null;
    }

    /** Returns true if field groupEmotionName is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupEmotionName() {
      return this.groupEmotionName != null;
    }

    public void setGroupEmotionNameIsSet(boolean value) {
      if (!value) {
        this.groupEmotionName = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_EMOTION_NAME:
        if (value == null) {
          unsetGroupEmotionName();
        } else {
          setGroupEmotionName((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_EMOTION_NAME:
        return getGroupEmotionName();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_EMOTION_NAME:
        return isSetGroupEmotionName();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addGroupEmotion_args)
        return this.equals((addGroupEmotion_args)that);
      return false;
    }

    public boolean equals(addGroupEmotion_args that) {
      if (that == null)
        return false;

      boolean this_present_groupEmotionName = true && this.isSetGroupEmotionName();
      boolean that_present_groupEmotionName = true && that.isSetGroupEmotionName();
      if (this_present_groupEmotionName || that_present_groupEmotionName) {
        if (!(this_present_groupEmotionName && that_present_groupEmotionName))
          return false;
        if (!this.groupEmotionName.equals(that.groupEmotionName))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addGroupEmotion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroupEmotionName()).compareTo(other.isSetGroupEmotionName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupEmotionName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupEmotionName, other.groupEmotionName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addGroupEmotion_args(");
      boolean first = true;

      sb.append("groupEmotionName:");
      if (this.groupEmotionName == null) {
        sb.append("null");
      } else {
        sb.append(this.groupEmotionName);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addGroupEmotion_argsStandardSchemeFactory implements SchemeFactory {
      public addGroupEmotion_argsStandardScheme getScheme() {
        return new addGroupEmotion_argsStandardScheme();
      }
    }

    private static class addGroupEmotion_argsStandardScheme extends StandardScheme<addGroupEmotion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addGroupEmotion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_EMOTION_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupEmotionName = iprot.readString();
                struct.setGroupEmotionNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addGroupEmotion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.groupEmotionName != null) {
          oprot.writeFieldBegin(GROUP_EMOTION_NAME_FIELD_DESC);
          oprot.writeString(struct.groupEmotionName);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addGroupEmotion_argsTupleSchemeFactory implements SchemeFactory {
      public addGroupEmotion_argsTupleScheme getScheme() {
        return new addGroupEmotion_argsTupleScheme();
      }
    }

    private static class addGroupEmotion_argsTupleScheme extends TupleScheme<addGroupEmotion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addGroupEmotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupEmotionName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGroupEmotionName()) {
          oprot.writeString(struct.groupEmotionName);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addGroupEmotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.groupEmotionName = iprot.readString();
          struct.setGroupEmotionNameIsSet(true);
        }
      }
    }

  }

  public static class addGroupEmotion_result implements org.apache.thrift.TBase<addGroupEmotion_result, addGroupEmotion_result._Fields>, java.io.Serializable, Cloneable, Comparable<addGroupEmotion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addGroupEmotion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addGroupEmotion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addGroupEmotion_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addGroupEmotion_result.class, metaDataMap);
    }

    public addGroupEmotion_result() {
    }

    public addGroupEmotion_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addGroupEmotion_result(addGroupEmotion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addGroupEmotion_result deepCopy() {
      return new addGroupEmotion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public addGroupEmotion_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addGroupEmotion_result)
        return this.equals((addGroupEmotion_result)that);
      return false;
    }

    public boolean equals(addGroupEmotion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(addGroupEmotion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addGroupEmotion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addGroupEmotion_resultStandardSchemeFactory implements SchemeFactory {
      public addGroupEmotion_resultStandardScheme getScheme() {
        return new addGroupEmotion_resultStandardScheme();
      }
    }

    private static class addGroupEmotion_resultStandardScheme extends StandardScheme<addGroupEmotion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addGroupEmotion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addGroupEmotion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addGroupEmotion_resultTupleSchemeFactory implements SchemeFactory {
      public addGroupEmotion_resultTupleScheme getScheme() {
        return new addGroupEmotion_resultTupleScheme();
      }
    }

    private static class addGroupEmotion_resultTupleScheme extends TupleScheme<addGroupEmotion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addGroupEmotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addGroupEmotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class gelAllGroupEmotion_args implements org.apache.thrift.TBase<gelAllGroupEmotion_args, gelAllGroupEmotion_args._Fields>, java.io.Serializable, Cloneable, Comparable<gelAllGroupEmotion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gelAllGroupEmotion_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gelAllGroupEmotion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gelAllGroupEmotion_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gelAllGroupEmotion_args.class, metaDataMap);
    }

    public gelAllGroupEmotion_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gelAllGroupEmotion_args(gelAllGroupEmotion_args other) {
    }

    public gelAllGroupEmotion_args deepCopy() {
      return new gelAllGroupEmotion_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gelAllGroupEmotion_args)
        return this.equals((gelAllGroupEmotion_args)that);
      return false;
    }

    public boolean equals(gelAllGroupEmotion_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(gelAllGroupEmotion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gelAllGroupEmotion_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gelAllGroupEmotion_argsStandardSchemeFactory implements SchemeFactory {
      public gelAllGroupEmotion_argsStandardScheme getScheme() {
        return new gelAllGroupEmotion_argsStandardScheme();
      }
    }

    private static class gelAllGroupEmotion_argsStandardScheme extends StandardScheme<gelAllGroupEmotion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gelAllGroupEmotion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gelAllGroupEmotion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gelAllGroupEmotion_argsTupleSchemeFactory implements SchemeFactory {
      public gelAllGroupEmotion_argsTupleScheme getScheme() {
        return new gelAllGroupEmotion_argsTupleScheme();
      }
    }

    private static class gelAllGroupEmotion_argsTupleScheme extends TupleScheme<gelAllGroupEmotion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gelAllGroupEmotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gelAllGroupEmotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class gelAllGroupEmotion_result implements org.apache.thrift.TBase<gelAllGroupEmotion_result, gelAllGroupEmotion_result._Fields>, java.io.Serializable, Cloneable, Comparable<gelAllGroupEmotion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gelAllGroupEmotion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new gelAllGroupEmotion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new gelAllGroupEmotion_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gelAllGroupEmotion_result.class, metaDataMap);
    }

    public gelAllGroupEmotion_result() {
    }

    public gelAllGroupEmotion_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gelAllGroupEmotion_result(gelAllGroupEmotion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public gelAllGroupEmotion_result deepCopy() {
      return new gelAllGroupEmotion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public gelAllGroupEmotion_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof gelAllGroupEmotion_result)
        return this.equals((gelAllGroupEmotion_result)that);
      return false;
    }

    public boolean equals(gelAllGroupEmotion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(gelAllGroupEmotion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("gelAllGroupEmotion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gelAllGroupEmotion_resultStandardSchemeFactory implements SchemeFactory {
      public gelAllGroupEmotion_resultStandardScheme getScheme() {
        return new gelAllGroupEmotion_resultStandardScheme();
      }
    }

    private static class gelAllGroupEmotion_resultStandardScheme extends StandardScheme<gelAllGroupEmotion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gelAllGroupEmotion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gelAllGroupEmotion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gelAllGroupEmotion_resultTupleSchemeFactory implements SchemeFactory {
      public gelAllGroupEmotion_resultTupleScheme getScheme() {
        return new gelAllGroupEmotion_resultTupleScheme();
      }
    }

    private static class gelAllGroupEmotion_resultTupleScheme extends TupleScheme<gelAllGroupEmotion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gelAllGroupEmotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gelAllGroupEmotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loadAllEmotion_args implements org.apache.thrift.TBase<loadAllEmotion_args, loadAllEmotion_args._Fields>, java.io.Serializable, Cloneable, Comparable<loadAllEmotion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadAllEmotion_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadAllEmotion_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadAllEmotion_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadAllEmotion_args.class, metaDataMap);
    }

    public loadAllEmotion_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadAllEmotion_args(loadAllEmotion_args other) {
    }

    public loadAllEmotion_args deepCopy() {
      return new loadAllEmotion_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadAllEmotion_args)
        return this.equals((loadAllEmotion_args)that);
      return false;
    }

    public boolean equals(loadAllEmotion_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(loadAllEmotion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadAllEmotion_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadAllEmotion_argsStandardSchemeFactory implements SchemeFactory {
      public loadAllEmotion_argsStandardScheme getScheme() {
        return new loadAllEmotion_argsStandardScheme();
      }
    }

    private static class loadAllEmotion_argsStandardScheme extends StandardScheme<loadAllEmotion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadAllEmotion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadAllEmotion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadAllEmotion_argsTupleSchemeFactory implements SchemeFactory {
      public loadAllEmotion_argsTupleScheme getScheme() {
        return new loadAllEmotion_argsTupleScheme();
      }
    }

    private static class loadAllEmotion_argsTupleScheme extends TupleScheme<loadAllEmotion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadAllEmotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadAllEmotion_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class loadAllEmotion_result implements org.apache.thrift.TBase<loadAllEmotion_result, loadAllEmotion_result._Fields>, java.io.Serializable, Cloneable, Comparable<loadAllEmotion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loadAllEmotion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loadAllEmotion_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loadAllEmotion_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loadAllEmotion_result.class, metaDataMap);
    }

    public loadAllEmotion_result() {
    }

    public loadAllEmotion_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loadAllEmotion_result(loadAllEmotion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public loadAllEmotion_result deepCopy() {
      return new loadAllEmotion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public loadAllEmotion_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loadAllEmotion_result)
        return this.equals((loadAllEmotion_result)that);
      return false;
    }

    public boolean equals(loadAllEmotion_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(loadAllEmotion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loadAllEmotion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loadAllEmotion_resultStandardSchemeFactory implements SchemeFactory {
      public loadAllEmotion_resultStandardScheme getScheme() {
        return new loadAllEmotion_resultStandardScheme();
      }
    }

    private static class loadAllEmotion_resultStandardScheme extends StandardScheme<loadAllEmotion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loadAllEmotion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loadAllEmotion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loadAllEmotion_resultTupleSchemeFactory implements SchemeFactory {
      public loadAllEmotion_resultTupleScheme getScheme() {
        return new loadAllEmotion_resultTupleScheme();
      }
    }

    private static class loadAllEmotion_resultTupleScheme extends TupleScheme<loadAllEmotion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loadAllEmotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loadAllEmotion_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEmotionWithGroup_args implements org.apache.thrift.TBase<getEmotionWithGroup_args, getEmotionWithGroup_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEmotionWithGroup_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmotionWithGroup_args");

    private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEmotionWithGroup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEmotionWithGroup_argsTupleSchemeFactory());
    }

    public String groupId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GROUP_ID((short)1, "groupId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GROUP_ID
            return GROUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmotionWithGroup_args.class, metaDataMap);
    }

    public getEmotionWithGroup_args() {
    }

    public getEmotionWithGroup_args(
      String groupId)
    {
      this();
      this.groupId = groupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEmotionWithGroup_args(getEmotionWithGroup_args other) {
      if (other.isSetGroupId()) {
        this.groupId = other.groupId;
      }
    }

    public getEmotionWithGroup_args deepCopy() {
      return new getEmotionWithGroup_args(this);
    }

    @Override
    public void clear() {
      this.groupId = null;
    }

    public String getGroupId() {
      return this.groupId;
    }

    public getEmotionWithGroup_args setGroupId(String groupId) {
      this.groupId = groupId;
      return this;
    }

    public void unsetGroupId() {
      this.groupId = null;
    }

    /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupId() {
      return this.groupId != null;
    }

    public void setGroupIdIsSet(boolean value) {
      if (!value) {
        this.groupId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GROUP_ID:
        if (value == null) {
          unsetGroupId();
        } else {
          setGroupId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GROUP_ID:
        return getGroupId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GROUP_ID:
        return isSetGroupId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEmotionWithGroup_args)
        return this.equals((getEmotionWithGroup_args)that);
      return false;
    }

    public boolean equals(getEmotionWithGroup_args that) {
      if (that == null)
        return false;

      boolean this_present_groupId = true && this.isSetGroupId();
      boolean that_present_groupId = true && that.isSetGroupId();
      if (this_present_groupId || that_present_groupId) {
        if (!(this_present_groupId && that_present_groupId))
          return false;
        if (!this.groupId.equals(that.groupId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getEmotionWithGroup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEmotionWithGroup_args(");
      boolean first = true;

      sb.append("groupId:");
      if (this.groupId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEmotionWithGroup_argsStandardSchemeFactory implements SchemeFactory {
      public getEmotionWithGroup_argsStandardScheme getScheme() {
        return new getEmotionWithGroup_argsStandardScheme();
      }
    }

    private static class getEmotionWithGroup_argsStandardScheme extends StandardScheme<getEmotionWithGroup_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEmotionWithGroup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GROUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupId = iprot.readString();
                struct.setGroupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEmotionWithGroup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.groupId != null) {
          oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
          oprot.writeString(struct.groupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEmotionWithGroup_argsTupleSchemeFactory implements SchemeFactory {
      public getEmotionWithGroup_argsTupleScheme getScheme() {
        return new getEmotionWithGroup_argsTupleScheme();
      }
    }

    private static class getEmotionWithGroup_argsTupleScheme extends TupleScheme<getEmotionWithGroup_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEmotionWithGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGroupId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGroupId()) {
          oprot.writeString(struct.groupId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEmotionWithGroup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.groupId = iprot.readString();
          struct.setGroupIdIsSet(true);
        }
      }
    }

  }

  public static class getEmotionWithGroup_result implements org.apache.thrift.TBase<getEmotionWithGroup_result, getEmotionWithGroup_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEmotionWithGroup_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEmotionWithGroup_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEmotionWithGroup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEmotionWithGroup_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEmotionWithGroup_result.class, metaDataMap);
    }

    public getEmotionWithGroup_result() {
    }

    public getEmotionWithGroup_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEmotionWithGroup_result(getEmotionWithGroup_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getEmotionWithGroup_result deepCopy() {
      return new getEmotionWithGroup_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getEmotionWithGroup_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEmotionWithGroup_result)
        return this.equals((getEmotionWithGroup_result)that);
      return false;
    }

    public boolean equals(getEmotionWithGroup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getEmotionWithGroup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEmotionWithGroup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEmotionWithGroup_resultStandardSchemeFactory implements SchemeFactory {
      public getEmotionWithGroup_resultStandardScheme getScheme() {
        return new getEmotionWithGroup_resultStandardScheme();
      }
    }

    private static class getEmotionWithGroup_resultStandardScheme extends StandardScheme<getEmotionWithGroup_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEmotionWithGroup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEmotionWithGroup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEmotionWithGroup_resultTupleSchemeFactory implements SchemeFactory {
      public getEmotionWithGroup_resultTupleScheme getScheme() {
        return new getEmotionWithGroup_resultTupleScheme();
      }
    }

    private static class getEmotionWithGroup_resultTupleScheme extends TupleScheme<getEmotionWithGroup_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEmotionWithGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEmotionWithGroup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class checkImageEmotionExist_args implements org.apache.thrift.TBase<checkImageEmotionExist_args, checkImageEmotionExist_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkImageEmotionExist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkImageEmotionExist_args");

    private static final org.apache.thrift.protocol.TField IMAGE_STYLE_FIELD_DESC = new org.apache.thrift.protocol.TField("imageStyle", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField GROUP_EMOTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupEmotionId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkImageEmotionExist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkImageEmotionExist_argsTupleSchemeFactory());
    }

    public String imageStyle; // required
    public String groupEmotionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMAGE_STYLE((short)1, "imageStyle"),
      GROUP_EMOTION_ID((short)2, "groupEmotionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMAGE_STYLE
            return IMAGE_STYLE;
          case 2: // GROUP_EMOTION_ID
            return GROUP_EMOTION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMAGE_STYLE, new org.apache.thrift.meta_data.FieldMetaData("imageStyle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.GROUP_EMOTION_ID, new org.apache.thrift.meta_data.FieldMetaData("groupEmotionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkImageEmotionExist_args.class, metaDataMap);
    }

    public checkImageEmotionExist_args() {
    }

    public checkImageEmotionExist_args(
      String imageStyle,
      String groupEmotionId)
    {
      this();
      this.imageStyle = imageStyle;
      this.groupEmotionId = groupEmotionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkImageEmotionExist_args(checkImageEmotionExist_args other) {
      if (other.isSetImageStyle()) {
        this.imageStyle = other.imageStyle;
      }
      if (other.isSetGroupEmotionId()) {
        this.groupEmotionId = other.groupEmotionId;
      }
    }

    public checkImageEmotionExist_args deepCopy() {
      return new checkImageEmotionExist_args(this);
    }

    @Override
    public void clear() {
      this.imageStyle = null;
      this.groupEmotionId = null;
    }

    public String getImageStyle() {
      return this.imageStyle;
    }

    public checkImageEmotionExist_args setImageStyle(String imageStyle) {
      this.imageStyle = imageStyle;
      return this;
    }

    public void unsetImageStyle() {
      this.imageStyle = null;
    }

    /** Returns true if field imageStyle is set (has been assigned a value) and false otherwise */
    public boolean isSetImageStyle() {
      return this.imageStyle != null;
    }

    public void setImageStyleIsSet(boolean value) {
      if (!value) {
        this.imageStyle = null;
      }
    }

    public String getGroupEmotionId() {
      return this.groupEmotionId;
    }

    public checkImageEmotionExist_args setGroupEmotionId(String groupEmotionId) {
      this.groupEmotionId = groupEmotionId;
      return this;
    }

    public void unsetGroupEmotionId() {
      this.groupEmotionId = null;
    }

    /** Returns true if field groupEmotionId is set (has been assigned a value) and false otherwise */
    public boolean isSetGroupEmotionId() {
      return this.groupEmotionId != null;
    }

    public void setGroupEmotionIdIsSet(boolean value) {
      if (!value) {
        this.groupEmotionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IMAGE_STYLE:
        if (value == null) {
          unsetImageStyle();
        } else {
          setImageStyle((String)value);
        }
        break;

      case GROUP_EMOTION_ID:
        if (value == null) {
          unsetGroupEmotionId();
        } else {
          setGroupEmotionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IMAGE_STYLE:
        return getImageStyle();

      case GROUP_EMOTION_ID:
        return getGroupEmotionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IMAGE_STYLE:
        return isSetImageStyle();
      case GROUP_EMOTION_ID:
        return isSetGroupEmotionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkImageEmotionExist_args)
        return this.equals((checkImageEmotionExist_args)that);
      return false;
    }

    public boolean equals(checkImageEmotionExist_args that) {
      if (that == null)
        return false;

      boolean this_present_imageStyle = true && this.isSetImageStyle();
      boolean that_present_imageStyle = true && that.isSetImageStyle();
      if (this_present_imageStyle || that_present_imageStyle) {
        if (!(this_present_imageStyle && that_present_imageStyle))
          return false;
        if (!this.imageStyle.equals(that.imageStyle))
          return false;
      }

      boolean this_present_groupEmotionId = true && this.isSetGroupEmotionId();
      boolean that_present_groupEmotionId = true && that.isSetGroupEmotionId();
      if (this_present_groupEmotionId || that_present_groupEmotionId) {
        if (!(this_present_groupEmotionId && that_present_groupEmotionId))
          return false;
        if (!this.groupEmotionId.equals(that.groupEmotionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkImageEmotionExist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetImageStyle()).compareTo(other.isSetImageStyle());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImageStyle()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageStyle, other.imageStyle);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGroupEmotionId()).compareTo(other.isSetGroupEmotionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGroupEmotionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupEmotionId, other.groupEmotionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkImageEmotionExist_args(");
      boolean first = true;

      sb.append("imageStyle:");
      if (this.imageStyle == null) {
        sb.append("null");
      } else {
        sb.append(this.imageStyle);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("groupEmotionId:");
      if (this.groupEmotionId == null) {
        sb.append("null");
      } else {
        sb.append(this.groupEmotionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkImageEmotionExist_argsStandardSchemeFactory implements SchemeFactory {
      public checkImageEmotionExist_argsStandardScheme getScheme() {
        return new checkImageEmotionExist_argsStandardScheme();
      }
    }

    private static class checkImageEmotionExist_argsStandardScheme extends StandardScheme<checkImageEmotionExist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkImageEmotionExist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMAGE_STYLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imageStyle = iprot.readString();
                struct.setImageStyleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // GROUP_EMOTION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.groupEmotionId = iprot.readString();
                struct.setGroupEmotionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkImageEmotionExist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.imageStyle != null) {
          oprot.writeFieldBegin(IMAGE_STYLE_FIELD_DESC);
          oprot.writeString(struct.imageStyle);
          oprot.writeFieldEnd();
        }
        if (struct.groupEmotionId != null) {
          oprot.writeFieldBegin(GROUP_EMOTION_ID_FIELD_DESC);
          oprot.writeString(struct.groupEmotionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkImageEmotionExist_argsTupleSchemeFactory implements SchemeFactory {
      public checkImageEmotionExist_argsTupleScheme getScheme() {
        return new checkImageEmotionExist_argsTupleScheme();
      }
    }

    private static class checkImageEmotionExist_argsTupleScheme extends TupleScheme<checkImageEmotionExist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkImageEmotionExist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetImageStyle()) {
          optionals.set(0);
        }
        if (struct.isSetGroupEmotionId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetImageStyle()) {
          oprot.writeString(struct.imageStyle);
        }
        if (struct.isSetGroupEmotionId()) {
          oprot.writeString(struct.groupEmotionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkImageEmotionExist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.imageStyle = iprot.readString();
          struct.setImageStyleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.groupEmotionId = iprot.readString();
          struct.setGroupEmotionIdIsSet(true);
        }
      }
    }

  }

  public static class checkImageEmotionExist_result implements org.apache.thrift.TBase<checkImageEmotionExist_result, checkImageEmotionExist_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkImageEmotionExist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkImageEmotionExist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkImageEmotionExist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkImageEmotionExist_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkImageEmotionExist_result.class, metaDataMap);
    }

    public checkImageEmotionExist_result() {
    }

    public checkImageEmotionExist_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkImageEmotionExist_result(checkImageEmotionExist_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public checkImageEmotionExist_result deepCopy() {
      return new checkImageEmotionExist_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public checkImageEmotionExist_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkImageEmotionExist_result)
        return this.equals((checkImageEmotionExist_result)that);
      return false;
    }

    public boolean equals(checkImageEmotionExist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkImageEmotionExist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkImageEmotionExist_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkImageEmotionExist_resultStandardSchemeFactory implements SchemeFactory {
      public checkImageEmotionExist_resultStandardScheme getScheme() {
        return new checkImageEmotionExist_resultStandardScheme();
      }
    }

    private static class checkImageEmotionExist_resultStandardScheme extends StandardScheme<checkImageEmotionExist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkImageEmotionExist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkImageEmotionExist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkImageEmotionExist_resultTupleSchemeFactory implements SchemeFactory {
      public checkImageEmotionExist_resultTupleScheme getScheme() {
        return new checkImageEmotionExist_resultTupleScheme();
      }
    }

    private static class checkImageEmotionExist_resultTupleScheme extends TupleScheme<checkImageEmotionExist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkImageEmotionExist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkImageEmotionExist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendMessageInternal_args implements org.apache.thrift.TBase<sendMessageInternal_args, sendMessageInternal_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendMessageInternal_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMessageInternal_args");

    private static final org.apache.thrift.protocol.TField MSG_ITEM_FIELD_DESC = new org.apache.thrift.protocol.TField("msgItem", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField MESSAGE_ONLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("messageOnline", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMessageInternal_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMessageInternal_argsTupleSchemeFactory());
    }

    public MsgItem msgItem; // required
    public boolean messageOnline; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG_ITEM((short)1, "msgItem"),
      MESSAGE_ONLINE((short)2, "messageOnline");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG_ITEM
            return MSG_ITEM;
          case 2: // MESSAGE_ONLINE
            return MESSAGE_ONLINE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MESSAGEONLINE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG_ITEM, new org.apache.thrift.meta_data.FieldMetaData("msgItem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MsgItem.class)));
      tmpMap.put(_Fields.MESSAGE_ONLINE, new org.apache.thrift.meta_data.FieldMetaData("messageOnline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMessageInternal_args.class, metaDataMap);
    }

    public sendMessageInternal_args() {
    }

    public sendMessageInternal_args(
      MsgItem msgItem,
      boolean messageOnline)
    {
      this();
      this.msgItem = msgItem;
      this.messageOnline = messageOnline;
      setMessageOnlineIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageInternal_args(sendMessageInternal_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetMsgItem()) {
        this.msgItem = new MsgItem(other.msgItem);
      }
      this.messageOnline = other.messageOnline;
    }

    public sendMessageInternal_args deepCopy() {
      return new sendMessageInternal_args(this);
    }

    @Override
    public void clear() {
      this.msgItem = null;
      setMessageOnlineIsSet(false);
      this.messageOnline = false;
    }

    public MsgItem getMsgItem() {
      return this.msgItem;
    }

    public sendMessageInternal_args setMsgItem(MsgItem msgItem) {
      this.msgItem = msgItem;
      return this;
    }

    public void unsetMsgItem() {
      this.msgItem = null;
    }

    /** Returns true if field msgItem is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgItem() {
      return this.msgItem != null;
    }

    public void setMsgItemIsSet(boolean value) {
      if (!value) {
        this.msgItem = null;
      }
    }

    public boolean isMessageOnline() {
      return this.messageOnline;
    }

    public sendMessageInternal_args setMessageOnline(boolean messageOnline) {
      this.messageOnline = messageOnline;
      setMessageOnlineIsSet(true);
      return this;
    }

    public void unsetMessageOnline() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MESSAGEONLINE_ISSET_ID);
    }

    /** Returns true if field messageOnline is set (has been assigned a value) and false otherwise */
    public boolean isSetMessageOnline() {
      return EncodingUtils.testBit(__isset_bitfield, __MESSAGEONLINE_ISSET_ID);
    }

    public void setMessageOnlineIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MESSAGEONLINE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MSG_ITEM:
        if (value == null) {
          unsetMsgItem();
        } else {
          setMsgItem((MsgItem)value);
        }
        break;

      case MESSAGE_ONLINE:
        if (value == null) {
          unsetMessageOnline();
        } else {
          setMessageOnline((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG_ITEM:
        return getMsgItem();

      case MESSAGE_ONLINE:
        return Boolean.valueOf(isMessageOnline());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MSG_ITEM:
        return isSetMsgItem();
      case MESSAGE_ONLINE:
        return isSetMessageOnline();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageInternal_args)
        return this.equals((sendMessageInternal_args)that);
      return false;
    }

    public boolean equals(sendMessageInternal_args that) {
      if (that == null)
        return false;

      boolean this_present_msgItem = true && this.isSetMsgItem();
      boolean that_present_msgItem = true && that.isSetMsgItem();
      if (this_present_msgItem || that_present_msgItem) {
        if (!(this_present_msgItem && that_present_msgItem))
          return false;
        if (!this.msgItem.equals(that.msgItem))
          return false;
      }

      boolean this_present_messageOnline = true;
      boolean that_present_messageOnline = true;
      if (this_present_messageOnline || that_present_messageOnline) {
        if (!(this_present_messageOnline && that_present_messageOnline))
          return false;
        if (this.messageOnline != that.messageOnline)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendMessageInternal_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMsgItem()).compareTo(other.isSetMsgItem());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgItem()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgItem, other.msgItem);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMessageOnline()).compareTo(other.isSetMessageOnline());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMessageOnline()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.messageOnline, other.messageOnline);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMessageInternal_args(");
      boolean first = true;

      sb.append("msgItem:");
      if (this.msgItem == null) {
        sb.append("null");
      } else {
        sb.append(this.msgItem);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("messageOnline:");
      sb.append(this.messageOnline);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (msgItem != null) {
        msgItem.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMessageInternal_argsStandardSchemeFactory implements SchemeFactory {
      public sendMessageInternal_argsStandardScheme getScheme() {
        return new sendMessageInternal_argsStandardScheme();
      }
    }

    private static class sendMessageInternal_argsStandardScheme extends StandardScheme<sendMessageInternal_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMessageInternal_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG_ITEM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msgItem = new MsgItem();
                struct.msgItem.read(iprot);
                struct.setMsgItemIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MESSAGE_ONLINE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.messageOnline = iprot.readBool();
                struct.setMessageOnlineIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMessageInternal_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msgItem != null) {
          oprot.writeFieldBegin(MSG_ITEM_FIELD_DESC);
          struct.msgItem.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MESSAGE_ONLINE_FIELD_DESC);
        oprot.writeBool(struct.messageOnline);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMessageInternal_argsTupleSchemeFactory implements SchemeFactory {
      public sendMessageInternal_argsTupleScheme getScheme() {
        return new sendMessageInternal_argsTupleScheme();
      }
    }

    private static class sendMessageInternal_argsTupleScheme extends TupleScheme<sendMessageInternal_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMessageInternal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMsgItem()) {
          optionals.set(0);
        }
        if (struct.isSetMessageOnline()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMsgItem()) {
          struct.msgItem.write(oprot);
        }
        if (struct.isSetMessageOnline()) {
          oprot.writeBool(struct.messageOnline);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMessageInternal_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.msgItem = new MsgItem();
          struct.msgItem.read(iprot);
          struct.setMsgItemIsSet(true);
        }
        if (incoming.get(1)) {
          struct.messageOnline = iprot.readBool();
          struct.setMessageOnlineIsSet(true);
        }
      }
    }

  }

  public static class sendMessageInternal_result implements org.apache.thrift.TBase<sendMessageInternal_result, sendMessageInternal_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendMessageInternal_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendMessageInternal_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendMessageInternal_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendMessageInternal_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendMessageInternal_result.class, metaDataMap);
    }

    public sendMessageInternal_result() {
    }

    public sendMessageInternal_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendMessageInternal_result(sendMessageInternal_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public sendMessageInternal_result deepCopy() {
      return new sendMessageInternal_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public sendMessageInternal_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendMessageInternal_result)
        return this.equals((sendMessageInternal_result)that);
      return false;
    }

    public boolean equals(sendMessageInternal_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendMessageInternal_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendMessageInternal_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendMessageInternal_resultStandardSchemeFactory implements SchemeFactory {
      public sendMessageInternal_resultStandardScheme getScheme() {
        return new sendMessageInternal_resultStandardScheme();
      }
    }

    private static class sendMessageInternal_resultStandardScheme extends StandardScheme<sendMessageInternal_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendMessageInternal_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendMessageInternal_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendMessageInternal_resultTupleSchemeFactory implements SchemeFactory {
      public sendMessageInternal_resultTupleScheme getScheme() {
        return new sendMessageInternal_resultTupleScheme();
      }
    }

    private static class sendMessageInternal_resultTupleScheme extends TupleScheme<sendMessageInternal_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendMessageInternal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendMessageInternal_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveListMsgId_args implements org.apache.thrift.TBase<saveListMsgId_args, saveListMsgId_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveListMsgId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveListMsgId_args");

    private static final org.apache.thrift.protocol.TField LIST_MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("listMsgId", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveListMsgId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveListMsgId_argsTupleSchemeFactory());
    }

    public List<Long> listMsgId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_MSG_ID((short)1, "listMsgId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_MSG_ID
            return LIST_MSG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("listMsgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveListMsgId_args.class, metaDataMap);
    }

    public saveListMsgId_args() {
    }

    public saveListMsgId_args(
      List<Long> listMsgId)
    {
      this();
      this.listMsgId = listMsgId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveListMsgId_args(saveListMsgId_args other) {
      if (other.isSetListMsgId()) {
        List<Long> __this__listMsgId = new ArrayList<Long>(other.listMsgId);
        this.listMsgId = __this__listMsgId;
      }
    }

    public saveListMsgId_args deepCopy() {
      return new saveListMsgId_args(this);
    }

    @Override
    public void clear() {
      this.listMsgId = null;
    }

    public int getListMsgIdSize() {
      return (this.listMsgId == null) ? 0 : this.listMsgId.size();
    }

    public java.util.Iterator<Long> getListMsgIdIterator() {
      return (this.listMsgId == null) ? null : this.listMsgId.iterator();
    }

    public void addToListMsgId(long elem) {
      if (this.listMsgId == null) {
        this.listMsgId = new ArrayList<Long>();
      }
      this.listMsgId.add(elem);
    }

    public List<Long> getListMsgId() {
      return this.listMsgId;
    }

    public saveListMsgId_args setListMsgId(List<Long> listMsgId) {
      this.listMsgId = listMsgId;
      return this;
    }

    public void unsetListMsgId() {
      this.listMsgId = null;
    }

    /** Returns true if field listMsgId is set (has been assigned a value) and false otherwise */
    public boolean isSetListMsgId() {
      return this.listMsgId != null;
    }

    public void setListMsgIdIsSet(boolean value) {
      if (!value) {
        this.listMsgId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_MSG_ID:
        if (value == null) {
          unsetListMsgId();
        } else {
          setListMsgId((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_MSG_ID:
        return getListMsgId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_MSG_ID:
        return isSetListMsgId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveListMsgId_args)
        return this.equals((saveListMsgId_args)that);
      return false;
    }

    public boolean equals(saveListMsgId_args that) {
      if (that == null)
        return false;

      boolean this_present_listMsgId = true && this.isSetListMsgId();
      boolean that_present_listMsgId = true && that.isSetListMsgId();
      if (this_present_listMsgId || that_present_listMsgId) {
        if (!(this_present_listMsgId && that_present_listMsgId))
          return false;
        if (!this.listMsgId.equals(that.listMsgId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saveListMsgId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListMsgId()).compareTo(other.isSetListMsgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListMsgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listMsgId, other.listMsgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveListMsgId_args(");
      boolean first = true;

      sb.append("listMsgId:");
      if (this.listMsgId == null) {
        sb.append("null");
      } else {
        sb.append(this.listMsgId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveListMsgId_argsStandardSchemeFactory implements SchemeFactory {
      public saveListMsgId_argsStandardScheme getScheme() {
        return new saveListMsgId_argsStandardScheme();
      }
    }

    private static class saveListMsgId_argsStandardScheme extends StandardScheme<saveListMsgId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveListMsgId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_MSG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.listMsgId = new ArrayList<Long>(_list56.size);
                  for (int _i57 = 0; _i57 < _list56.size; ++_i57)
                  {
                    long _elem58;
                    _elem58 = iprot.readI64();
                    struct.listMsgId.add(_elem58);
                  }
                  iprot.readListEnd();
                }
                struct.setListMsgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveListMsgId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listMsgId != null) {
          oprot.writeFieldBegin(LIST_MSG_ID_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.listMsgId.size()));
            for (long _iter59 : struct.listMsgId)
            {
              oprot.writeI64(_iter59);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveListMsgId_argsTupleSchemeFactory implements SchemeFactory {
      public saveListMsgId_argsTupleScheme getScheme() {
        return new saveListMsgId_argsTupleScheme();
      }
    }

    private static class saveListMsgId_argsTupleScheme extends TupleScheme<saveListMsgId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveListMsgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListMsgId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetListMsgId()) {
          {
            oprot.writeI32(struct.listMsgId.size());
            for (long _iter60 : struct.listMsgId)
            {
              oprot.writeI64(_iter60);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveListMsgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.listMsgId = new ArrayList<Long>(_list61.size);
            for (int _i62 = 0; _i62 < _list61.size; ++_i62)
            {
              long _elem63;
              _elem63 = iprot.readI64();
              struct.listMsgId.add(_elem63);
            }
          }
          struct.setListMsgIdIsSet(true);
        }
      }
    }

  }

  public static class saveListMsgId_result implements org.apache.thrift.TBase<saveListMsgId_result, saveListMsgId_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveListMsgId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveListMsgId_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveListMsgId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveListMsgId_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveListMsgId_result.class, metaDataMap);
    }

    public saveListMsgId_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveListMsgId_result(saveListMsgId_result other) {
    }

    public saveListMsgId_result deepCopy() {
      return new saveListMsgId_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveListMsgId_result)
        return this.equals((saveListMsgId_result)that);
      return false;
    }

    public boolean equals(saveListMsgId_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saveListMsgId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveListMsgId_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveListMsgId_resultStandardSchemeFactory implements SchemeFactory {
      public saveListMsgId_resultStandardScheme getScheme() {
        return new saveListMsgId_resultStandardScheme();
      }
    }

    private static class saveListMsgId_resultStandardScheme extends StandardScheme<saveListMsgId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveListMsgId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveListMsgId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveListMsgId_resultTupleSchemeFactory implements SchemeFactory {
      public saveListMsgId_resultTupleScheme getScheme() {
        return new saveListMsgId_resultTupleScheme();
      }
    }

    private static class saveListMsgId_resultTupleScheme extends TupleScheme<saveListMsgId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveListMsgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveListMsgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class saveOfflineMsgNotify_args implements org.apache.thrift.TBase<saveOfflineMsgNotify_args, saveOfflineMsgNotify_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveOfflineMsgNotify_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOfflineMsgNotify_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveOfflineMsgNotify_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveOfflineMsgNotify_argsTupleSchemeFactory());
    }

    public String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOfflineMsgNotify_args.class, metaDataMap);
    }

    public saveOfflineMsgNotify_args() {
    }

    public saveOfflineMsgNotify_args(
      String userId)
    {
      this();
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOfflineMsgNotify_args(saveOfflineMsgNotify_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public saveOfflineMsgNotify_args deepCopy() {
      return new saveOfflineMsgNotify_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public saveOfflineMsgNotify_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOfflineMsgNotify_args)
        return this.equals((saveOfflineMsgNotify_args)that);
      return false;
    }

    public boolean equals(saveOfflineMsgNotify_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saveOfflineMsgNotify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveOfflineMsgNotify_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOfflineMsgNotify_argsStandardSchemeFactory implements SchemeFactory {
      public saveOfflineMsgNotify_argsStandardScheme getScheme() {
        return new saveOfflineMsgNotify_argsStandardScheme();
      }
    }

    private static class saveOfflineMsgNotify_argsStandardScheme extends StandardScheme<saveOfflineMsgNotify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOfflineMsgNotify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOfflineMsgNotify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOfflineMsgNotify_argsTupleSchemeFactory implements SchemeFactory {
      public saveOfflineMsgNotify_argsTupleScheme getScheme() {
        return new saveOfflineMsgNotify_argsTupleScheme();
      }
    }

    private static class saveOfflineMsgNotify_argsTupleScheme extends TupleScheme<saveOfflineMsgNotify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOfflineMsgNotify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOfflineMsgNotify_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class saveOfflineMsgNotify_result implements org.apache.thrift.TBase<saveOfflineMsgNotify_result, saveOfflineMsgNotify_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveOfflineMsgNotify_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOfflineMsgNotify_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveOfflineMsgNotify_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveOfflineMsgNotify_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOfflineMsgNotify_result.class, metaDataMap);
    }

    public saveOfflineMsgNotify_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOfflineMsgNotify_result(saveOfflineMsgNotify_result other) {
    }

    public saveOfflineMsgNotify_result deepCopy() {
      return new saveOfflineMsgNotify_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOfflineMsgNotify_result)
        return this.equals((saveOfflineMsgNotify_result)that);
      return false;
    }

    public boolean equals(saveOfflineMsgNotify_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saveOfflineMsgNotify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveOfflineMsgNotify_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOfflineMsgNotify_resultStandardSchemeFactory implements SchemeFactory {
      public saveOfflineMsgNotify_resultStandardScheme getScheme() {
        return new saveOfflineMsgNotify_resultStandardScheme();
      }
    }

    private static class saveOfflineMsgNotify_resultStandardScheme extends StandardScheme<saveOfflineMsgNotify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOfflineMsgNotify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOfflineMsgNotify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOfflineMsgNotify_resultTupleSchemeFactory implements SchemeFactory {
      public saveOfflineMsgNotify_resultTupleScheme getScheme() {
        return new saveOfflineMsgNotify_resultTupleScheme();
      }
    }

    private static class saveOfflineMsgNotify_resultTupleScheme extends TupleScheme<saveOfflineMsgNotify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOfflineMsgNotify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOfflineMsgNotify_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getMessageList_args implements org.apache.thrift.TBase<getMessageList_args, getMessageList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMessageList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMessageList_args");

    private static final org.apache.thrift.protocol.TField USER_ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("userId1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("userId2", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOTAL_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMsg", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMessageList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMessageList_argsTupleSchemeFactory());
    }

    public String userId1; // required
    public String userId2; // required
    public int totalMsg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID1((short)1, "userId1"),
      USER_ID2((short)2, "userId2"),
      TOTAL_MSG((short)3, "totalMsg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID1
            return USER_ID1;
          case 2: // USER_ID2
            return USER_ID2;
          case 3: // TOTAL_MSG
            return TOTAL_MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOTALMSG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID1, new org.apache.thrift.meta_data.FieldMetaData("userId1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID2, new org.apache.thrift.meta_data.FieldMetaData("userId2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOTAL_MSG, new org.apache.thrift.meta_data.FieldMetaData("totalMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessageList_args.class, metaDataMap);
    }

    public getMessageList_args() {
    }

    public getMessageList_args(
      String userId1,
      String userId2,
      int totalMsg)
    {
      this();
      this.userId1 = userId1;
      this.userId2 = userId2;
      this.totalMsg = totalMsg;
      setTotalMsgIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageList_args(getMessageList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUserId1()) {
        this.userId1 = other.userId1;
      }
      if (other.isSetUserId2()) {
        this.userId2 = other.userId2;
      }
      this.totalMsg = other.totalMsg;
    }

    public getMessageList_args deepCopy() {
      return new getMessageList_args(this);
    }

    @Override
    public void clear() {
      this.userId1 = null;
      this.userId2 = null;
      setTotalMsgIsSet(false);
      this.totalMsg = 0;
    }

    public String getUserId1() {
      return this.userId1;
    }

    public getMessageList_args setUserId1(String userId1) {
      this.userId1 = userId1;
      return this;
    }

    public void unsetUserId1() {
      this.userId1 = null;
    }

    /** Returns true if field userId1 is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId1() {
      return this.userId1 != null;
    }

    public void setUserId1IsSet(boolean value) {
      if (!value) {
        this.userId1 = null;
      }
    }

    public String getUserId2() {
      return this.userId2;
    }

    public getMessageList_args setUserId2(String userId2) {
      this.userId2 = userId2;
      return this;
    }

    public void unsetUserId2() {
      this.userId2 = null;
    }

    /** Returns true if field userId2 is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId2() {
      return this.userId2 != null;
    }

    public void setUserId2IsSet(boolean value) {
      if (!value) {
        this.userId2 = null;
      }
    }

    public int getTotalMsg() {
      return this.totalMsg;
    }

    public getMessageList_args setTotalMsg(int totalMsg) {
      this.totalMsg = totalMsg;
      setTotalMsgIsSet(true);
      return this;
    }

    public void unsetTotalMsg() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMSG_ISSET_ID);
    }

    /** Returns true if field totalMsg is set (has been assigned a value) and false otherwise */
    public boolean isSetTotalMsg() {
      return EncodingUtils.testBit(__isset_bitfield, __TOTALMSG_ISSET_ID);
    }

    public void setTotalMsgIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMSG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID1:
        if (value == null) {
          unsetUserId1();
        } else {
          setUserId1((String)value);
        }
        break;

      case USER_ID2:
        if (value == null) {
          unsetUserId2();
        } else {
          setUserId2((String)value);
        }
        break;

      case TOTAL_MSG:
        if (value == null) {
          unsetTotalMsg();
        } else {
          setTotalMsg((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID1:
        return getUserId1();

      case USER_ID2:
        return getUserId2();

      case TOTAL_MSG:
        return Integer.valueOf(getTotalMsg());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID1:
        return isSetUserId1();
      case USER_ID2:
        return isSetUserId2();
      case TOTAL_MSG:
        return isSetTotalMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageList_args)
        return this.equals((getMessageList_args)that);
      return false;
    }

    public boolean equals(getMessageList_args that) {
      if (that == null)
        return false;

      boolean this_present_userId1 = true && this.isSetUserId1();
      boolean that_present_userId1 = true && that.isSetUserId1();
      if (this_present_userId1 || that_present_userId1) {
        if (!(this_present_userId1 && that_present_userId1))
          return false;
        if (!this.userId1.equals(that.userId1))
          return false;
      }

      boolean this_present_userId2 = true && this.isSetUserId2();
      boolean that_present_userId2 = true && that.isSetUserId2();
      if (this_present_userId2 || that_present_userId2) {
        if (!(this_present_userId2 && that_present_userId2))
          return false;
        if (!this.userId2.equals(that.userId2))
          return false;
      }

      boolean this_present_totalMsg = true;
      boolean that_present_totalMsg = true;
      if (this_present_totalMsg || that_present_totalMsg) {
        if (!(this_present_totalMsg && that_present_totalMsg))
          return false;
        if (this.totalMsg != that.totalMsg)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMessageList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId1()).compareTo(other.isSetUserId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId1, other.userId1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId2()).compareTo(other.isSetUserId2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId2, other.userId2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTotalMsg()).compareTo(other.isSetTotalMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTotalMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMsg, other.totalMsg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMessageList_args(");
      boolean first = true;

      sb.append("userId1:");
      if (this.userId1 == null) {
        sb.append("null");
      } else {
        sb.append(this.userId1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId2:");
      if (this.userId2 == null) {
        sb.append("null");
      } else {
        sb.append(this.userId2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("totalMsg:");
      sb.append(this.totalMsg);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMessageList_argsStandardSchemeFactory implements SchemeFactory {
      public getMessageList_argsStandardScheme getScheme() {
        return new getMessageList_argsStandardScheme();
      }
    }

    private static class getMessageList_argsStandardScheme extends StandardScheme<getMessageList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMessageList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId1 = iprot.readString();
                struct.setUserId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId2 = iprot.readString();
                struct.setUserId2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOTAL_MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.totalMsg = iprot.readI32();
                struct.setTotalMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMessageList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId1 != null) {
          oprot.writeFieldBegin(USER_ID1_FIELD_DESC);
          oprot.writeString(struct.userId1);
          oprot.writeFieldEnd();
        }
        if (struct.userId2 != null) {
          oprot.writeFieldBegin(USER_ID2_FIELD_DESC);
          oprot.writeString(struct.userId2);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TOTAL_MSG_FIELD_DESC);
        oprot.writeI32(struct.totalMsg);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMessageList_argsTupleSchemeFactory implements SchemeFactory {
      public getMessageList_argsTupleScheme getScheme() {
        return new getMessageList_argsTupleScheme();
      }
    }

    private static class getMessageList_argsTupleScheme extends TupleScheme<getMessageList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMessageList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId1()) {
          optionals.set(0);
        }
        if (struct.isSetUserId2()) {
          optionals.set(1);
        }
        if (struct.isSetTotalMsg()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId1()) {
          oprot.writeString(struct.userId1);
        }
        if (struct.isSetUserId2()) {
          oprot.writeString(struct.userId2);
        }
        if (struct.isSetTotalMsg()) {
          oprot.writeI32(struct.totalMsg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMessageList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId1 = iprot.readString();
          struct.setUserId1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId2 = iprot.readString();
          struct.setUserId2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.totalMsg = iprot.readI32();
          struct.setTotalMsgIsSet(true);
        }
      }
    }

  }

  public static class getMessageList_result implements org.apache.thrift.TBase<getMessageList_result, getMessageList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMessageList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMessageList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMessageList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMessageList_resultTupleSchemeFactory());
    }

    public List<MsgItem> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MsgItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessageList_result.class, metaDataMap);
    }

    public getMessageList_result() {
    }

    public getMessageList_result(
      List<MsgItem> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageList_result(getMessageList_result other) {
      if (other.isSetSuccess()) {
        List<MsgItem> __this__success = new ArrayList<MsgItem>(other.success.size());
        for (MsgItem other_element : other.success) {
          __this__success.add(new MsgItem(other_element));
        }
        this.success = __this__success;
      }
    }

    public getMessageList_result deepCopy() {
      return new getMessageList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<MsgItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MsgItem elem) {
      if (this.success == null) {
        this.success = new ArrayList<MsgItem>();
      }
      this.success.add(elem);
    }

    public List<MsgItem> getSuccess() {
      return this.success;
    }

    public getMessageList_result setSuccess(List<MsgItem> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<MsgItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageList_result)
        return this.equals((getMessageList_result)that);
      return false;
    }

    public boolean equals(getMessageList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMessageList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMessageList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMessageList_resultStandardSchemeFactory implements SchemeFactory {
      public getMessageList_resultStandardScheme getScheme() {
        return new getMessageList_resultStandardScheme();
      }
    }

    private static class getMessageList_resultStandardScheme extends StandardScheme<getMessageList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMessageList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.success = new ArrayList<MsgItem>(_list64.size);
                  for (int _i65 = 0; _i65 < _list64.size; ++_i65)
                  {
                    MsgItem _elem66;
                    _elem66 = new MsgItem();
                    _elem66.read(iprot);
                    struct.success.add(_elem66);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMessageList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MsgItem _iter67 : struct.success)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMessageList_resultTupleSchemeFactory implements SchemeFactory {
      public getMessageList_resultTupleScheme getScheme() {
        return new getMessageList_resultTupleScheme();
      }
    }

    private static class getMessageList_resultTupleScheme extends TupleScheme<getMessageList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMessageList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MsgItem _iter68 : struct.success)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMessageList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<MsgItem>(_list69.size);
            for (int _i70 = 0; _i70 < _list69.size; ++_i70)
            {
              MsgItem _elem71;
              _elem71 = new MsgItem();
              _elem71.read(iprot);
              struct.success.add(_elem71);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMessageIdList_args implements org.apache.thrift.TBase<getMessageIdList_args, getMessageIdList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMessageIdList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMessageIdList_args");

    private static final org.apache.thrift.protocol.TField USER_ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("userId1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("userId2", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TOTAL_MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("totalMsg", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMessageIdList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMessageIdList_argsTupleSchemeFactory());
    }

    public String userId1; // required
    public String userId2; // required
    public int totalMsg; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID1((short)1, "userId1"),
      USER_ID2((short)2, "userId2"),
      TOTAL_MSG((short)3, "totalMsg");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID1
            return USER_ID1;
          case 2: // USER_ID2
            return USER_ID2;
          case 3: // TOTAL_MSG
            return TOTAL_MSG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TOTALMSG_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID1, new org.apache.thrift.meta_data.FieldMetaData("userId1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID2, new org.apache.thrift.meta_data.FieldMetaData("userId2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TOTAL_MSG, new org.apache.thrift.meta_data.FieldMetaData("totalMsg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessageIdList_args.class, metaDataMap);
    }

    public getMessageIdList_args() {
    }

    public getMessageIdList_args(
      String userId1,
      String userId2,
      int totalMsg)
    {
      this();
      this.userId1 = userId1;
      this.userId2 = userId2;
      this.totalMsg = totalMsg;
      setTotalMsgIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageIdList_args(getMessageIdList_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUserId1()) {
        this.userId1 = other.userId1;
      }
      if (other.isSetUserId2()) {
        this.userId2 = other.userId2;
      }
      this.totalMsg = other.totalMsg;
    }

    public getMessageIdList_args deepCopy() {
      return new getMessageIdList_args(this);
    }

    @Override
    public void clear() {
      this.userId1 = null;
      this.userId2 = null;
      setTotalMsgIsSet(false);
      this.totalMsg = 0;
    }

    public String getUserId1() {
      return this.userId1;
    }

    public getMessageIdList_args setUserId1(String userId1) {
      this.userId1 = userId1;
      return this;
    }

    public void unsetUserId1() {
      this.userId1 = null;
    }

    /** Returns true if field userId1 is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId1() {
      return this.userId1 != null;
    }

    public void setUserId1IsSet(boolean value) {
      if (!value) {
        this.userId1 = null;
      }
    }

    public String getUserId2() {
      return this.userId2;
    }

    public getMessageIdList_args setUserId2(String userId2) {
      this.userId2 = userId2;
      return this;
    }

    public void unsetUserId2() {
      this.userId2 = null;
    }

    /** Returns true if field userId2 is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId2() {
      return this.userId2 != null;
    }

    public void setUserId2IsSet(boolean value) {
      if (!value) {
        this.userId2 = null;
      }
    }

    public int getTotalMsg() {
      return this.totalMsg;
    }

    public getMessageIdList_args setTotalMsg(int totalMsg) {
      this.totalMsg = totalMsg;
      setTotalMsgIsSet(true);
      return this;
    }

    public void unsetTotalMsg() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALMSG_ISSET_ID);
    }

    /** Returns true if field totalMsg is set (has been assigned a value) and false otherwise */
    public boolean isSetTotalMsg() {
      return EncodingUtils.testBit(__isset_bitfield, __TOTALMSG_ISSET_ID);
    }

    public void setTotalMsgIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALMSG_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID1:
        if (value == null) {
          unsetUserId1();
        } else {
          setUserId1((String)value);
        }
        break;

      case USER_ID2:
        if (value == null) {
          unsetUserId2();
        } else {
          setUserId2((String)value);
        }
        break;

      case TOTAL_MSG:
        if (value == null) {
          unsetTotalMsg();
        } else {
          setTotalMsg((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID1:
        return getUserId1();

      case USER_ID2:
        return getUserId2();

      case TOTAL_MSG:
        return Integer.valueOf(getTotalMsg());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID1:
        return isSetUserId1();
      case USER_ID2:
        return isSetUserId2();
      case TOTAL_MSG:
        return isSetTotalMsg();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageIdList_args)
        return this.equals((getMessageIdList_args)that);
      return false;
    }

    public boolean equals(getMessageIdList_args that) {
      if (that == null)
        return false;

      boolean this_present_userId1 = true && this.isSetUserId1();
      boolean that_present_userId1 = true && that.isSetUserId1();
      if (this_present_userId1 || that_present_userId1) {
        if (!(this_present_userId1 && that_present_userId1))
          return false;
        if (!this.userId1.equals(that.userId1))
          return false;
      }

      boolean this_present_userId2 = true && this.isSetUserId2();
      boolean that_present_userId2 = true && that.isSetUserId2();
      if (this_present_userId2 || that_present_userId2) {
        if (!(this_present_userId2 && that_present_userId2))
          return false;
        if (!this.userId2.equals(that.userId2))
          return false;
      }

      boolean this_present_totalMsg = true;
      boolean that_present_totalMsg = true;
      if (this_present_totalMsg || that_present_totalMsg) {
        if (!(this_present_totalMsg && that_present_totalMsg))
          return false;
        if (this.totalMsg != that.totalMsg)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMessageIdList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId1()).compareTo(other.isSetUserId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId1, other.userId1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId2()).compareTo(other.isSetUserId2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId2, other.userId2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTotalMsg()).compareTo(other.isSetTotalMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTotalMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalMsg, other.totalMsg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMessageIdList_args(");
      boolean first = true;

      sb.append("userId1:");
      if (this.userId1 == null) {
        sb.append("null");
      } else {
        sb.append(this.userId1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId2:");
      if (this.userId2 == null) {
        sb.append("null");
      } else {
        sb.append(this.userId2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("totalMsg:");
      sb.append(this.totalMsg);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMessageIdList_argsStandardSchemeFactory implements SchemeFactory {
      public getMessageIdList_argsStandardScheme getScheme() {
        return new getMessageIdList_argsStandardScheme();
      }
    }

    private static class getMessageIdList_argsStandardScheme extends StandardScheme<getMessageIdList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMessageIdList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId1 = iprot.readString();
                struct.setUserId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId2 = iprot.readString();
                struct.setUserId2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TOTAL_MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.totalMsg = iprot.readI32();
                struct.setTotalMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMessageIdList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId1 != null) {
          oprot.writeFieldBegin(USER_ID1_FIELD_DESC);
          oprot.writeString(struct.userId1);
          oprot.writeFieldEnd();
        }
        if (struct.userId2 != null) {
          oprot.writeFieldBegin(USER_ID2_FIELD_DESC);
          oprot.writeString(struct.userId2);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TOTAL_MSG_FIELD_DESC);
        oprot.writeI32(struct.totalMsg);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMessageIdList_argsTupleSchemeFactory implements SchemeFactory {
      public getMessageIdList_argsTupleScheme getScheme() {
        return new getMessageIdList_argsTupleScheme();
      }
    }

    private static class getMessageIdList_argsTupleScheme extends TupleScheme<getMessageIdList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMessageIdList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId1()) {
          optionals.set(0);
        }
        if (struct.isSetUserId2()) {
          optionals.set(1);
        }
        if (struct.isSetTotalMsg()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId1()) {
          oprot.writeString(struct.userId1);
        }
        if (struct.isSetUserId2()) {
          oprot.writeString(struct.userId2);
        }
        if (struct.isSetTotalMsg()) {
          oprot.writeI32(struct.totalMsg);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMessageIdList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId1 = iprot.readString();
          struct.setUserId1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId2 = iprot.readString();
          struct.setUserId2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.totalMsg = iprot.readI32();
          struct.setTotalMsgIsSet(true);
        }
      }
    }

  }

  public static class getMessageIdList_result implements org.apache.thrift.TBase<getMessageIdList_result, getMessageIdList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMessageIdList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMessageIdList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMessageIdList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMessageIdList_resultTupleSchemeFactory());
    }

    public List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessageIdList_result.class, metaDataMap);
    }

    public getMessageIdList_result() {
    }

    public getMessageIdList_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageIdList_result(getMessageIdList_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getMessageIdList_result deepCopy() {
      return new getMessageIdList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public getMessageIdList_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageIdList_result)
        return this.equals((getMessageIdList_result)that);
      return false;
    }

    public boolean equals(getMessageIdList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMessageIdList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMessageIdList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMessageIdList_resultStandardSchemeFactory implements SchemeFactory {
      public getMessageIdList_resultStandardScheme getScheme() {
        return new getMessageIdList_resultStandardScheme();
      }
    }

    private static class getMessageIdList_resultStandardScheme extends StandardScheme<getMessageIdList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMessageIdList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list72.size);
                  for (int _i73 = 0; _i73 < _list72.size; ++_i73)
                  {
                    long _elem74;
                    _elem74 = iprot.readI64();
                    struct.success.add(_elem74);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMessageIdList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter75 : struct.success)
            {
              oprot.writeI64(_iter75);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMessageIdList_resultTupleSchemeFactory implements SchemeFactory {
      public getMessageIdList_resultTupleScheme getScheme() {
        return new getMessageIdList_resultTupleScheme();
      }
    }

    private static class getMessageIdList_resultTupleScheme extends TupleScheme<getMessageIdList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMessageIdList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter76 : struct.success)
            {
              oprot.writeI64(_iter76);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMessageIdList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list77.size);
            for (int _i78 = 0; _i78 < _list77.size; ++_i78)
            {
              long _elem79;
              _elem79 = iprot.readI64();
              struct.success.add(_elem79);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMessageItem_args implements org.apache.thrift.TBase<getMessageItem_args, getMessageItem_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMessageItem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMessageItem_args");

    private static final org.apache.thrift.protocol.TField USER_ID1_FIELD_DESC = new org.apache.thrift.protocol.TField("userId1", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID2_FIELD_DESC = new org.apache.thrift.protocol.TField("userId2", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("MsgId", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMessageItem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMessageItem_argsTupleSchemeFactory());
    }

    public String userId1; // required
    public String userId2; // required
    public long MsgId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID1((short)1, "userId1"),
      USER_ID2((short)2, "userId2"),
      MSG_ID((short)3, "MsgId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID1
            return USER_ID1;
          case 2: // USER_ID2
            return USER_ID2;
          case 3: // MSG_ID
            return MSG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __MSGID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID1, new org.apache.thrift.meta_data.FieldMetaData("userId1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID2, new org.apache.thrift.meta_data.FieldMetaData("userId2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("MsgId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessageItem_args.class, metaDataMap);
    }

    public getMessageItem_args() {
    }

    public getMessageItem_args(
      String userId1,
      String userId2,
      long MsgId)
    {
      this();
      this.userId1 = userId1;
      this.userId2 = userId2;
      this.MsgId = MsgId;
      setMsgIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageItem_args(getMessageItem_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUserId1()) {
        this.userId1 = other.userId1;
      }
      if (other.isSetUserId2()) {
        this.userId2 = other.userId2;
      }
      this.MsgId = other.MsgId;
    }

    public getMessageItem_args deepCopy() {
      return new getMessageItem_args(this);
    }

    @Override
    public void clear() {
      this.userId1 = null;
      this.userId2 = null;
      setMsgIdIsSet(false);
      this.MsgId = 0;
    }

    public String getUserId1() {
      return this.userId1;
    }

    public getMessageItem_args setUserId1(String userId1) {
      this.userId1 = userId1;
      return this;
    }

    public void unsetUserId1() {
      this.userId1 = null;
    }

    /** Returns true if field userId1 is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId1() {
      return this.userId1 != null;
    }

    public void setUserId1IsSet(boolean value) {
      if (!value) {
        this.userId1 = null;
      }
    }

    public String getUserId2() {
      return this.userId2;
    }

    public getMessageItem_args setUserId2(String userId2) {
      this.userId2 = userId2;
      return this;
    }

    public void unsetUserId2() {
      this.userId2 = null;
    }

    /** Returns true if field userId2 is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId2() {
      return this.userId2 != null;
    }

    public void setUserId2IsSet(boolean value) {
      if (!value) {
        this.userId2 = null;
      }
    }

    public long getMsgId() {
      return this.MsgId;
    }

    public getMessageItem_args setMsgId(long MsgId) {
      this.MsgId = MsgId;
      setMsgIdIsSet(true);
      return this;
    }

    public void unsetMsgId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MSGID_ISSET_ID);
    }

    /** Returns true if field MsgId is set (has been assigned a value) and false otherwise */
    public boolean isSetMsgId() {
      return EncodingUtils.testBit(__isset_bitfield, __MSGID_ISSET_ID);
    }

    public void setMsgIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MSGID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID1:
        if (value == null) {
          unsetUserId1();
        } else {
          setUserId1((String)value);
        }
        break;

      case USER_ID2:
        if (value == null) {
          unsetUserId2();
        } else {
          setUserId2((String)value);
        }
        break;

      case MSG_ID:
        if (value == null) {
          unsetMsgId();
        } else {
          setMsgId((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID1:
        return getUserId1();

      case USER_ID2:
        return getUserId2();

      case MSG_ID:
        return Long.valueOf(getMsgId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID1:
        return isSetUserId1();
      case USER_ID2:
        return isSetUserId2();
      case MSG_ID:
        return isSetMsgId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageItem_args)
        return this.equals((getMessageItem_args)that);
      return false;
    }

    public boolean equals(getMessageItem_args that) {
      if (that == null)
        return false;

      boolean this_present_userId1 = true && this.isSetUserId1();
      boolean that_present_userId1 = true && that.isSetUserId1();
      if (this_present_userId1 || that_present_userId1) {
        if (!(this_present_userId1 && that_present_userId1))
          return false;
        if (!this.userId1.equals(that.userId1))
          return false;
      }

      boolean this_present_userId2 = true && this.isSetUserId2();
      boolean that_present_userId2 = true && that.isSetUserId2();
      if (this_present_userId2 || that_present_userId2) {
        if (!(this_present_userId2 && that_present_userId2))
          return false;
        if (!this.userId2.equals(that.userId2))
          return false;
      }

      boolean this_present_MsgId = true;
      boolean that_present_MsgId = true;
      if (this_present_MsgId || that_present_MsgId) {
        if (!(this_present_MsgId && that_present_MsgId))
          return false;
        if (this.MsgId != that.MsgId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMessageItem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId1()).compareTo(other.isSetUserId1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId1, other.userId1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId2()).compareTo(other.isSetUserId2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId2, other.userId2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMsgId()).compareTo(other.isSetMsgId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsgId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.MsgId, other.MsgId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMessageItem_args(");
      boolean first = true;

      sb.append("userId1:");
      if (this.userId1 == null) {
        sb.append("null");
      } else {
        sb.append(this.userId1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId2:");
      if (this.userId2 == null) {
        sb.append("null");
      } else {
        sb.append(this.userId2);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("MsgId:");
      sb.append(this.MsgId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMessageItem_argsStandardSchemeFactory implements SchemeFactory {
      public getMessageItem_argsStandardScheme getScheme() {
        return new getMessageItem_argsStandardScheme();
      }
    }

    private static class getMessageItem_argsStandardScheme extends StandardScheme<getMessageItem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMessageItem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID1
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId1 = iprot.readString();
                struct.setUserId1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId2 = iprot.readString();
                struct.setUserId2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MSG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.MsgId = iprot.readI64();
                struct.setMsgIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMessageItem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId1 != null) {
          oprot.writeFieldBegin(USER_ID1_FIELD_DESC);
          oprot.writeString(struct.userId1);
          oprot.writeFieldEnd();
        }
        if (struct.userId2 != null) {
          oprot.writeFieldBegin(USER_ID2_FIELD_DESC);
          oprot.writeString(struct.userId2);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MSG_ID_FIELD_DESC);
        oprot.writeI64(struct.MsgId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMessageItem_argsTupleSchemeFactory implements SchemeFactory {
      public getMessageItem_argsTupleScheme getScheme() {
        return new getMessageItem_argsTupleScheme();
      }
    }

    private static class getMessageItem_argsTupleScheme extends TupleScheme<getMessageItem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMessageItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId1()) {
          optionals.set(0);
        }
        if (struct.isSetUserId2()) {
          optionals.set(1);
        }
        if (struct.isSetMsgId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUserId1()) {
          oprot.writeString(struct.userId1);
        }
        if (struct.isSetUserId2()) {
          oprot.writeString(struct.userId2);
        }
        if (struct.isSetMsgId()) {
          oprot.writeI64(struct.MsgId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMessageItem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.userId1 = iprot.readString();
          struct.setUserId1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId2 = iprot.readString();
          struct.setUserId2IsSet(true);
        }
        if (incoming.get(2)) {
          struct.MsgId = iprot.readI64();
          struct.setMsgIdIsSet(true);
        }
      }
    }

  }

  public static class getMessageItem_result implements org.apache.thrift.TBase<getMessageItem_result, getMessageItem_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMessageItem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMessageItem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMessageItem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMessageItem_resultTupleSchemeFactory());
    }

    public MsgItem success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MsgItem.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMessageItem_result.class, metaDataMap);
    }

    public getMessageItem_result() {
    }

    public getMessageItem_result(
      MsgItem success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMessageItem_result(getMessageItem_result other) {
      if (other.isSetSuccess()) {
        this.success = new MsgItem(other.success);
      }
    }

    public getMessageItem_result deepCopy() {
      return new getMessageItem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MsgItem getSuccess() {
      return this.success;
    }

    public getMessageItem_result setSuccess(MsgItem success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MsgItem)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMessageItem_result)
        return this.equals((getMessageItem_result)that);
      return false;
    }

    public boolean equals(getMessageItem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getMessageItem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMessageItem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMessageItem_resultStandardSchemeFactory implements SchemeFactory {
      public getMessageItem_resultStandardScheme getScheme() {
        return new getMessageItem_resultStandardScheme();
      }
    }

    private static class getMessageItem_resultStandardScheme extends StandardScheme<getMessageItem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMessageItem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MsgItem();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMessageItem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMessageItem_resultTupleSchemeFactory implements SchemeFactory {
      public getMessageItem_resultTupleScheme getScheme() {
        return new getMessageItem_resultTupleScheme();
      }
    }

    private static class getMessageItem_resultTupleScheme extends TupleScheme<getMessageItem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMessageItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMessageItem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MsgItem();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class saveRoomMsg_args implements org.apache.thrift.TBase<saveRoomMsg_args, saveRoomMsg_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveRoomMsg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveRoomMsg_args");

    private static final org.apache.thrift.protocol.TField MSG_FIELD_DESC = new org.apache.thrift.protocol.TField("msg", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveRoomMsg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveRoomMsg_argsTupleSchemeFactory());
    }

    public MsgItem msg; // required
    public String roomId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MSG((short)1, "msg"),
      ROOM_ID((short)2, "roomId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MSG
            return MSG;
          case 2: // ROOM_ID
            return ROOM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MSG, new org.apache.thrift.meta_data.FieldMetaData("msg", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MsgItem.class)));
      tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveRoomMsg_args.class, metaDataMap);
    }

    public saveRoomMsg_args() {
    }

    public saveRoomMsg_args(
      MsgItem msg,
      String roomId)
    {
      this();
      this.msg = msg;
      this.roomId = roomId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveRoomMsg_args(saveRoomMsg_args other) {
      if (other.isSetMsg()) {
        this.msg = new MsgItem(other.msg);
      }
      if (other.isSetRoomId()) {
        this.roomId = other.roomId;
      }
    }

    public saveRoomMsg_args deepCopy() {
      return new saveRoomMsg_args(this);
    }

    @Override
    public void clear() {
      this.msg = null;
      this.roomId = null;
    }

    public MsgItem getMsg() {
      return this.msg;
    }

    public saveRoomMsg_args setMsg(MsgItem msg) {
      this.msg = msg;
      return this;
    }

    public void unsetMsg() {
      this.msg = null;
    }

    /** Returns true if field msg is set (has been assigned a value) and false otherwise */
    public boolean isSetMsg() {
      return this.msg != null;
    }

    public void setMsgIsSet(boolean value) {
      if (!value) {
        this.msg = null;
      }
    }

    public String getRoomId() {
      return this.roomId;
    }

    public saveRoomMsg_args setRoomId(String roomId) {
      this.roomId = roomId;
      return this;
    }

    public void unsetRoomId() {
      this.roomId = null;
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return this.roomId != null;
    }

    public void setRoomIdIsSet(boolean value) {
      if (!value) {
        this.roomId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MSG:
        if (value == null) {
          unsetMsg();
        } else {
          setMsg((MsgItem)value);
        }
        break;

      case ROOM_ID:
        if (value == null) {
          unsetRoomId();
        } else {
          setRoomId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MSG:
        return getMsg();

      case ROOM_ID:
        return getRoomId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MSG:
        return isSetMsg();
      case ROOM_ID:
        return isSetRoomId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveRoomMsg_args)
        return this.equals((saveRoomMsg_args)that);
      return false;
    }

    public boolean equals(saveRoomMsg_args that) {
      if (that == null)
        return false;

      boolean this_present_msg = true && this.isSetMsg();
      boolean that_present_msg = true && that.isSetMsg();
      if (this_present_msg || that_present_msg) {
        if (!(this_present_msg && that_present_msg))
          return false;
        if (!this.msg.equals(that.msg))
          return false;
      }

      boolean this_present_roomId = true && this.isSetRoomId();
      boolean that_present_roomId = true && that.isSetRoomId();
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (!this.roomId.equals(that.roomId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saveRoomMsg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMsg()).compareTo(other.isSetMsg());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMsg()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msg, other.msg);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRoomId()).compareTo(other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveRoomMsg_args(");
      boolean first = true;

      sb.append("msg:");
      if (this.msg == null) {
        sb.append("null");
      } else {
        sb.append(this.msg);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("roomId:");
      if (this.roomId == null) {
        sb.append("null");
      } else {
        sb.append(this.roomId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (msg != null) {
        msg.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveRoomMsg_argsStandardSchemeFactory implements SchemeFactory {
      public saveRoomMsg_argsStandardScheme getScheme() {
        return new saveRoomMsg_argsStandardScheme();
      }
    }

    private static class saveRoomMsg_argsStandardScheme extends StandardScheme<saveRoomMsg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveRoomMsg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MSG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.msg = new MsgItem();
                struct.msg.read(iprot);
                struct.setMsgIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ROOM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roomId = iprot.readString();
                struct.setRoomIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveRoomMsg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.msg != null) {
          oprot.writeFieldBegin(MSG_FIELD_DESC);
          struct.msg.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.roomId != null) {
          oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
          oprot.writeString(struct.roomId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveRoomMsg_argsTupleSchemeFactory implements SchemeFactory {
      public saveRoomMsg_argsTupleScheme getScheme() {
        return new saveRoomMsg_argsTupleScheme();
      }
    }

    private static class saveRoomMsg_argsTupleScheme extends TupleScheme<saveRoomMsg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveRoomMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMsg()) {
          optionals.set(0);
        }
        if (struct.isSetRoomId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetMsg()) {
          struct.msg.write(oprot);
        }
        if (struct.isSetRoomId()) {
          oprot.writeString(struct.roomId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveRoomMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.msg = new MsgItem();
          struct.msg.read(iprot);
          struct.setMsgIsSet(true);
        }
        if (incoming.get(1)) {
          struct.roomId = iprot.readString();
          struct.setRoomIdIsSet(true);
        }
      }
    }

  }

  public static class saveRoomMsg_result implements org.apache.thrift.TBase<saveRoomMsg_result, saveRoomMsg_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveRoomMsg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveRoomMsg_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new saveRoomMsg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new saveRoomMsg_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveRoomMsg_result.class, metaDataMap);
    }

    public saveRoomMsg_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveRoomMsg_result(saveRoomMsg_result other) {
    }

    public saveRoomMsg_result deepCopy() {
      return new saveRoomMsg_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof saveRoomMsg_result)
        return this.equals((saveRoomMsg_result)that);
      return false;
    }

    public boolean equals(saveRoomMsg_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(saveRoomMsg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("saveRoomMsg_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveRoomMsg_resultStandardSchemeFactory implements SchemeFactory {
      public saveRoomMsg_resultStandardScheme getScheme() {
        return new saveRoomMsg_resultStandardScheme();
      }
    }

    private static class saveRoomMsg_resultStandardScheme extends StandardScheme<saveRoomMsg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveRoomMsg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveRoomMsg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveRoomMsg_resultTupleSchemeFactory implements SchemeFactory {
      public saveRoomMsg_resultTupleScheme getScheme() {
        return new saveRoomMsg_resultTupleScheme();
      }
    }

    private static class saveRoomMsg_resultTupleScheme extends TupleScheme<saveRoomMsg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveRoomMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveRoomMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getRoomMsg_args implements org.apache.thrift.TBase<getRoomMsg_args, getRoomMsg_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRoomMsg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoomMsg_args");

    private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRoomMsg_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRoomMsg_argsTupleSchemeFactory());
    }

    public String roomId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOM_ID((short)1, "roomId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOM_ID
            return ROOM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoomMsg_args.class, metaDataMap);
    }

    public getRoomMsg_args() {
    }

    public getRoomMsg_args(
      String roomId)
    {
      this();
      this.roomId = roomId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoomMsg_args(getRoomMsg_args other) {
      if (other.isSetRoomId()) {
        this.roomId = other.roomId;
      }
    }

    public getRoomMsg_args deepCopy() {
      return new getRoomMsg_args(this);
    }

    @Override
    public void clear() {
      this.roomId = null;
    }

    public String getRoomId() {
      return this.roomId;
    }

    public getRoomMsg_args setRoomId(String roomId) {
      this.roomId = roomId;
      return this;
    }

    public void unsetRoomId() {
      this.roomId = null;
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return this.roomId != null;
    }

    public void setRoomIdIsSet(boolean value) {
      if (!value) {
        this.roomId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROOM_ID:
        if (value == null) {
          unsetRoomId();
        } else {
          setRoomId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOM_ID:
        return getRoomId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROOM_ID:
        return isSetRoomId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoomMsg_args)
        return this.equals((getRoomMsg_args)that);
      return false;
    }

    public boolean equals(getRoomMsg_args that) {
      if (that == null)
        return false;

      boolean this_present_roomId = true && this.isSetRoomId();
      boolean that_present_roomId = true && that.isSetRoomId();
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (!this.roomId.equals(that.roomId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRoomMsg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoomId()).compareTo(other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoomMsg_args(");
      boolean first = true;

      sb.append("roomId:");
      if (this.roomId == null) {
        sb.append("null");
      } else {
        sb.append(this.roomId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoomMsg_argsStandardSchemeFactory implements SchemeFactory {
      public getRoomMsg_argsStandardScheme getScheme() {
        return new getRoomMsg_argsStandardScheme();
      }
    }

    private static class getRoomMsg_argsStandardScheme extends StandardScheme<getRoomMsg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoomMsg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roomId = iprot.readString();
                struct.setRoomIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoomMsg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roomId != null) {
          oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
          oprot.writeString(struct.roomId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoomMsg_argsTupleSchemeFactory implements SchemeFactory {
      public getRoomMsg_argsTupleScheme getScheme() {
        return new getRoomMsg_argsTupleScheme();
      }
    }

    private static class getRoomMsg_argsTupleScheme extends TupleScheme<getRoomMsg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoomMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoomId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoomId()) {
          oprot.writeString(struct.roomId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoomMsg_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roomId = iprot.readString();
          struct.setRoomIdIsSet(true);
        }
      }
    }

  }

  public static class getRoomMsg_result implements org.apache.thrift.TBase<getRoomMsg_result, getRoomMsg_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRoomMsg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRoomMsg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRoomMsg_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRoomMsg_resultTupleSchemeFactory());
    }

    public List<MsgItem> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MsgItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRoomMsg_result.class, metaDataMap);
    }

    public getRoomMsg_result() {
    }

    public getRoomMsg_result(
      List<MsgItem> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRoomMsg_result(getRoomMsg_result other) {
      if (other.isSetSuccess()) {
        List<MsgItem> __this__success = new ArrayList<MsgItem>(other.success.size());
        for (MsgItem other_element : other.success) {
          __this__success.add(new MsgItem(other_element));
        }
        this.success = __this__success;
      }
    }

    public getRoomMsg_result deepCopy() {
      return new getRoomMsg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<MsgItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(MsgItem elem) {
      if (this.success == null) {
        this.success = new ArrayList<MsgItem>();
      }
      this.success.add(elem);
    }

    public List<MsgItem> getSuccess() {
      return this.success;
    }

    public getRoomMsg_result setSuccess(List<MsgItem> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<MsgItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRoomMsg_result)
        return this.equals((getRoomMsg_result)that);
      return false;
    }

    public boolean equals(getRoomMsg_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRoomMsg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRoomMsg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRoomMsg_resultStandardSchemeFactory implements SchemeFactory {
      public getRoomMsg_resultStandardScheme getScheme() {
        return new getRoomMsg_resultStandardScheme();
      }
    }

    private static class getRoomMsg_resultStandardScheme extends StandardScheme<getRoomMsg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRoomMsg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new ArrayList<MsgItem>(_list80.size);
                  for (int _i81 = 0; _i81 < _list80.size; ++_i81)
                  {
                    MsgItem _elem82;
                    _elem82 = new MsgItem();
                    _elem82.read(iprot);
                    struct.success.add(_elem82);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRoomMsg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (MsgItem _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRoomMsg_resultTupleSchemeFactory implements SchemeFactory {
      public getRoomMsg_resultTupleScheme getScheme() {
        return new getRoomMsg_resultTupleScheme();
      }
    }

    private static class getRoomMsg_resultTupleScheme extends TupleScheme<getRoomMsg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRoomMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (MsgItem _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRoomMsg_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<MsgItem>(_list85.size);
            for (int _i86 = 0; _i86 < _list85.size; ++_i86)
            {
              MsgItem _elem87;
              _elem87 = new MsgItem();
              _elem87.read(iprot);
              struct.success.add(_elem87);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserInRoom_args implements org.apache.thrift.TBase<getUserInRoom_args, getUserInRoom_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInRoom_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInRoom_args");

    private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserInRoom_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserInRoom_argsTupleSchemeFactory());
    }

    public String roomId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROOM_ID((short)1, "roomId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROOM_ID
            return ROOM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInRoom_args.class, metaDataMap);
    }

    public getUserInRoom_args() {
    }

    public getUserInRoom_args(
      String roomId)
    {
      this();
      this.roomId = roomId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInRoom_args(getUserInRoom_args other) {
      if (other.isSetRoomId()) {
        this.roomId = other.roomId;
      }
    }

    public getUserInRoom_args deepCopy() {
      return new getUserInRoom_args(this);
    }

    @Override
    public void clear() {
      this.roomId = null;
    }

    public String getRoomId() {
      return this.roomId;
    }

    public getUserInRoom_args setRoomId(String roomId) {
      this.roomId = roomId;
      return this;
    }

    public void unsetRoomId() {
      this.roomId = null;
    }

    /** Returns true if field roomId is set (has been assigned a value) and false otherwise */
    public boolean isSetRoomId() {
      return this.roomId != null;
    }

    public void setRoomIdIsSet(boolean value) {
      if (!value) {
        this.roomId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ROOM_ID:
        if (value == null) {
          unsetRoomId();
        } else {
          setRoomId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ROOM_ID:
        return getRoomId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ROOM_ID:
        return isSetRoomId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInRoom_args)
        return this.equals((getUserInRoom_args)that);
      return false;
    }

    public boolean equals(getUserInRoom_args that) {
      if (that == null)
        return false;

      boolean this_present_roomId = true && this.isSetRoomId();
      boolean that_present_roomId = true && that.isSetRoomId();
      if (this_present_roomId || that_present_roomId) {
        if (!(this_present_roomId && that_present_roomId))
          return false;
        if (!this.roomId.equals(that.roomId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserInRoom_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRoomId()).compareTo(other.isSetRoomId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoomId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, other.roomId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserInRoom_args(");
      boolean first = true;

      sb.append("roomId:");
      if (this.roomId == null) {
        sb.append("null");
      } else {
        sb.append(this.roomId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInRoom_argsStandardSchemeFactory implements SchemeFactory {
      public getUserInRoom_argsStandardScheme getScheme() {
        return new getUserInRoom_argsStandardScheme();
      }
    }

    private static class getUserInRoom_argsStandardScheme extends StandardScheme<getUserInRoom_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInRoom_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROOM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.roomId = iprot.readString();
                struct.setRoomIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInRoom_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.roomId != null) {
          oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
          oprot.writeString(struct.roomId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInRoom_argsTupleSchemeFactory implements SchemeFactory {
      public getUserInRoom_argsTupleScheme getScheme() {
        return new getUserInRoom_argsTupleScheme();
      }
    }

    private static class getUserInRoom_argsTupleScheme extends TupleScheme<getUserInRoom_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRoomId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoomId()) {
          oprot.writeString(struct.roomId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInRoom_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.roomId = iprot.readString();
          struct.setRoomIdIsSet(true);
        }
      }
    }

  }

  public static class getUserInRoom_result implements org.apache.thrift.TBase<getUserInRoom_result, getUserInRoom_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserInRoom_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserInRoom_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserInRoom_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserInRoom_resultTupleSchemeFactory());
    }

    public List<UserItem> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserInRoom_result.class, metaDataMap);
    }

    public getUserInRoom_result() {
    }

    public getUserInRoom_result(
      List<UserItem> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserInRoom_result(getUserInRoom_result other) {
      if (other.isSetSuccess()) {
        List<UserItem> __this__success = new ArrayList<UserItem>(other.success.size());
        for (UserItem other_element : other.success) {
          __this__success.add(new UserItem(other_element));
        }
        this.success = __this__success;
      }
    }

    public getUserInRoom_result deepCopy() {
      return new getUserInRoom_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<UserItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(UserItem elem) {
      if (this.success == null) {
        this.success = new ArrayList<UserItem>();
      }
      this.success.add(elem);
    }

    public List<UserItem> getSuccess() {
      return this.success;
    }

    public getUserInRoom_result setSuccess(List<UserItem> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<UserItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserInRoom_result)
        return this.equals((getUserInRoom_result)that);
      return false;
    }

    public boolean equals(getUserInRoom_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserInRoom_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserInRoom_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserInRoom_resultStandardSchemeFactory implements SchemeFactory {
      public getUserInRoom_resultStandardScheme getScheme() {
        return new getUserInRoom_resultStandardScheme();
      }
    }

    private static class getUserInRoom_resultStandardScheme extends StandardScheme<getUserInRoom_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserInRoom_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new ArrayList<UserItem>(_list88.size);
                  for (int _i89 = 0; _i89 < _list88.size; ++_i89)
                  {
                    UserItem _elem90;
                    _elem90 = new UserItem();
                    _elem90.read(iprot);
                    struct.success.add(_elem90);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserInRoom_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (UserItem _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserInRoom_resultTupleSchemeFactory implements SchemeFactory {
      public getUserInRoom_resultTupleScheme getScheme() {
        return new getUserInRoom_resultTupleScheme();
      }
    }

    private static class getUserInRoom_resultTupleScheme extends TupleScheme<getUserInRoom_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserInRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (UserItem _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserInRoom_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<UserItem>(_list93.size);
            for (int _i94 = 0; _i94 < _list93.size; ++_i94)
            {
              UserItem _elem95;
              _elem95 = new UserItem();
              _elem95.read(iprot);
              struct.success.add(_elem95);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserProfile_args implements org.apache.thrift.TBase<getUserProfile_args, getUserProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserProfile_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserProfile_argsTupleSchemeFactory());
    }

    public String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserProfile_args.class, metaDataMap);
    }

    public getUserProfile_args() {
    }

    public getUserProfile_args(
      String userId)
    {
      this();
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserProfile_args(getUserProfile_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public getUserProfile_args deepCopy() {
      return new getUserProfile_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public getUserProfile_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserProfile_args)
        return this.equals((getUserProfile_args)that);
      return false;
    }

    public boolean equals(getUserProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserProfile_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserProfile_argsStandardSchemeFactory implements SchemeFactory {
      public getUserProfile_argsStandardScheme getScheme() {
        return new getUserProfile_argsStandardScheme();
      }
    }

    private static class getUserProfile_argsStandardScheme extends StandardScheme<getUserProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserProfile_argsTupleSchemeFactory implements SchemeFactory {
      public getUserProfile_argsTupleScheme getScheme() {
        return new getUserProfile_argsTupleScheme();
      }
    }

    private static class getUserProfile_argsTupleScheme extends TupleScheme<getUserProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getUserProfile_result implements org.apache.thrift.TBase<getUserProfile_result, getUserProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserProfile_resultTupleSchemeFactory());
    }

    public UserItem success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserItem.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserProfile_result.class, metaDataMap);
    }

    public getUserProfile_result() {
    }

    public getUserProfile_result(
      UserItem success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserProfile_result(getUserProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserItem(other.success);
      }
    }

    public getUserProfile_result deepCopy() {
      return new getUserProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UserItem getSuccess() {
      return this.success;
    }

    public getUserProfile_result setSuccess(UserItem success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserItem)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserProfile_result)
        return this.equals((getUserProfile_result)that);
      return false;
    }

    public boolean equals(getUserProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getUserProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserProfile_resultStandardSchemeFactory implements SchemeFactory {
      public getUserProfile_resultStandardScheme getScheme() {
        return new getUserProfile_resultStandardScheme();
      }
    }

    private static class getUserProfile_resultStandardScheme extends StandardScheme<getUserProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserItem();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserProfile_resultTupleSchemeFactory implements SchemeFactory {
      public getUserProfile_resultTupleScheme getScheme() {
        return new getUserProfile_resultTupleScheme();
      }
    }

    private static class getUserProfile_resultTupleScheme extends TupleScheme<getUserProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UserItem();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFriendList_args implements org.apache.thrift.TBase<getFriendList_args, getFriendList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFriendList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFriendList_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFriendList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFriendList_argsTupleSchemeFactory());
    }

    public String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFriendList_args.class, metaDataMap);
    }

    public getFriendList_args() {
    }

    public getFriendList_args(
      String userId)
    {
      this();
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFriendList_args(getFriendList_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public getFriendList_args deepCopy() {
      return new getFriendList_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public getFriendList_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFriendList_args)
        return this.equals((getFriendList_args)that);
      return false;
    }

    public boolean equals(getFriendList_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFriendList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFriendList_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFriendList_argsStandardSchemeFactory implements SchemeFactory {
      public getFriendList_argsStandardScheme getScheme() {
        return new getFriendList_argsStandardScheme();
      }
    }

    private static class getFriendList_argsStandardScheme extends StandardScheme<getFriendList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFriendList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFriendList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFriendList_argsTupleSchemeFactory implements SchemeFactory {
      public getFriendList_argsTupleScheme getScheme() {
        return new getFriendList_argsTupleScheme();
      }
    }

    private static class getFriendList_argsTupleScheme extends TupleScheme<getFriendList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFriendList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFriendList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getFriendList_result implements org.apache.thrift.TBase<getFriendList_result, getFriendList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFriendList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFriendList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFriendList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFriendList_resultTupleSchemeFactory());
    }

    public List<UserItem> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserItem.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFriendList_result.class, metaDataMap);
    }

    public getFriendList_result() {
    }

    public getFriendList_result(
      List<UserItem> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFriendList_result(getFriendList_result other) {
      if (other.isSetSuccess()) {
        List<UserItem> __this__success = new ArrayList<UserItem>(other.success.size());
        for (UserItem other_element : other.success) {
          __this__success.add(new UserItem(other_element));
        }
        this.success = __this__success;
      }
    }

    public getFriendList_result deepCopy() {
      return new getFriendList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<UserItem> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(UserItem elem) {
      if (this.success == null) {
        this.success = new ArrayList<UserItem>();
      }
      this.success.add(elem);
    }

    public List<UserItem> getSuccess() {
      return this.success;
    }

    public getFriendList_result setSuccess(List<UserItem> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<UserItem>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFriendList_result)
        return this.equals((getFriendList_result)that);
      return false;
    }

    public boolean equals(getFriendList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFriendList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFriendList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFriendList_resultStandardSchemeFactory implements SchemeFactory {
      public getFriendList_resultStandardScheme getScheme() {
        return new getFriendList_resultStandardScheme();
      }
    }

    private static class getFriendList_resultStandardScheme extends StandardScheme<getFriendList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFriendList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new ArrayList<UserItem>(_list96.size);
                  for (int _i97 = 0; _i97 < _list96.size; ++_i97)
                  {
                    UserItem _elem98;
                    _elem98 = new UserItem();
                    _elem98.read(iprot);
                    struct.success.add(_elem98);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFriendList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (UserItem _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFriendList_resultTupleSchemeFactory implements SchemeFactory {
      public getFriendList_resultTupleScheme getScheme() {
        return new getFriendList_resultTupleScheme();
      }
    }

    private static class getFriendList_resultTupleScheme extends TupleScheme<getFriendList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFriendList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (UserItem _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFriendList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<UserItem>(_list101.size);
            for (int _i102 = 0; _i102 < _list101.size; ++_i102)
            {
              UserItem _elem103;
              _elem103 = new UserItem();
              _elem103.read(iprot);
              struct.success.add(_elem103);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getNewMsgId_args implements org.apache.thrift.TBase<getNewMsgId_args, getNewMsgId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getNewMsgId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewMsgId_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewMsgId_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewMsgId_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewMsgId_args.class, metaDataMap);
    }

    public getNewMsgId_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewMsgId_args(getNewMsgId_args other) {
    }

    public getNewMsgId_args deepCopy() {
      return new getNewMsgId_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewMsgId_args)
        return this.equals((getNewMsgId_args)that);
      return false;
    }

    public boolean equals(getNewMsgId_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getNewMsgId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewMsgId_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNewMsgId_argsStandardSchemeFactory implements SchemeFactory {
      public getNewMsgId_argsStandardScheme getScheme() {
        return new getNewMsgId_argsStandardScheme();
      }
    }

    private static class getNewMsgId_argsStandardScheme extends StandardScheme<getNewMsgId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewMsgId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewMsgId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewMsgId_argsTupleSchemeFactory implements SchemeFactory {
      public getNewMsgId_argsTupleScheme getScheme() {
        return new getNewMsgId_argsTupleScheme();
      }
    }

    private static class getNewMsgId_argsTupleScheme extends TupleScheme<getNewMsgId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewMsgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewMsgId_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getNewMsgId_result implements org.apache.thrift.TBase<getNewMsgId_result, getNewMsgId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getNewMsgId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getNewMsgId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getNewMsgId_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getNewMsgId_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getNewMsgId_result.class, metaDataMap);
    }

    public getNewMsgId_result() {
    }

    public getNewMsgId_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getNewMsgId_result(getNewMsgId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getNewMsgId_result deepCopy() {
      return new getNewMsgId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public getNewMsgId_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getNewMsgId_result)
        return this.equals((getNewMsgId_result)that);
      return false;
    }

    public boolean equals(getNewMsgId_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getNewMsgId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getNewMsgId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getNewMsgId_resultStandardSchemeFactory implements SchemeFactory {
      public getNewMsgId_resultStandardScheme getScheme() {
        return new getNewMsgId_resultStandardScheme();
      }
    }

    private static class getNewMsgId_resultStandardScheme extends StandardScheme<getNewMsgId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getNewMsgId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getNewMsgId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getNewMsgId_resultTupleSchemeFactory implements SchemeFactory {
      public getNewMsgId_resultTupleScheme getScheme() {
        return new getNewMsgId_resultTupleScheme();
      }
    }

    private static class getNewMsgId_resultTupleScheme extends TupleScheme<getNewMsgId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getNewMsgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getNewMsgId_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class notifyUserOnline_args implements org.apache.thrift.TBase<notifyUserOnline_args, notifyUserOnline_args._Fields>, java.io.Serializable, Cloneable, Comparable<notifyUserOnline_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyUserOnline_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyUserOnline_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyUserOnline_argsTupleSchemeFactory());
    }

    public String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyUserOnline_args.class, metaDataMap);
    }

    public notifyUserOnline_args() {
    }

    public notifyUserOnline_args(
      String userId)
    {
      this();
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyUserOnline_args(notifyUserOnline_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public notifyUserOnline_args deepCopy() {
      return new notifyUserOnline_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public notifyUserOnline_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyUserOnline_args)
        return this.equals((notifyUserOnline_args)that);
      return false;
    }

    public boolean equals(notifyUserOnline_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(notifyUserOnline_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyUserOnline_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyUserOnline_argsStandardSchemeFactory implements SchemeFactory {
      public notifyUserOnline_argsStandardScheme getScheme() {
        return new notifyUserOnline_argsStandardScheme();
      }
    }

    private static class notifyUserOnline_argsStandardScheme extends StandardScheme<notifyUserOnline_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyUserOnline_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyUserOnline_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyUserOnline_argsTupleSchemeFactory implements SchemeFactory {
      public notifyUserOnline_argsTupleScheme getScheme() {
        return new notifyUserOnline_argsTupleScheme();
      }
    }

    private static class notifyUserOnline_argsTupleScheme extends TupleScheme<notifyUserOnline_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyUserOnline_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyUserOnline_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class notifyUserOnline_result implements org.apache.thrift.TBase<notifyUserOnline_result, notifyUserOnline_result._Fields>, java.io.Serializable, Cloneable, Comparable<notifyUserOnline_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyUserOnline_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyUserOnline_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyUserOnline_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyUserOnline_result.class, metaDataMap);
    }

    public notifyUserOnline_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyUserOnline_result(notifyUserOnline_result other) {
    }

    public notifyUserOnline_result deepCopy() {
      return new notifyUserOnline_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyUserOnline_result)
        return this.equals((notifyUserOnline_result)that);
      return false;
    }

    public boolean equals(notifyUserOnline_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(notifyUserOnline_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyUserOnline_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyUserOnline_resultStandardSchemeFactory implements SchemeFactory {
      public notifyUserOnline_resultStandardScheme getScheme() {
        return new notifyUserOnline_resultStandardScheme();
      }
    }

    private static class notifyUserOnline_resultStandardScheme extends StandardScheme<notifyUserOnline_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyUserOnline_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyUserOnline_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyUserOnline_resultTupleSchemeFactory implements SchemeFactory {
      public notifyUserOnline_resultTupleScheme getScheme() {
        return new notifyUserOnline_resultTupleScheme();
      }
    }

    private static class notifyUserOnline_resultTupleScheme extends TupleScheme<notifyUserOnline_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyUserOnline_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyUserOnline_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class notifyListUserOffline_args implements org.apache.thrift.TBase<notifyListUserOffline_args, notifyListUserOffline_args._Fields>, java.io.Serializable, Cloneable, Comparable<notifyListUserOffline_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyListUserOffline_args");

    private static final org.apache.thrift.protocol.TField LIST_USER_ID_OFFLINE_FIELD_DESC = new org.apache.thrift.protocol.TField("listUserIdOffline", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyListUserOffline_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyListUserOffline_argsTupleSchemeFactory());
    }

    public List<String> listUserIdOffline; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_USER_ID_OFFLINE((short)1, "listUserIdOffline");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_USER_ID_OFFLINE
            return LIST_USER_ID_OFFLINE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_USER_ID_OFFLINE, new org.apache.thrift.meta_data.FieldMetaData("listUserIdOffline", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyListUserOffline_args.class, metaDataMap);
    }

    public notifyListUserOffline_args() {
    }

    public notifyListUserOffline_args(
      List<String> listUserIdOffline)
    {
      this();
      this.listUserIdOffline = listUserIdOffline;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyListUserOffline_args(notifyListUserOffline_args other) {
      if (other.isSetListUserIdOffline()) {
        List<String> __this__listUserIdOffline = new ArrayList<String>(other.listUserIdOffline);
        this.listUserIdOffline = __this__listUserIdOffline;
      }
    }

    public notifyListUserOffline_args deepCopy() {
      return new notifyListUserOffline_args(this);
    }

    @Override
    public void clear() {
      this.listUserIdOffline = null;
    }

    public int getListUserIdOfflineSize() {
      return (this.listUserIdOffline == null) ? 0 : this.listUserIdOffline.size();
    }

    public java.util.Iterator<String> getListUserIdOfflineIterator() {
      return (this.listUserIdOffline == null) ? null : this.listUserIdOffline.iterator();
    }

    public void addToListUserIdOffline(String elem) {
      if (this.listUserIdOffline == null) {
        this.listUserIdOffline = new ArrayList<String>();
      }
      this.listUserIdOffline.add(elem);
    }

    public List<String> getListUserIdOffline() {
      return this.listUserIdOffline;
    }

    public notifyListUserOffline_args setListUserIdOffline(List<String> listUserIdOffline) {
      this.listUserIdOffline = listUserIdOffline;
      return this;
    }

    public void unsetListUserIdOffline() {
      this.listUserIdOffline = null;
    }

    /** Returns true if field listUserIdOffline is set (has been assigned a value) and false otherwise */
    public boolean isSetListUserIdOffline() {
      return this.listUserIdOffline != null;
    }

    public void setListUserIdOfflineIsSet(boolean value) {
      if (!value) {
        this.listUserIdOffline = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_USER_ID_OFFLINE:
        if (value == null) {
          unsetListUserIdOffline();
        } else {
          setListUserIdOffline((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_USER_ID_OFFLINE:
        return getListUserIdOffline();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_USER_ID_OFFLINE:
        return isSetListUserIdOffline();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyListUserOffline_args)
        return this.equals((notifyListUserOffline_args)that);
      return false;
    }

    public boolean equals(notifyListUserOffline_args that) {
      if (that == null)
        return false;

      boolean this_present_listUserIdOffline = true && this.isSetListUserIdOffline();
      boolean that_present_listUserIdOffline = true && that.isSetListUserIdOffline();
      if (this_present_listUserIdOffline || that_present_listUserIdOffline) {
        if (!(this_present_listUserIdOffline && that_present_listUserIdOffline))
          return false;
        if (!this.listUserIdOffline.equals(that.listUserIdOffline))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(notifyListUserOffline_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListUserIdOffline()).compareTo(other.isSetListUserIdOffline());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListUserIdOffline()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listUserIdOffline, other.listUserIdOffline);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyListUserOffline_args(");
      boolean first = true;

      sb.append("listUserIdOffline:");
      if (this.listUserIdOffline == null) {
        sb.append("null");
      } else {
        sb.append(this.listUserIdOffline);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyListUserOffline_argsStandardSchemeFactory implements SchemeFactory {
      public notifyListUserOffline_argsStandardScheme getScheme() {
        return new notifyListUserOffline_argsStandardScheme();
      }
    }

    private static class notifyListUserOffline_argsStandardScheme extends StandardScheme<notifyListUserOffline_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyListUserOffline_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_USER_ID_OFFLINE
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.listUserIdOffline = new ArrayList<String>(_list104.size);
                  for (int _i105 = 0; _i105 < _list104.size; ++_i105)
                  {
                    String _elem106;
                    _elem106 = iprot.readString();
                    struct.listUserIdOffline.add(_elem106);
                  }
                  iprot.readListEnd();
                }
                struct.setListUserIdOfflineIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyListUserOffline_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listUserIdOffline != null) {
          oprot.writeFieldBegin(LIST_USER_ID_OFFLINE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listUserIdOffline.size()));
            for (String _iter107 : struct.listUserIdOffline)
            {
              oprot.writeString(_iter107);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyListUserOffline_argsTupleSchemeFactory implements SchemeFactory {
      public notifyListUserOffline_argsTupleScheme getScheme() {
        return new notifyListUserOffline_argsTupleScheme();
      }
    }

    private static class notifyListUserOffline_argsTupleScheme extends TupleScheme<notifyListUserOffline_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyListUserOffline_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListUserIdOffline()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetListUserIdOffline()) {
          {
            oprot.writeI32(struct.listUserIdOffline.size());
            for (String _iter108 : struct.listUserIdOffline)
            {
              oprot.writeString(_iter108);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyListUserOffline_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.listUserIdOffline = new ArrayList<String>(_list109.size);
            for (int _i110 = 0; _i110 < _list109.size; ++_i110)
            {
              String _elem111;
              _elem111 = iprot.readString();
              struct.listUserIdOffline.add(_elem111);
            }
          }
          struct.setListUserIdOfflineIsSet(true);
        }
      }
    }

  }

  public static class notifyListUserOffline_result implements org.apache.thrift.TBase<notifyListUserOffline_result, notifyListUserOffline_result._Fields>, java.io.Serializable, Cloneable, Comparable<notifyListUserOffline_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyListUserOffline_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new notifyListUserOffline_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new notifyListUserOffline_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyListUserOffline_result.class, metaDataMap);
    }

    public notifyListUserOffline_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyListUserOffline_result(notifyListUserOffline_result other) {
    }

    public notifyListUserOffline_result deepCopy() {
      return new notifyListUserOffline_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyListUserOffline_result)
        return this.equals((notifyListUserOffline_result)that);
      return false;
    }

    public boolean equals(notifyListUserOffline_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(notifyListUserOffline_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("notifyListUserOffline_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyListUserOffline_resultStandardSchemeFactory implements SchemeFactory {
      public notifyListUserOffline_resultStandardScheme getScheme() {
        return new notifyListUserOffline_resultStandardScheme();
      }
    }

    private static class notifyListUserOffline_resultStandardScheme extends StandardScheme<notifyListUserOffline_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyListUserOffline_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyListUserOffline_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyListUserOffline_resultTupleSchemeFactory implements SchemeFactory {
      public notifyListUserOffline_resultTupleScheme getScheme() {
        return new notifyListUserOffline_resultTupleScheme();
      }
    }

    private static class notifyListUserOffline_resultTupleScheme extends TupleScheme<notifyListUserOffline_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyListUserOffline_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyListUserOffline_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class checkFriendOnline_args implements org.apache.thrift.TBase<checkFriendOnline_args, checkFriendOnline_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkFriendOnline_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkFriendOnline_args");

    private static final org.apache.thrift.protocol.TField LIST_FRIEND_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("listFriendId", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkFriendOnline_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkFriendOnline_argsTupleSchemeFactory());
    }

    public List<String> listFriendId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LIST_FRIEND_ID((short)1, "listFriendId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LIST_FRIEND_ID
            return LIST_FRIEND_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LIST_FRIEND_ID, new org.apache.thrift.meta_data.FieldMetaData("listFriendId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkFriendOnline_args.class, metaDataMap);
    }

    public checkFriendOnline_args() {
    }

    public checkFriendOnline_args(
      List<String> listFriendId)
    {
      this();
      this.listFriendId = listFriendId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkFriendOnline_args(checkFriendOnline_args other) {
      if (other.isSetListFriendId()) {
        List<String> __this__listFriendId = new ArrayList<String>(other.listFriendId);
        this.listFriendId = __this__listFriendId;
      }
    }

    public checkFriendOnline_args deepCopy() {
      return new checkFriendOnline_args(this);
    }

    @Override
    public void clear() {
      this.listFriendId = null;
    }

    public int getListFriendIdSize() {
      return (this.listFriendId == null) ? 0 : this.listFriendId.size();
    }

    public java.util.Iterator<String> getListFriendIdIterator() {
      return (this.listFriendId == null) ? null : this.listFriendId.iterator();
    }

    public void addToListFriendId(String elem) {
      if (this.listFriendId == null) {
        this.listFriendId = new ArrayList<String>();
      }
      this.listFriendId.add(elem);
    }

    public List<String> getListFriendId() {
      return this.listFriendId;
    }

    public checkFriendOnline_args setListFriendId(List<String> listFriendId) {
      this.listFriendId = listFriendId;
      return this;
    }

    public void unsetListFriendId() {
      this.listFriendId = null;
    }

    /** Returns true if field listFriendId is set (has been assigned a value) and false otherwise */
    public boolean isSetListFriendId() {
      return this.listFriendId != null;
    }

    public void setListFriendIdIsSet(boolean value) {
      if (!value) {
        this.listFriendId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LIST_FRIEND_ID:
        if (value == null) {
          unsetListFriendId();
        } else {
          setListFriendId((List<String>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LIST_FRIEND_ID:
        return getListFriendId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LIST_FRIEND_ID:
        return isSetListFriendId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkFriendOnline_args)
        return this.equals((checkFriendOnline_args)that);
      return false;
    }

    public boolean equals(checkFriendOnline_args that) {
      if (that == null)
        return false;

      boolean this_present_listFriendId = true && this.isSetListFriendId();
      boolean that_present_listFriendId = true && that.isSetListFriendId();
      if (this_present_listFriendId || that_present_listFriendId) {
        if (!(this_present_listFriendId && that_present_listFriendId))
          return false;
        if (!this.listFriendId.equals(that.listFriendId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkFriendOnline_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetListFriendId()).compareTo(other.isSetListFriendId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetListFriendId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listFriendId, other.listFriendId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkFriendOnline_args(");
      boolean first = true;

      sb.append("listFriendId:");
      if (this.listFriendId == null) {
        sb.append("null");
      } else {
        sb.append(this.listFriendId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkFriendOnline_argsStandardSchemeFactory implements SchemeFactory {
      public checkFriendOnline_argsStandardScheme getScheme() {
        return new checkFriendOnline_argsStandardScheme();
      }
    }

    private static class checkFriendOnline_argsStandardScheme extends StandardScheme<checkFriendOnline_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkFriendOnline_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LIST_FRIEND_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.listFriendId = new ArrayList<String>(_list112.size);
                  for (int _i113 = 0; _i113 < _list112.size; ++_i113)
                  {
                    String _elem114;
                    _elem114 = iprot.readString();
                    struct.listFriendId.add(_elem114);
                  }
                  iprot.readListEnd();
                }
                struct.setListFriendIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkFriendOnline_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.listFriendId != null) {
          oprot.writeFieldBegin(LIST_FRIEND_ID_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.listFriendId.size()));
            for (String _iter115 : struct.listFriendId)
            {
              oprot.writeString(_iter115);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkFriendOnline_argsTupleSchemeFactory implements SchemeFactory {
      public checkFriendOnline_argsTupleScheme getScheme() {
        return new checkFriendOnline_argsTupleScheme();
      }
    }

    private static class checkFriendOnline_argsTupleScheme extends TupleScheme<checkFriendOnline_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkFriendOnline_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetListFriendId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetListFriendId()) {
          {
            oprot.writeI32(struct.listFriendId.size());
            for (String _iter116 : struct.listFriendId)
            {
              oprot.writeString(_iter116);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkFriendOnline_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.listFriendId = new ArrayList<String>(_list117.size);
            for (int _i118 = 0; _i118 < _list117.size; ++_i118)
            {
              String _elem119;
              _elem119 = iprot.readString();
              struct.listFriendId.add(_elem119);
            }
          }
          struct.setListFriendIdIsSet(true);
        }
      }
    }

  }

  public static class checkFriendOnline_result implements org.apache.thrift.TBase<checkFriendOnline_result, checkFriendOnline_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkFriendOnline_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkFriendOnline_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new checkFriendOnline_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new checkFriendOnline_resultTupleSchemeFactory());
    }

    public List<Boolean> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkFriendOnline_result.class, metaDataMap);
    }

    public checkFriendOnline_result() {
    }

    public checkFriendOnline_result(
      List<Boolean> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkFriendOnline_result(checkFriendOnline_result other) {
      if (other.isSetSuccess()) {
        List<Boolean> __this__success = new ArrayList<Boolean>(other.success);
        this.success = __this__success;
      }
    }

    public checkFriendOnline_result deepCopy() {
      return new checkFriendOnline_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Boolean> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(boolean elem) {
      if (this.success == null) {
        this.success = new ArrayList<Boolean>();
      }
      this.success.add(elem);
    }

    public List<Boolean> getSuccess() {
      return this.success;
    }

    public checkFriendOnline_result setSuccess(List<Boolean> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Boolean>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof checkFriendOnline_result)
        return this.equals((checkFriendOnline_result)that);
      return false;
    }

    public boolean equals(checkFriendOnline_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(checkFriendOnline_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("checkFriendOnline_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkFriendOnline_resultStandardSchemeFactory implements SchemeFactory {
      public checkFriendOnline_resultStandardScheme getScheme() {
        return new checkFriendOnline_resultStandardScheme();
      }
    }

    private static class checkFriendOnline_resultStandardScheme extends StandardScheme<checkFriendOnline_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkFriendOnline_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new ArrayList<Boolean>(_list120.size);
                  for (int _i121 = 0; _i121 < _list120.size; ++_i121)
                  {
                    boolean _elem122;
                    _elem122 = iprot.readBool();
                    struct.success.add(_elem122);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkFriendOnline_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, struct.success.size()));
            for (boolean _iter123 : struct.success)
            {
              oprot.writeBool(_iter123);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkFriendOnline_resultTupleSchemeFactory implements SchemeFactory {
      public checkFriendOnline_resultTupleScheme getScheme() {
        return new checkFriendOnline_resultTupleScheme();
      }
    }

    private static class checkFriendOnline_resultTupleScheme extends TupleScheme<checkFriendOnline_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkFriendOnline_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (boolean _iter124 : struct.success)
            {
              oprot.writeBool(_iter124);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkFriendOnline_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.BOOL, iprot.readI32());
            struct.success = new ArrayList<Boolean>(_list125.size);
            for (int _i126 = 0; _i126 < _list125.size; ++_i126)
            {
              boolean _elem127;
              _elem127 = iprot.readBool();
              struct.success.add(_elem127);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getFriendListZalo_args implements org.apache.thrift.TBase<getFriendListZalo_args, getFriendListZalo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFriendListZalo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFriendListZalo_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField O_AUTH_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("oAuthCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFriendListZalo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFriendListZalo_argsTupleSchemeFactory());
    }

    public String userId; // required
    public String oAuthCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      O_AUTH_CODE((short)2, "oAuthCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // O_AUTH_CODE
            return O_AUTH_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.O_AUTH_CODE, new org.apache.thrift.meta_data.FieldMetaData("oAuthCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFriendListZalo_args.class, metaDataMap);
    }

    public getFriendListZalo_args() {
    }

    public getFriendListZalo_args(
      String userId,
      String oAuthCode)
    {
      this();
      this.userId = userId;
      this.oAuthCode = oAuthCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFriendListZalo_args(getFriendListZalo_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetOAuthCode()) {
        this.oAuthCode = other.oAuthCode;
      }
    }

    public getFriendListZalo_args deepCopy() {
      return new getFriendListZalo_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.oAuthCode = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public getFriendListZalo_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getOAuthCode() {
      return this.oAuthCode;
    }

    public getFriendListZalo_args setOAuthCode(String oAuthCode) {
      this.oAuthCode = oAuthCode;
      return this;
    }

    public void unsetOAuthCode() {
      this.oAuthCode = null;
    }

    /** Returns true if field oAuthCode is set (has been assigned a value) and false otherwise */
    public boolean isSetOAuthCode() {
      return this.oAuthCode != null;
    }

    public void setOAuthCodeIsSet(boolean value) {
      if (!value) {
        this.oAuthCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case O_AUTH_CODE:
        if (value == null) {
          unsetOAuthCode();
        } else {
          setOAuthCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case O_AUTH_CODE:
        return getOAuthCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case O_AUTH_CODE:
        return isSetOAuthCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFriendListZalo_args)
        return this.equals((getFriendListZalo_args)that);
      return false;
    }

    public boolean equals(getFriendListZalo_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_oAuthCode = true && this.isSetOAuthCode();
      boolean that_present_oAuthCode = true && that.isSetOAuthCode();
      if (this_present_oAuthCode || that_present_oAuthCode) {
        if (!(this_present_oAuthCode && that_present_oAuthCode))
          return false;
        if (!this.oAuthCode.equals(that.oAuthCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFriendListZalo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOAuthCode()).compareTo(other.isSetOAuthCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOAuthCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oAuthCode, other.oAuthCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFriendListZalo_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oAuthCode:");
      if (this.oAuthCode == null) {
        sb.append("null");
      } else {
        sb.append(this.oAuthCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFriendListZalo_argsStandardSchemeFactory implements SchemeFactory {
      public getFriendListZalo_argsStandardScheme getScheme() {
        return new getFriendListZalo_argsStandardScheme();
      }
    }

    private static class getFriendListZalo_argsStandardScheme extends StandardScheme<getFriendListZalo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFriendListZalo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // O_AUTH_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.oAuthCode = iprot.readString();
                struct.setOAuthCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFriendListZalo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.oAuthCode != null) {
          oprot.writeFieldBegin(O_AUTH_CODE_FIELD_DESC);
          oprot.writeString(struct.oAuthCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFriendListZalo_argsTupleSchemeFactory implements SchemeFactory {
      public getFriendListZalo_argsTupleScheme getScheme() {
        return new getFriendListZalo_argsTupleScheme();
      }
    }

    private static class getFriendListZalo_argsTupleScheme extends TupleScheme<getFriendListZalo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFriendListZalo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetOAuthCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetOAuthCode()) {
          oprot.writeString(struct.oAuthCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFriendListZalo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oAuthCode = iprot.readString();
          struct.setOAuthCodeIsSet(true);
        }
      }
    }

  }

  public static class getFriendListZalo_result implements org.apache.thrift.TBase<getFriendListZalo_result, getFriendListZalo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFriendListZalo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFriendListZalo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFriendListZalo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFriendListZalo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFriendListZalo_result.class, metaDataMap);
    }

    public getFriendListZalo_result() {
    }

    public getFriendListZalo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFriendListZalo_result(getFriendListZalo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getFriendListZalo_result deepCopy() {
      return new getFriendListZalo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getFriendListZalo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFriendListZalo_result)
        return this.equals((getFriendListZalo_result)that);
      return false;
    }

    public boolean equals(getFriendListZalo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getFriendListZalo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFriendListZalo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFriendListZalo_resultStandardSchemeFactory implements SchemeFactory {
      public getFriendListZalo_resultStandardScheme getScheme() {
        return new getFriendListZalo_resultStandardScheme();
      }
    }

    private static class getFriendListZalo_resultStandardScheme extends StandardScheme<getFriendListZalo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFriendListZalo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFriendListZalo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFriendListZalo_resultTupleSchemeFactory implements SchemeFactory {
      public getFriendListZalo_resultTupleScheme getScheme() {
        return new getFriendListZalo_resultTupleScheme();
      }
    }

    private static class getFriendListZalo_resultTupleScheme extends TupleScheme<getFriendListZalo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFriendListZalo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFriendListZalo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getProfileZalo_args implements org.apache.thrift.TBase<getProfileZalo_args, getProfileZalo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileZalo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileZalo_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField O_AUTH_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("oAuthCode", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileZalo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileZalo_argsTupleSchemeFactory());
    }

    public String userId; // required
    public String oAuthCode; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      O_AUTH_CODE((short)2, "oAuthCode");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // O_AUTH_CODE
            return O_AUTH_CODE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.O_AUTH_CODE, new org.apache.thrift.meta_data.FieldMetaData("oAuthCode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileZalo_args.class, metaDataMap);
    }

    public getProfileZalo_args() {
    }

    public getProfileZalo_args(
      String userId,
      String oAuthCode)
    {
      this();
      this.userId = userId;
      this.oAuthCode = oAuthCode;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileZalo_args(getProfileZalo_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetOAuthCode()) {
        this.oAuthCode = other.oAuthCode;
      }
    }

    public getProfileZalo_args deepCopy() {
      return new getProfileZalo_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
      this.oAuthCode = null;
    }

    public String getUserId() {
      return this.userId;
    }

    public getProfileZalo_args setUserId(String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public String getOAuthCode() {
      return this.oAuthCode;
    }

    public getProfileZalo_args setOAuthCode(String oAuthCode) {
      this.oAuthCode = oAuthCode;
      return this;
    }

    public void unsetOAuthCode() {
      this.oAuthCode = null;
    }

    /** Returns true if field oAuthCode is set (has been assigned a value) and false otherwise */
    public boolean isSetOAuthCode() {
      return this.oAuthCode != null;
    }

    public void setOAuthCodeIsSet(boolean value) {
      if (!value) {
        this.oAuthCode = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((String)value);
        }
        break;

      case O_AUTH_CODE:
        if (value == null) {
          unsetOAuthCode();
        } else {
          setOAuthCode((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case O_AUTH_CODE:
        return getOAuthCode();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case O_AUTH_CODE:
        return isSetOAuthCode();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileZalo_args)
        return this.equals((getProfileZalo_args)that);
      return false;
    }

    public boolean equals(getProfileZalo_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_oAuthCode = true && this.isSetOAuthCode();
      boolean that_present_oAuthCode = true && that.isSetOAuthCode();
      if (this_present_oAuthCode || that_present_oAuthCode) {
        if (!(this_present_oAuthCode && that_present_oAuthCode))
          return false;
        if (!this.oAuthCode.equals(that.oAuthCode))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getProfileZalo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetOAuthCode()).compareTo(other.isSetOAuthCode());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOAuthCode()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oAuthCode, other.oAuthCode);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileZalo_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("oAuthCode:");
      if (this.oAuthCode == null) {
        sb.append("null");
      } else {
        sb.append(this.oAuthCode);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileZalo_argsStandardSchemeFactory implements SchemeFactory {
      public getProfileZalo_argsStandardScheme getScheme() {
        return new getProfileZalo_argsStandardScheme();
      }
    }

    private static class getProfileZalo_argsStandardScheme extends StandardScheme<getProfileZalo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileZalo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // O_AUTH_CODE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.oAuthCode = iprot.readString();
                struct.setOAuthCodeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileZalo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.oAuthCode != null) {
          oprot.writeFieldBegin(O_AUTH_CODE_FIELD_DESC);
          oprot.writeString(struct.oAuthCode);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileZalo_argsTupleSchemeFactory implements SchemeFactory {
      public getProfileZalo_argsTupleScheme getScheme() {
        return new getProfileZalo_argsTupleScheme();
      }
    }

    private static class getProfileZalo_argsTupleScheme extends TupleScheme<getProfileZalo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileZalo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetOAuthCode()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetOAuthCode()) {
          oprot.writeString(struct.oAuthCode);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileZalo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.oAuthCode = iprot.readString();
          struct.setOAuthCodeIsSet(true);
        }
      }
    }

  }

  public static class getProfileZalo_result implements org.apache.thrift.TBase<getProfileZalo_result, getProfileZalo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProfileZalo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProfileZalo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getProfileZalo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getProfileZalo_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProfileZalo_result.class, metaDataMap);
    }

    public getProfileZalo_result() {
    }

    public getProfileZalo_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProfileZalo_result(getProfileZalo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getProfileZalo_result deepCopy() {
      return new getProfileZalo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getProfileZalo_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getProfileZalo_result)
        return this.equals((getProfileZalo_result)that);
      return false;
    }

    public boolean equals(getProfileZalo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getProfileZalo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getProfileZalo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProfileZalo_resultStandardSchemeFactory implements SchemeFactory {
      public getProfileZalo_resultStandardScheme getScheme() {
        return new getProfileZalo_resultStandardScheme();
      }
    }

    private static class getProfileZalo_resultStandardScheme extends StandardScheme<getProfileZalo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProfileZalo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProfileZalo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProfileZalo_resultTupleSchemeFactory implements SchemeFactory {
      public getProfileZalo_resultTupleScheme getScheme() {
        return new getProfileZalo_resultTupleScheme();
      }
    }

    private static class getProfileZalo_resultTupleScheme extends TupleScheme<getProfileZalo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProfileZalo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProfileZalo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setLogin_args implements org.apache.thrift.TBase<setLogin_args, setLogin_args._Fields>, java.io.Serializable, Cloneable, Comparable<setLogin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setLogin_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setLogin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setLogin_argsTupleSchemeFactory());
    }

    public String sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setLogin_args.class, metaDataMap);
    }

    public setLogin_args() {
    }

    public setLogin_args(
      String sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setLogin_args(setLogin_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public setLogin_args deepCopy() {
      return new setLogin_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public setLogin_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setLogin_args)
        return this.equals((setLogin_args)that);
      return false;
    }

    public boolean equals(setLogin_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setLogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setLogin_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setLogin_argsStandardSchemeFactory implements SchemeFactory {
      public setLogin_argsStandardScheme getScheme() {
        return new setLogin_argsStandardScheme();
      }
    }

    private static class setLogin_argsStandardScheme extends StandardScheme<setLogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setLogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setLogin_argsTupleSchemeFactory implements SchemeFactory {
      public setLogin_argsTupleScheme getScheme() {
        return new setLogin_argsTupleScheme();
      }
    }

    private static class setLogin_argsTupleScheme extends TupleScheme<setLogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
      }
    }

  }

  public static class setLogin_result implements org.apache.thrift.TBase<setLogin_result, setLogin_result._Fields>, java.io.Serializable, Cloneable, Comparable<setLogin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setLogin_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setLogin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setLogin_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setLogin_result.class, metaDataMap);
    }

    public setLogin_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setLogin_result(setLogin_result other) {
    }

    public setLogin_result deepCopy() {
      return new setLogin_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setLogin_result)
        return this.equals((setLogin_result)that);
      return false;
    }

    public boolean equals(setLogin_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setLogin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setLogin_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setLogin_resultStandardSchemeFactory implements SchemeFactory {
      public setLogin_resultStandardScheme getScheme() {
        return new setLogin_resultStandardScheme();
      }
    }

    private static class setLogin_resultStandardScheme extends StandardScheme<setLogin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setLogin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setLogin_resultTupleSchemeFactory implements SchemeFactory {
      public setLogin_resultTupleScheme getScheme() {
        return new setLogin_resultTupleScheme();
      }
    }

    private static class setLogin_resultTupleScheme extends TupleScheme<setLogin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class isLogin_args implements org.apache.thrift.TBase<isLogin_args, isLogin_args._Fields>, java.io.Serializable, Cloneable, Comparable<isLogin_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isLogin_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isLogin_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isLogin_argsTupleSchemeFactory());
    }

    public String sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isLogin_args.class, metaDataMap);
    }

    public isLogin_args() {
    }

    public isLogin_args(
      String sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isLogin_args(isLogin_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public isLogin_args deepCopy() {
      return new isLogin_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public isLogin_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isLogin_args)
        return this.equals((isLogin_args)that);
      return false;
    }

    public boolean equals(isLogin_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(isLogin_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isLogin_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isLogin_argsStandardSchemeFactory implements SchemeFactory {
      public isLogin_argsStandardScheme getScheme() {
        return new isLogin_argsStandardScheme();
      }
    }

    private static class isLogin_argsStandardScheme extends StandardScheme<isLogin_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isLogin_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isLogin_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isLogin_argsTupleSchemeFactory implements SchemeFactory {
      public isLogin_argsTupleScheme getScheme() {
        return new isLogin_argsTupleScheme();
      }
    }

    private static class isLogin_argsTupleScheme extends TupleScheme<isLogin_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isLogin_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
      }
    }

  }

  public static class isLogin_result implements org.apache.thrift.TBase<isLogin_result, isLogin_result._Fields>, java.io.Serializable, Cloneable, Comparable<isLogin_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isLogin_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isLogin_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isLogin_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isLogin_result.class, metaDataMap);
    }

    public isLogin_result() {
    }

    public isLogin_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isLogin_result(isLogin_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public isLogin_result deepCopy() {
      return new isLogin_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isLogin_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isLogin_result)
        return this.equals((isLogin_result)that);
      return false;
    }

    public boolean equals(isLogin_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(isLogin_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isLogin_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isLogin_resultStandardSchemeFactory implements SchemeFactory {
      public isLogin_resultStandardScheme getScheme() {
        return new isLogin_resultStandardScheme();
      }
    }

    private static class isLogin_resultStandardScheme extends StandardScheme<isLogin_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isLogin_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isLogin_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isLogin_resultTupleSchemeFactory implements SchemeFactory {
      public isLogin_resultTupleScheme getScheme() {
        return new isLogin_resultTupleScheme();
      }
    }

    private static class isLogin_resultTupleScheme extends TupleScheme<isLogin_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isLogin_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setLogout_args implements org.apache.thrift.TBase<setLogout_args, setLogout_args._Fields>, java.io.Serializable, Cloneable, Comparable<setLogout_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setLogout_args");

    private static final org.apache.thrift.protocol.TField SESSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("sessionId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setLogout_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setLogout_argsTupleSchemeFactory());
    }

    public String sessionId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SESSION_ID((short)1, "sessionId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SESSION_ID
            return SESSION_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SESSION_ID, new org.apache.thrift.meta_data.FieldMetaData("sessionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setLogout_args.class, metaDataMap);
    }

    public setLogout_args() {
    }

    public setLogout_args(
      String sessionId)
    {
      this();
      this.sessionId = sessionId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setLogout_args(setLogout_args other) {
      if (other.isSetSessionId()) {
        this.sessionId = other.sessionId;
      }
    }

    public setLogout_args deepCopy() {
      return new setLogout_args(this);
    }

    @Override
    public void clear() {
      this.sessionId = null;
    }

    public String getSessionId() {
      return this.sessionId;
    }

    public setLogout_args setSessionId(String sessionId) {
      this.sessionId = sessionId;
      return this;
    }

    public void unsetSessionId() {
      this.sessionId = null;
    }

    /** Returns true if field sessionId is set (has been assigned a value) and false otherwise */
    public boolean isSetSessionId() {
      return this.sessionId != null;
    }

    public void setSessionIdIsSet(boolean value) {
      if (!value) {
        this.sessionId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SESSION_ID:
        if (value == null) {
          unsetSessionId();
        } else {
          setSessionId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SESSION_ID:
        return getSessionId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SESSION_ID:
        return isSetSessionId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setLogout_args)
        return this.equals((setLogout_args)that);
      return false;
    }

    public boolean equals(setLogout_args that) {
      if (that == null)
        return false;

      boolean this_present_sessionId = true && this.isSetSessionId();
      boolean that_present_sessionId = true && that.isSetSessionId();
      if (this_present_sessionId || that_present_sessionId) {
        if (!(this_present_sessionId && that_present_sessionId))
          return false;
        if (!this.sessionId.equals(that.sessionId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setLogout_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSessionId()).compareTo(other.isSetSessionId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSessionId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sessionId, other.sessionId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setLogout_args(");
      boolean first = true;

      sb.append("sessionId:");
      if (this.sessionId == null) {
        sb.append("null");
      } else {
        sb.append(this.sessionId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setLogout_argsStandardSchemeFactory implements SchemeFactory {
      public setLogout_argsStandardScheme getScheme() {
        return new setLogout_argsStandardScheme();
      }
    }

    private static class setLogout_argsStandardScheme extends StandardScheme<setLogout_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setLogout_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SESSION_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sessionId = iprot.readString();
                struct.setSessionIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setLogout_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sessionId != null) {
          oprot.writeFieldBegin(SESSION_ID_FIELD_DESC);
          oprot.writeString(struct.sessionId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setLogout_argsTupleSchemeFactory implements SchemeFactory {
      public setLogout_argsTupleScheme getScheme() {
        return new setLogout_argsTupleScheme();
      }
    }

    private static class setLogout_argsTupleScheme extends TupleScheme<setLogout_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setLogout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSessionId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSessionId()) {
          oprot.writeString(struct.sessionId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setLogout_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.sessionId = iprot.readString();
          struct.setSessionIdIsSet(true);
        }
      }
    }

  }

  public static class setLogout_result implements org.apache.thrift.TBase<setLogout_result, setLogout_result._Fields>, java.io.Serializable, Cloneable, Comparable<setLogout_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setLogout_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setLogout_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setLogout_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setLogout_result.class, metaDataMap);
    }

    public setLogout_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setLogout_result(setLogout_result other) {
    }

    public setLogout_result deepCopy() {
      return new setLogout_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setLogout_result)
        return this.equals((setLogout_result)that);
      return false;
    }

    public boolean equals(setLogout_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setLogout_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setLogout_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setLogout_resultStandardSchemeFactory implements SchemeFactory {
      public setLogout_resultStandardScheme getScheme() {
        return new setLogout_resultStandardScheme();
      }
    }

    private static class setLogout_resultStandardScheme extends StandardScheme<setLogout_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setLogout_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setLogout_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setLogout_resultTupleSchemeFactory implements SchemeFactory {
      public setLogout_resultTupleScheme getScheme() {
        return new setLogout_resultTupleScheme();
      }
    }

    private static class setLogout_resultTupleScheme extends TupleScheme<setLogout_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setLogout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setLogout_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
