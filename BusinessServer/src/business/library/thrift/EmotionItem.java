/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package business.library.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Emotion item information
 */
public class EmotionItem implements org.apache.thrift.TBase<EmotionItem, EmotionItem._Fields>, java.io.Serializable, Cloneable, Comparable<EmotionItem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("EmotionItem");

  private static final org.apache.thrift.protocol.TField EMOTION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("emotionId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_INPUT_FIELD_DESC = new org.apache.thrift.protocol.TField("keyInput", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STYLE_FIELD_DESC = new org.apache.thrift.protocol.TField("style", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("src", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("groupId", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new EmotionItemStandardSchemeFactory());
    schemes.put(TupleScheme.class, new EmotionItemTupleSchemeFactory());
  }

  public long emotionId; // required
  public String keyInput; // required
  public String style; // required
  public String src; // required
  public String title; // required
  public String groupId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EMOTION_ID((short)1, "emotionId"),
    KEY_INPUT((short)2, "keyInput"),
    STYLE((short)3, "style"),
    SRC((short)4, "src"),
    TITLE((short)5, "title"),
    GROUP_ID((short)6, "groupId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EMOTION_ID
          return EMOTION_ID;
        case 2: // KEY_INPUT
          return KEY_INPUT;
        case 3: // STYLE
          return STYLE;
        case 4: // SRC
          return SRC;
        case 5: // TITLE
          return TITLE;
        case 6: // GROUP_ID
          return GROUP_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EMOTIONID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EMOTION_ID, new org.apache.thrift.meta_data.FieldMetaData("emotionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.KEY_INPUT, new org.apache.thrift.meta_data.FieldMetaData("keyInput", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STYLE, new org.apache.thrift.meta_data.FieldMetaData("style", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SRC, new org.apache.thrift.meta_data.FieldMetaData("src", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("groupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(EmotionItem.class, metaDataMap);
  }

  public EmotionItem() {
  }

  public EmotionItem(
    long emotionId,
    String keyInput,
    String style,
    String src,
    String title,
    String groupId)
  {
    this();
    this.emotionId = emotionId;
    setEmotionIdIsSet(true);
    this.keyInput = keyInput;
    this.style = style;
    this.src = src;
    this.title = title;
    this.groupId = groupId;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public EmotionItem(EmotionItem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.emotionId = other.emotionId;
    if (other.isSetKeyInput()) {
      this.keyInput = other.keyInput;
    }
    if (other.isSetStyle()) {
      this.style = other.style;
    }
    if (other.isSetSrc()) {
      this.src = other.src;
    }
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetGroupId()) {
      this.groupId = other.groupId;
    }
  }

  public EmotionItem deepCopy() {
    return new EmotionItem(this);
  }

  @Override
  public void clear() {
    setEmotionIdIsSet(false);
    this.emotionId = 0;
    this.keyInput = null;
    this.style = null;
    this.src = null;
    this.title = null;
    this.groupId = null;
  }

  public long getEmotionId() {
    return this.emotionId;
  }

  public EmotionItem setEmotionId(long emotionId) {
    this.emotionId = emotionId;
    setEmotionIdIsSet(true);
    return this;
  }

  public void unsetEmotionId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __EMOTIONID_ISSET_ID);
  }

  /** Returns true if field emotionId is set (has been assigned a value) and false otherwise */
  public boolean isSetEmotionId() {
    return EncodingUtils.testBit(__isset_bitfield, __EMOTIONID_ISSET_ID);
  }

  public void setEmotionIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __EMOTIONID_ISSET_ID, value);
  }

  public String getKeyInput() {
    return this.keyInput;
  }

  public EmotionItem setKeyInput(String keyInput) {
    this.keyInput = keyInput;
    return this;
  }

  public void unsetKeyInput() {
    this.keyInput = null;
  }

  /** Returns true if field keyInput is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyInput() {
    return this.keyInput != null;
  }

  public void setKeyInputIsSet(boolean value) {
    if (!value) {
      this.keyInput = null;
    }
  }

  public String getStyle() {
    return this.style;
  }

  public EmotionItem setStyle(String style) {
    this.style = style;
    return this;
  }

  public void unsetStyle() {
    this.style = null;
  }

  /** Returns true if field style is set (has been assigned a value) and false otherwise */
  public boolean isSetStyle() {
    return this.style != null;
  }

  public void setStyleIsSet(boolean value) {
    if (!value) {
      this.style = null;
    }
  }

  public String getSrc() {
    return this.src;
  }

  public EmotionItem setSrc(String src) {
    this.src = src;
    return this;
  }

  public void unsetSrc() {
    this.src = null;
  }

  /** Returns true if field src is set (has been assigned a value) and false otherwise */
  public boolean isSetSrc() {
    return this.src != null;
  }

  public void setSrcIsSet(boolean value) {
    if (!value) {
      this.src = null;
    }
  }

  public String getTitle() {
    return this.title;
  }

  public EmotionItem setTitle(String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public String getGroupId() {
    return this.groupId;
  }

  public EmotionItem setGroupId(String groupId) {
    this.groupId = groupId;
    return this;
  }

  public void unsetGroupId() {
    this.groupId = null;
  }

  /** Returns true if field groupId is set (has been assigned a value) and false otherwise */
  public boolean isSetGroupId() {
    return this.groupId != null;
  }

  public void setGroupIdIsSet(boolean value) {
    if (!value) {
      this.groupId = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EMOTION_ID:
      if (value == null) {
        unsetEmotionId();
      } else {
        setEmotionId((Long)value);
      }
      break;

    case KEY_INPUT:
      if (value == null) {
        unsetKeyInput();
      } else {
        setKeyInput((String)value);
      }
      break;

    case STYLE:
      if (value == null) {
        unsetStyle();
      } else {
        setStyle((String)value);
      }
      break;

    case SRC:
      if (value == null) {
        unsetSrc();
      } else {
        setSrc((String)value);
      }
      break;

    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((String)value);
      }
      break;

    case GROUP_ID:
      if (value == null) {
        unsetGroupId();
      } else {
        setGroupId((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EMOTION_ID:
      return Long.valueOf(getEmotionId());

    case KEY_INPUT:
      return getKeyInput();

    case STYLE:
      return getStyle();

    case SRC:
      return getSrc();

    case TITLE:
      return getTitle();

    case GROUP_ID:
      return getGroupId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EMOTION_ID:
      return isSetEmotionId();
    case KEY_INPUT:
      return isSetKeyInput();
    case STYLE:
      return isSetStyle();
    case SRC:
      return isSetSrc();
    case TITLE:
      return isSetTitle();
    case GROUP_ID:
      return isSetGroupId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof EmotionItem)
      return this.equals((EmotionItem)that);
    return false;
  }

  public boolean equals(EmotionItem that) {
    if (that == null)
      return false;

    boolean this_present_emotionId = true;
    boolean that_present_emotionId = true;
    if (this_present_emotionId || that_present_emotionId) {
      if (!(this_present_emotionId && that_present_emotionId))
        return false;
      if (this.emotionId != that.emotionId)
        return false;
    }

    boolean this_present_keyInput = true && this.isSetKeyInput();
    boolean that_present_keyInput = true && that.isSetKeyInput();
    if (this_present_keyInput || that_present_keyInput) {
      if (!(this_present_keyInput && that_present_keyInput))
        return false;
      if (!this.keyInput.equals(that.keyInput))
        return false;
    }

    boolean this_present_style = true && this.isSetStyle();
    boolean that_present_style = true && that.isSetStyle();
    if (this_present_style || that_present_style) {
      if (!(this_present_style && that_present_style))
        return false;
      if (!this.style.equals(that.style))
        return false;
    }

    boolean this_present_src = true && this.isSetSrc();
    boolean that_present_src = true && that.isSetSrc();
    if (this_present_src || that_present_src) {
      if (!(this_present_src && that_present_src))
        return false;
      if (!this.src.equals(that.src))
        return false;
    }

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_groupId = true && this.isSetGroupId();
    boolean that_present_groupId = true && that.isSetGroupId();
    if (this_present_groupId || that_present_groupId) {
      if (!(this_present_groupId && that_present_groupId))
        return false;
      if (!this.groupId.equals(that.groupId))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(EmotionItem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetEmotionId()).compareTo(other.isSetEmotionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmotionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.emotionId, other.emotionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeyInput()).compareTo(other.isSetKeyInput());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyInput()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyInput, other.keyInput);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStyle()).compareTo(other.isSetStyle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStyle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.style, other.style);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSrc()).compareTo(other.isSetSrc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSrc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.src, other.src);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGroupId()).compareTo(other.isSetGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.groupId, other.groupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("EmotionItem(");
    boolean first = true;

    sb.append("emotionId:");
    sb.append(this.emotionId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyInput:");
    if (this.keyInput == null) {
      sb.append("null");
    } else {
      sb.append(this.keyInput);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("style:");
    if (this.style == null) {
      sb.append("null");
    } else {
      sb.append(this.style);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("src:");
    if (this.src == null) {
      sb.append("null");
    } else {
      sb.append(this.src);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("title:");
    if (this.title == null) {
      sb.append("null");
    } else {
      sb.append(this.title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("groupId:");
    if (this.groupId == null) {
      sb.append("null");
    } else {
      sb.append(this.groupId);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class EmotionItemStandardSchemeFactory implements SchemeFactory {
    public EmotionItemStandardScheme getScheme() {
      return new EmotionItemStandardScheme();
    }
  }

  private static class EmotionItemStandardScheme extends StandardScheme<EmotionItem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, EmotionItem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EMOTION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.emotionId = iprot.readI64();
              struct.setEmotionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY_INPUT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keyInput = iprot.readString();
              struct.setKeyInputIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STYLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.style = iprot.readString();
              struct.setStyleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SRC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.src = iprot.readString();
              struct.setSrcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.groupId = iprot.readString();
              struct.setGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, EmotionItem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(EMOTION_ID_FIELD_DESC);
      oprot.writeI64(struct.emotionId);
      oprot.writeFieldEnd();
      if (struct.keyInput != null) {
        oprot.writeFieldBegin(KEY_INPUT_FIELD_DESC);
        oprot.writeString(struct.keyInput);
        oprot.writeFieldEnd();
      }
      if (struct.style != null) {
        oprot.writeFieldBegin(STYLE_FIELD_DESC);
        oprot.writeString(struct.style);
        oprot.writeFieldEnd();
      }
      if (struct.src != null) {
        oprot.writeFieldBegin(SRC_FIELD_DESC);
        oprot.writeString(struct.src);
        oprot.writeFieldEnd();
      }
      if (struct.title != null) {
        oprot.writeFieldBegin(TITLE_FIELD_DESC);
        oprot.writeString(struct.title);
        oprot.writeFieldEnd();
      }
      if (struct.groupId != null) {
        oprot.writeFieldBegin(GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.groupId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class EmotionItemTupleSchemeFactory implements SchemeFactory {
    public EmotionItemTupleScheme getScheme() {
      return new EmotionItemTupleScheme();
    }
  }

  private static class EmotionItemTupleScheme extends TupleScheme<EmotionItem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, EmotionItem struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetEmotionId()) {
        optionals.set(0);
      }
      if (struct.isSetKeyInput()) {
        optionals.set(1);
      }
      if (struct.isSetStyle()) {
        optionals.set(2);
      }
      if (struct.isSetSrc()) {
        optionals.set(3);
      }
      if (struct.isSetTitle()) {
        optionals.set(4);
      }
      if (struct.isSetGroupId()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetEmotionId()) {
        oprot.writeI64(struct.emotionId);
      }
      if (struct.isSetKeyInput()) {
        oprot.writeString(struct.keyInput);
      }
      if (struct.isSetStyle()) {
        oprot.writeString(struct.style);
      }
      if (struct.isSetSrc()) {
        oprot.writeString(struct.src);
      }
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetGroupId()) {
        oprot.writeString(struct.groupId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, EmotionItem struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.emotionId = iprot.readI64();
        struct.setEmotionIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.keyInput = iprot.readString();
        struct.setKeyInputIsSet(true);
      }
      if (incoming.get(2)) {
        struct.style = iprot.readString();
        struct.setStyleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.src = iprot.readString();
        struct.setSrcIsSet(true);
      }
      if (incoming.get(4)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(5)) {
        struct.groupId = iprot.readString();
        struct.setGroupIdIsSet(true);
      }
    }
  }

}

